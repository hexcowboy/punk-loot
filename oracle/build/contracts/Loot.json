{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "PunkConsumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isShiny",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "ids",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "shiny",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC721/IERC721.sol",
    "1": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC721/IERC721Receiver.sol",
    "2": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC721/extensions/IERC721Metadata.sol",
    "3": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Address.sol",
    "4": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Strings.sol",
    "5": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/introspection/ERC165.sol",
    "6": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/introspection/IERC165.sol",
    "8": "contracts/Loot.sol",
    "9": "contracts/Oracle.sol"
  },
  "ast": {
    "absolutePath": "contracts/Loot.sol",
    "exportedSymbols": {
      "Address": [
        1594
      ],
      "ERC165": [
        1821
      ],
      "IERC165": [
        1833
      ],
      "IERC721": [
        1252
      ],
      "IERC721Metadata": [
        1297
      ],
      "IERC721Receiver": [
        1270
      ],
      "Loot": [
        967
      ],
      "Oracle": [
        1136
      ],
      "Strings": [
        1797
      ]
    },
    "id": 968,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 259,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:8"
      },
      {
        "absolutePath": "contracts/Oracle.sol",
        "file": "./Oracle.sol",
        "id": 260,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1137,
        "src": "56:22:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 261,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1253,
        "src": "79:58:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 262,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1298,
        "src": "138:77:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 263,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1834,
        "src": "216:65:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC721/IERC721Receiver.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
        "id": 264,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1271,
        "src": "282:66:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/introspection/ERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
        "id": 265,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1822,
        "src": "349:64:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Address.sol",
        "file": "@openzeppelin/contracts/utils/Address.sol",
        "id": 266,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1595,
        "src": "414:51:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jack/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Strings.sol",
        "file": "@openzeppelin/contracts/utils/Strings.sol",
        "id": 267,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 968,
        "sourceUnit": 1798,
        "src": "466:51:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 269,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1821,
              "src": "800:6:8"
            },
            "id": 270,
            "nodeType": "InheritanceSpecifier",
            "src": "800:6:8"
          },
          {
            "baseName": {
              "id": 271,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1252,
              "src": "808:7:8"
            },
            "id": 272,
            "nodeType": "InheritanceSpecifier",
            "src": "808:7:8"
          },
          {
            "baseName": {
              "id": 273,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1297,
              "src": "817:15:8"
            },
            "id": 274,
            "nodeType": "InheritanceSpecifier",
            "src": "817:15:8"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 268,
          "nodeType": "StructuredDocumentation",
          "src": "519:263:8",
          "text": " @title Loot NFT\n @dev This contract is a light implementation of ERC721 to save on gas and bloat\n @notice Much of this code is taken from the OpenZeppelin ERC721 implementation\n         https://docs.openzeppelin.com/contracts/4.x/api/token/erc721"
        },
        "fullyImplemented": true,
        "id": 967,
        "linearizedBaseContracts": [
          967,
          1297,
          1252,
          1821,
          1833
        ],
        "name": "Loot",
        "nameLocation": "792:4:8",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 277,
            "libraryName": {
              "id": 275,
              "name": "Address",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1594,
              "src": "845:7:8"
            },
            "nodeType": "UsingForDirective",
            "src": "839:26:8",
            "typeName": {
              "id": 276,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "857:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "id": 280,
            "libraryName": {
              "id": 278,
              "name": "Strings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1797,
              "src": "876:7:8"
            },
            "nodeType": "UsingForDirective",
            "src": "870:26:8",
            "typeName": {
              "id": 279,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "888:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 282,
            "mutability": "mutable",
            "name": "_name",
            "nameLocation": "935:5:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "920:20:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 281,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "920:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 284,
            "mutability": "mutable",
            "name": "_symbol",
            "nameLocation": "982:7:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "967:22:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 283,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "967:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 286,
            "mutability": "mutable",
            "name": "_baseURI",
            "nameLocation": "1033:8:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1018:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 285,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1018:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 289,
            "mutability": "mutable",
            "name": "_oracle",
            "nameLocation": "1081:7:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1066:22:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Oracle_$1136",
              "typeString": "contract Oracle"
            },
            "typeName": {
              "id": 288,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 287,
                "name": "Oracle",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1136,
                "src": "1066:6:8"
              },
              "referencedDeclaration": 1136,
              "src": "1066:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Oracle_$1136",
                "typeString": "contract Oracle"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 291,
            "mutability": "mutable",
            "name": "_index",
            "nameLocation": "1145:6:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1129:22:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 290,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1129:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 295,
            "mutability": "mutable",
            "name": "_owners",
            "nameLocation": "1240:7:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1204:43:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 294,
              "keyType": {
                "id": 292,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1212:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1204:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 293,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1223:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 299,
            "mutability": "mutable",
            "name": "_shiny",
            "nameLocation": "1324:6:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1291:39:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
              "typeString": "mapping(uint256 => bool)"
            },
            "typeName": {
              "id": 298,
              "keyType": {
                "id": 296,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1299:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1291:24:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                "typeString": "mapping(uint256 => bool)"
              },
              "valueType": {
                "id": 297,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1310:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 303,
            "mutability": "mutable",
            "name": "_balances",
            "nameLocation": "1417:9:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1381:45:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 302,
              "keyType": {
                "id": 300,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1389:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1381:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 301,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1400:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 307,
            "mutability": "mutable",
            "name": "_tokenApprovals",
            "nameLocation": "1518:15:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1482:51:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 306,
              "keyType": {
                "id": 304,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1490:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1482:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 305,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1501:7:8",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 313,
            "mutability": "mutable",
            "name": "_operatorApprovals",
            "nameLocation": "1641:18:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1588:71:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(address => bool))"
            },
            "typeName": {
              "id": 312,
              "keyType": {
                "id": 308,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1596:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1588:44:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(address => bool))"
              },
              "valueType": {
                "id": 311,
                "keyType": {
                  "id": 309,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1615:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1607:24:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                },
                "valueType": {
                  "id": 310,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1626:4:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 317,
            "mutability": "mutable",
            "name": "_punkMinted",
            "nameLocation": "1758:11:8",
            "nodeType": "VariableDeclaration",
            "scope": 967,
            "src": "1725:44:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
              "typeString": "mapping(uint256 => bool)"
            },
            "typeName": {
              "id": 316,
              "keyType": {
                "id": 314,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1733:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1725:24:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                "typeString": "mapping(uint256 => bool)"
              },
              "valueType": {
                "id": 315,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1744:4:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "id": 323,
            "name": "PunkConsumed",
            "nameLocation": "1826:12:8",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 322,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 319,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "punkId",
                  "nameLocation": "1855:6:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 323,
                  "src": "1839:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 318,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1839:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 321,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1879:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 323,
                  "src": "1863:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 320,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1863:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1838:44:8"
            },
            "src": "1820:63:8"
          },
          {
            "body": {
              "id": 353,
              "nodeType": "Block",
              "src": "2136:121:8",
              "statements": [
                {
                  "expression": {
                    "id": 337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 335,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 282,
                      "src": "2146:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 336,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 326,
                      "src": "2154:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2146:13:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 338,
                  "nodeType": "ExpressionStatement",
                  "src": "2146:13:8"
                },
                {
                  "expression": {
                    "id": 341,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 339,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 284,
                      "src": "2169:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 340,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 328,
                      "src": "2179:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2169:17:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 342,
                  "nodeType": "ExpressionStatement",
                  "src": "2169:17:8"
                },
                {
                  "expression": {
                    "id": 345,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 343,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 286,
                      "src": "2196:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 344,
                      "name": "baseURI_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 330,
                      "src": "2207:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2196:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 346,
                  "nodeType": "ExpressionStatement",
                  "src": "2196:19:8"
                },
                {
                  "expression": {
                    "id": 351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 347,
                      "name": "_oracle",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 289,
                      "src": "2225:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Oracle_$1136",
                        "typeString": "contract Oracle"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 349,
                          "name": "oracle_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 332,
                          "src": "2242:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 348,
                        "name": "Oracle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1136,
                        "src": "2235:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Oracle_$1136_$",
                          "typeString": "type(contract Oracle)"
                        }
                      },
                      "id": 350,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2235:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Oracle_$1136",
                        "typeString": "contract Oracle"
                      }
                    },
                    "src": "2225:25:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Oracle_$1136",
                      "typeString": "contract Oracle"
                    }
                  },
                  "id": 352,
                  "nodeType": "ExpressionStatement",
                  "src": "2225:25:8"
                }
              ]
            },
            "documentation": {
              "id": 324,
              "nodeType": "StructuredDocumentation",
              "src": "1889:107:8",
              "text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection"
            },
            "id": 354,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 333,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 326,
                  "mutability": "mutable",
                  "name": "name_",
                  "nameLocation": "2036:5:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 354,
                  "src": "2022:19:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 325,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2022:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 328,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nameLocation": "2065:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 354,
                  "src": "2051:21:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 327,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2051:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 330,
                  "mutability": "mutable",
                  "name": "baseURI_",
                  "nameLocation": "2096:8:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 354,
                  "src": "2082:22:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 329,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2082:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 332,
                  "mutability": "mutable",
                  "name": "oracle_",
                  "nameLocation": "2122:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 354,
                  "src": "2114:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 331,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2114:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2012:123:8"
            },
            "returnParameters": {
              "id": 334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2136:0:8"
            },
            "scope": 967,
            "src": "2001:256:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 368,
              "nodeType": "Block",
              "src": "2366:155:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 358,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2397:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 359,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2397:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 360,
                              "name": "_oracle",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "2411:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Oracle_$1136",
                                "typeString": "contract Oracle"
                              }
                            },
                            "id": 361,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "operator",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 974,
                            "src": "2411:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                              "typeString": "function () view external returns (address)"
                            }
                          },
                          "id": 362,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2411:18:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2397:32:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c7920746865206f7261636c65206f70657261746f72206d617920706572666f726d207468697320616374696f6e",
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2443:50:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8f838567f5ff9ac50cd236f5e25efd25d30be7f5f73dcf970ebe8f73d5744142",
                          "typeString": "literal_string \"Only the oracle operator may perform this action\""
                        },
                        "value": "Only the oracle operator may perform this action"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8f838567f5ff9ac50cd236f5e25efd25d30be7f5f73dcf970ebe8f73d5744142",
                          "typeString": "literal_string \"Only the oracle operator may perform this action\""
                        }
                      ],
                      "id": 357,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2376:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 365,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2376:127:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 366,
                  "nodeType": "ExpressionStatement",
                  "src": "2376:127:8"
                },
                {
                  "id": 367,
                  "nodeType": "PlaceholderStatement",
                  "src": "2513:1:8"
                }
              ]
            },
            "documentation": {
              "id": 355,
              "nodeType": "StructuredDocumentation",
              "src": "2263:68:8",
              "text": " @dev Modifier that only oracle operators may call"
            },
            "id": 369,
            "name": "onlyOracleOperator",
            "nameLocation": "2345:18:8",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 356,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2363:2:8"
            },
            "src": "2336:185:8",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 380,
              "nodeType": "Block",
              "src": "2639:40:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 377,
                        "name": "_oracle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 289,
                        "src": "2664:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Oracle_$1136",
                          "typeString": "contract Oracle"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_Oracle_$1136",
                          "typeString": "contract Oracle"
                        }
                      ],
                      "id": 376,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "2656:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 375,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2656:7:8",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 378,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2656:16:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 374,
                  "id": 379,
                  "nodeType": "Return",
                  "src": "2649:23:8"
                }
              ]
            },
            "documentation": {
              "id": 370,
              "nodeType": "StructuredDocumentation",
              "src": "2527:56:8",
              "text": " @dev Gets the oracle operator address"
            },
            "functionSelector": "833b1fce",
            "id": 381,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOracle",
            "nameLocation": "2597:9:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 371,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2606:2:8"
            },
            "returnParameters": {
              "id": 374,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 373,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 381,
                  "src": "2630:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 372,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2630:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2629:9:8"
            },
            "scope": 967,
            "src": "2588:91:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1820,
              1832
            ],
            "body": {
              "id": 411,
              "nodeType": "Block",
              "src": "2895:192:8",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 409,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 404,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 397,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 392,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 384,
                          "src": "2924:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 394,
                                "name": "IERC721",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1252,
                                "src": "2944:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721_$1252_$",
                                  "typeString": "type(contract IERC721)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721_$1252_$",
                                  "typeString": "type(contract IERC721)"
                                }
                              ],
                              "id": 393,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "2939:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 395,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2939:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1252",
                              "typeString": "type(contract IERC721)"
                            }
                          },
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "interfaceId",
                          "nodeType": "MemberAccess",
                          "src": "2939:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "src": "2924:40:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 403,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 398,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 384,
                          "src": "2980:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 400,
                                "name": "IERC721Metadata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1297,
                                "src": "3000:15:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1297_$",
                                  "typeString": "type(contract IERC721Metadata)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1297_$",
                                  "typeString": "type(contract IERC721Metadata)"
                                }
                              ],
                              "id": 399,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "2995:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 401,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2995:21:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1297",
                              "typeString": "type(contract IERC721Metadata)"
                            }
                          },
                          "id": 402,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "interfaceId",
                          "nodeType": "MemberAccess",
                          "src": "2995:33:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "src": "2980:48:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "2924:104:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 407,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 384,
                          "src": "3068:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        ],
                        "expression": {
                          "id": 405,
                          "name": "super",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -25,
                          "src": "3044:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_super$_Loot_$967_$",
                            "typeString": "type(contract super Loot)"
                          }
                        },
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "supportsInterface",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1820,
                        "src": "3044:23:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                          "typeString": "function (bytes4) view returns (bool)"
                        }
                      },
                      "id": 408,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3044:36:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2924:156:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 391,
                  "id": 410,
                  "nodeType": "Return",
                  "src": "2905:175:8"
                }
              ]
            },
            "documentation": {
              "id": 382,
              "nodeType": "StructuredDocumentation",
              "src": "2685:53:8",
              "text": " @dev Defines the ERC165 interfaces"
            },
            "functionSelector": "01ffc9a7",
            "id": 412,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "2752:17:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 388,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 386,
                  "name": "ERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1821,
                  "src": "2851:6:8"
                },
                {
                  "id": 387,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1833,
                  "src": "2859:7:8"
                }
              ],
              "src": "2842:25:8"
            },
            "parameters": {
              "id": 385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 384,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "2777:11:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 412,
                  "src": "2770:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 383,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2770:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2769:20:8"
            },
            "returnParameters": {
              "id": 391,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 390,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 412,
                  "src": "2885:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 389,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2885:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2884:6:8"
            },
            "scope": 967,
            "src": "2743:344:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1177
            ],
            "body": {
              "id": 425,
              "nodeType": "Block",
              "src": "3343:40:8",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 421,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 303,
                      "src": "3360:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 423,
                    "indexExpression": {
                      "id": 422,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 415,
                      "src": "3370:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3360:16:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 420,
                  "id": 424,
                  "nodeType": "Return",
                  "src": "3353:23:8"
                }
              ]
            },
            "documentation": {
              "id": 413,
              "nodeType": "StructuredDocumentation",
              "src": "3093:120:8",
              "text": " @dev Check the balance of the provided address\n @notice Does not throw for zero address queries"
            },
            "functionSelector": "70a08231",
            "id": 426,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "3227:9:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 417,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3304:8:8"
            },
            "parameters": {
              "id": 416,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 415,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "3245:5:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "3237:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 414,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3237:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3236:15:8"
            },
            "returnParameters": {
              "id": 420,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 419,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "3330:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 418,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3330:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3329:9:8"
            },
            "scope": 967,
            "src": "3218:165:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1185
            ],
            "body": {
              "id": 443,
              "nodeType": "Block",
              "src": "3631:71:8",
              "statements": [
                {
                  "assignments": [
                    436
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 436,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "3649:5:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 443,
                      "src": "3641:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 435,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3641:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 440,
                  "initialValue": {
                    "baseExpression": {
                      "id": 437,
                      "name": "_owners",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 295,
                      "src": "3657:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                        "typeString": "mapping(uint256 => address)"
                      }
                    },
                    "id": 439,
                    "indexExpression": {
                      "id": 438,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 429,
                      "src": "3665:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3657:16:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3641:32:8"
                },
                {
                  "expression": {
                    "id": 441,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 436,
                    "src": "3690:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 434,
                  "id": 442,
                  "nodeType": "Return",
                  "src": "3683:12:8"
                }
              ]
            },
            "documentation": {
              "id": 427,
              "nodeType": "StructuredDocumentation",
              "src": "3389:112:8",
              "text": " @dev Get the owner of a specific token\n @notice Does not throw for zero address queries"
            },
            "functionSelector": "6352211e",
            "id": 444,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "ownerOf",
            "nameLocation": "3515:7:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 431,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3592:8:8"
            },
            "parameters": {
              "id": 430,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 429,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "3531:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 444,
                  "src": "3523:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 428,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3523:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3522:17:8"
            },
            "returnParameters": {
              "id": 434,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 433,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 444,
                  "src": "3618:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 432,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3618:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3617:9:8"
            },
            "scope": 967,
            "src": "3506:196:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1195
            ],
            "body": {
              "id": 545,
              "nodeType": "Block",
              "src": "3928:876:8",
              "statements": [
                {
                  "assignments": [
                    456
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 456,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "3946:5:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "3938:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 455,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3938:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 461,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 459,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 451,
                        "src": "3967:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 457,
                        "name": "Loot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 967,
                        "src": "3954:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Loot_$967_$",
                          "typeString": "type(contract Loot)"
                        }
                      },
                      "id": 458,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 444,
                      "src": "3954:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 460,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3954:21:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3938:37:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 470,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 463,
                            "name": "_owners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 295,
                            "src": "3993:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 465,
                          "indexExpression": {
                            "id": 464,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 451,
                            "src": "4001:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3993:16:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 468,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4021:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4013:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 466,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4013:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 469,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4013:10:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3993:30:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520746f6b656e20646f6573206e6f74206578697374",
                        "id": 471,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4025:26:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d1cc72098bc7571a0fc1c5949b3670a8f16a3f52d31658bee06dd40e739628b0",
                          "typeString": "literal_string \"The token does not exist\""
                        },
                        "value": "The token does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d1cc72098bc7571a0fc1c5949b3670a8f16a3f52d31658bee06dd40e739628b0",
                          "typeString": "literal_string \"The token does not exist\""
                        }
                      ],
                      "id": 462,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3985:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 472,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3985:67:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 473,
                  "nodeType": "ExpressionStatement",
                  "src": "3985:67:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 491,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 485,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 478,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 475,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4083:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 476,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4083:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 477,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "4097:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "4083:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 484,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 480,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 451,
                                  "src": "4134:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 479,
                                "name": "getApproved",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 723,
                                "src": "4122:11:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 481,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4122:20:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "id": 482,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4146:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 483,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4146:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "4122:34:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4083:73:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 487,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "4193:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 488,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4200:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 489,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4200:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 486,
                            "name": "isApprovedForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 775,
                            "src": "4176:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address,address) view returns (bool)"
                            }
                          },
                          "id": 490,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4176:35:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4083:128:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546865206f70657261746f72206973206e6f7420617070726f76656420746f207472616e73666572207468697320746f6b656e",
                        "id": 492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4225:53:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5087386aac808bc889fe05e25324aecae343f301caa4a2ae0882355020cdfc80",
                          "typeString": "literal_string \"The operator is not approved to transfer this token\""
                        },
                        "value": "The operator is not approved to transfer this token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5087386aac808bc889fe05e25324aecae343f301caa4a2ae0882355020cdfc80",
                          "typeString": "literal_string \"The operator is not approved to transfer this token\""
                        }
                      ],
                      "id": 474,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4062:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 493,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4062:226:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 494,
                  "nodeType": "ExpressionStatement",
                  "src": "4062:226:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 496,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 456,
                          "src": "4319:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 497,
                          "name": "from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 447,
                          "src": "4328:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4319:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652073656e64657220646f6573206e6f74206f776e2074686520746f6b656e20746f206265207472616e736665726564",
                        "id": 499,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4346:52:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c0033701cb93aafc21cbcfa163b7d30d72840a6478ed865d438ab277881e2587",
                          "typeString": "literal_string \"The sender does not own the token to be transfered\""
                        },
                        "value": "The sender does not own the token to be transfered"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c0033701cb93aafc21cbcfa163b7d30d72840a6478ed865d438ab277881e2587",
                          "typeString": "literal_string \"The sender does not own the token to be transfered\""
                        }
                      ],
                      "id": 495,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4298:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 500,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4298:110:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 501,
                  "nodeType": "ExpressionStatement",
                  "src": "4298:110:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 508,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 503,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 449,
                          "src": "4439:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 506,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4453:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 505,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4445:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 504,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4445:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 507,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4445:10:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4439:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520746f6b656e206d6179206e6f742062652073656e7420746f20746865207a65726f2061646472657373",
                        "id": 509,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4469:47:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_74822b6add88661407c6f7b19266f60ec9c8007e8828c0584c54516174f02da5",
                          "typeString": "literal_string \"The token may not be sent to the zero address\""
                        },
                        "value": "The token may not be sent to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_74822b6add88661407c6f7b19266f60ec9c8007e8828c0584c54516174f02da5",
                          "typeString": "literal_string \"The token may not be sent to the zero address\""
                        }
                      ],
                      "id": 502,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4418:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4418:108:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 511,
                  "nodeType": "ExpressionStatement",
                  "src": "4418:108:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 514,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 447,
                            "src": "4580:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 515,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 449,
                            "src": "4586:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 516,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 451,
                            "src": "4590:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 513,
                          "name": "_checkOnERC721Received",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 644,
                          "src": "4557:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) returns (bool)"
                          }
                        },
                        "id": 517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4557:41:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652072656365697665722063616e6e6f74206163636570742045524337323120746f6b656e73",
                        "id": 518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4612:42:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_939ade121b33e36156c9d8ad70f72630e2e7e8be3f0a1ff36555ecdea177dd16",
                          "typeString": "literal_string \"The receiver cannot accept ERC721 tokens\""
                        },
                        "value": "The receiver cannot accept ERC721 tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_939ade121b33e36156c9d8ad70f72630e2e7e8be3f0a1ff36555ecdea177dd16",
                          "typeString": "literal_string \"The receiver cannot accept ERC721 tokens\""
                        }
                      ],
                      "id": 512,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4536:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4536:128:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 520,
                  "nodeType": "ExpressionStatement",
                  "src": "4536:128:8"
                },
                {
                  "expression": {
                    "id": 525,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 521,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "4675:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 523,
                      "indexExpression": {
                        "id": 522,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 447,
                        "src": "4685:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4675:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 524,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4694:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4675:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 526,
                  "nodeType": "ExpressionStatement",
                  "src": "4675:20:8"
                },
                {
                  "expression": {
                    "id": 531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 527,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "4705:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 529,
                      "indexExpression": {
                        "id": 528,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 449,
                        "src": "4715:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4705:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 530,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4722:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4705:18:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 532,
                  "nodeType": "ExpressionStatement",
                  "src": "4705:18:8"
                },
                {
                  "expression": {
                    "id": 537,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 533,
                        "name": "_owners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 295,
                        "src": "4733:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 535,
                      "indexExpression": {
                        "id": 534,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 451,
                        "src": "4741:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4733:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 536,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 449,
                      "src": "4752:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4733:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 538,
                  "nodeType": "ExpressionStatement",
                  "src": "4733:21:8"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 540,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 447,
                        "src": "4779:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 541,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 449,
                        "src": "4785:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 542,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 451,
                        "src": "4789:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 539,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1151,
                      "src": "4770:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 543,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4770:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 544,
                  "nodeType": "EmitStatement",
                  "src": "4765:32:8"
                }
              ]
            },
            "documentation": {
              "id": 445,
              "nodeType": "StructuredDocumentation",
              "src": "3708:92:8",
              "text": " @dev Transfers a token and checks that the receiver accepts ERC721 tokens"
            },
            "functionSelector": "42842e0e",
            "id": 546,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransferFrom",
            "nameLocation": "3814:16:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 453,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3919:8:8"
            },
            "parameters": {
              "id": 452,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 447,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "3848:4:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 546,
                  "src": "3840:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 446,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3840:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 449,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "3870:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 546,
                  "src": "3862:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 448,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3862:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 451,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "3890:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 546,
                  "src": "3882:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 450,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3882:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3830:73:8"
            },
            "returnParameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3928:0:8"
            },
            "scope": 967,
            "src": "3805:999:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1251
            ],
            "body": {
              "id": 565,
              "nodeType": "Block",
              "src": "5088:52:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 560,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "5115:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 561,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 551,
                        "src": "5121:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 562,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 553,
                        "src": "5125:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 559,
                      "name": "safeTransferFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        546,
                        566
                      ],
                      "referencedDeclaration": 546,
                      "src": "5098:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5098:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 564,
                  "nodeType": "ExpressionStatement",
                  "src": "5098:35:8"
                }
              ]
            },
            "documentation": {
              "id": 547,
              "nodeType": "StructuredDocumentation",
              "src": "4810:122:8",
              "text": " @dev Defaults to the safe transfer method and discards data\n @notice Required for ERC721 standard"
            },
            "functionSelector": "b88d4fde",
            "id": 566,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransferFrom",
            "nameLocation": "4946:16:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 557,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5079:8:8"
            },
            "parameters": {
              "id": 556,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 549,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "4980:4:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 566,
                  "src": "4972:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 548,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4972:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 551,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "5002:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 566,
                  "src": "4994:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 550,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4994:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 553,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5022:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 566,
                  "src": "5014:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 552,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5014:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 555,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "5052:5:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 566,
                  "src": "5039:18:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 554,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5039:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4962:101:8"
            },
            "returnParameters": {
              "id": 558,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5088:0:8"
            },
            "scope": 967,
            "src": "4937:203:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1205
            ],
            "body": {
              "id": 583,
              "nodeType": "Block",
              "src": "5375:52:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 578,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 569,
                        "src": "5402:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 579,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "5408:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 580,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 573,
                        "src": "5412:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 577,
                      "name": "safeTransferFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        546,
                        566
                      ],
                      "referencedDeclaration": 546,
                      "src": "5385:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 581,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5385:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 582,
                  "nodeType": "ExpressionStatement",
                  "src": "5385:35:8"
                }
              ]
            },
            "documentation": {
              "id": 567,
              "nodeType": "StructuredDocumentation",
              "src": "5146:105:8",
              "text": " @dev Defaults to the safe transfer method\n @notice Required for ERC721 interface"
            },
            "functionSelector": "23b872dd",
            "id": 584,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "5265:12:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 575,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5366:8:8"
            },
            "parameters": {
              "id": 574,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 569,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "5295:4:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 584,
                  "src": "5287:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 568,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5287:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 571,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "5317:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 584,
                  "src": "5309:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 570,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5309:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 573,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5337:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 584,
                  "src": "5329:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 572,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5329:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5277:73:8"
            },
            "returnParameters": {
              "id": 576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5375:0:8"
            },
            "scope": 967,
            "src": "5256:171:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 643,
              "nodeType": "Block",
              "src": "5643:733:8",
              "statements": [
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 596,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 589,
                        "src": "5657:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 597,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1317,
                      "src": "5657:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5657:15:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 641,
                    "nodeType": "Block",
                    "src": "6334:36:8",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 639,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6355:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 595,
                        "id": 640,
                        "nodeType": "Return",
                        "src": "6348:11:8"
                      }
                    ]
                  },
                  "id": 642,
                  "nodeType": "IfStatement",
                  "src": "5653:717:8",
                  "trueBody": {
                    "id": 638,
                    "nodeType": "Block",
                    "src": "5674:654:8",
                    "statements": [
                      {
                        "clauses": [
                          {
                            "block": {
                              "id": 618,
                              "nodeType": "Block",
                              "src": "5910:91:8",
                              "statements": [
                                {
                                  "expression": {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    },
                                    "id": 616,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 612,
                                      "name": "retval",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 610,
                                      "src": "5935:6:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "expression": {
                                        "expression": {
                                          "id": 613,
                                          "name": "IERC721Receiver",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1270,
                                          "src": "5945:15:8",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1270_$",
                                            "typeString": "type(contract IERC721Receiver)"
                                          }
                                        },
                                        "id": 614,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "onERC721Received",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1269,
                                        "src": "5945:32:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
                                          "typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
                                        }
                                      },
                                      "id": 615,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "selector",
                                      "nodeType": "MemberAccess",
                                      "src": "5945:41:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    "src": "5935:51:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "functionReturnParameters": 595,
                                  "id": 617,
                                  "nodeType": "Return",
                                  "src": "5928:58:8"
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 619,
                            "nodeType": "TryCatchClause",
                            "parameters": {
                              "id": 611,
                              "nodeType": "ParameterList",
                              "parameters": [
                                {
                                  "constant": false,
                                  "id": 610,
                                  "mutability": "mutable",
                                  "name": "retval",
                                  "nameLocation": "5902:6:8",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 619,
                                  "src": "5895:13:8",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  "typeName": {
                                    "id": 609,
                                    "name": "bytes4",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5895:6:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "src": "5894:15:8"
                            },
                            "src": "5886:115:8"
                          },
                          {
                            "block": {
                              "id": 635,
                              "nodeType": "Block",
                              "src": "6030:288:8",
                              "statements": [
                                {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 626,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 623,
                                        "name": "reason",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 621,
                                        "src": "6052:6:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 624,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "src": "6052:13:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 625,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6069:1:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "6052:18:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": {
                                    "id": 633,
                                    "nodeType": "Block",
                                    "src": "6169:135:8",
                                    "statements": [
                                      {
                                        "AST": {
                                          "nodeType": "YulBlock",
                                          "src": "6200:86:8",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "kind": "number",
                                                        "nodeType": "YulLiteral",
                                                        "src": "6237:2:8",
                                                        "type": "",
                                                        "value": "32"
                                                      },
                                                      {
                                                        "name": "reason",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "6241:6:8"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "6233:3:8"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "6233:15:8"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "reason",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "6256:6:8"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "mload",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "6250:5:8"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "6250:13:8"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "revert",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6226:6:8"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "6226:38:8"
                                              },
                                              "nodeType": "YulExpressionStatement",
                                              "src": "6226:38:8"
                                            }
                                          ]
                                        },
                                        "evmVersion": "istanbul",
                                        "externalReferences": [
                                          {
                                            "declaration": 621,
                                            "isOffset": false,
                                            "isSlot": false,
                                            "src": "6241:6:8",
                                            "valueSize": 1
                                          },
                                          {
                                            "declaration": 621,
                                            "isOffset": false,
                                            "isSlot": false,
                                            "src": "6256:6:8",
                                            "valueSize": 1
                                          }
                                        ],
                                        "id": 632,
                                        "nodeType": "InlineAssembly",
                                        "src": "6191:95:8"
                                      }
                                    ]
                                  },
                                  "id": 634,
                                  "nodeType": "IfStatement",
                                  "src": "6048:256:8",
                                  "trueBody": {
                                    "id": 631,
                                    "nodeType": "Block",
                                    "src": "6072:91:8",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "hexValue": "5468652072656365697665722063616e6e6f74206163636570742045524337323120746f6b656e73",
                                              "id": 628,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "6101:42:8",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_939ade121b33e36156c9d8ad70f72630e2e7e8be3f0a1ff36555ecdea177dd16",
                                                "typeString": "literal_string \"The receiver cannot accept ERC721 tokens\""
                                              },
                                              "value": "The receiver cannot accept ERC721 tokens"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_stringliteral_939ade121b33e36156c9d8ad70f72630e2e7e8be3f0a1ff36555ecdea177dd16",
                                                "typeString": "literal_string \"The receiver cannot accept ERC721 tokens\""
                                              }
                                            ],
                                            "id": 627,
                                            "name": "revert",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                              -19,
                                              -19
                                            ],
                                            "referencedDeclaration": -19,
                                            "src": "6094:6:8",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                              "typeString": "function (string memory) pure"
                                            }
                                          },
                                          "id": 629,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "6094:50:8",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                          }
                                        },
                                        "id": 630,
                                        "nodeType": "ExpressionStatement",
                                        "src": "6094:50:8"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 636,
                            "nodeType": "TryCatchClause",
                            "parameters": {
                              "id": 622,
                              "nodeType": "ParameterList",
                              "parameters": [
                                {
                                  "constant": false,
                                  "id": 621,
                                  "mutability": "mutable",
                                  "name": "reason",
                                  "nameLocation": "6022:6:8",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 636,
                                  "src": "6009:19:8",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes"
                                  },
                                  "typeName": {
                                    "id": 620,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6009:5:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_storage_ptr",
                                      "typeString": "bytes"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "src": "6008:21:8"
                            },
                            "src": "6002:316:8"
                          }
                        ],
                        "externalCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 603,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5766:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 604,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5766:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 605,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 587,
                              "src": "5798:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 606,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 591,
                              "src": "5824:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5853:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 600,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 589,
                                  "src": "5724:2:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 599,
                                "name": "IERC721Receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1270,
                                "src": "5708:15:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1270_$",
                                  "typeString": "type(contract IERC721Receiver)"
                                }
                              },
                              "id": 601,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5708:19:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC721Receiver_$1270",
                                "typeString": "contract IERC721Receiver"
                              }
                            },
                            "id": 602,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "onERC721Received",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1269,
                            "src": "5708:36:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
                              "typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
                            }
                          },
                          "id": 608,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5708:165:8",
                          "tryCall": true,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 637,
                        "nodeType": "TryStatement",
                        "src": "5688:630:8"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 585,
              "nodeType": "StructuredDocumentation",
              "src": "5433:77:8",
              "text": " @dev Checks if the receiver can handle receiving an ERC721"
            },
            "id": 644,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkOnERC721Received",
            "nameLocation": "5524:22:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 592,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 587,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "5564:4:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 644,
                  "src": "5556:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 586,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5556:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 589,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "5586:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 644,
                  "src": "5578:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 588,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5578:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 591,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5606:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 644,
                  "src": "5598:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 590,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5598:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5546:73:8"
            },
            "returnParameters": {
              "id": 595,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 594,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 644,
                  "src": "5637:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 593,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5637:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5636:6:8"
            },
            "scope": 967,
            "src": "5515:861:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "baseFunctions": [
              1213
            ],
            "body": {
              "id": 696,
              "nodeType": "Block",
              "src": "6522:388:8",
              "statements": [
                {
                  "assignments": [
                    654
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 654,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "6540:5:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 696,
                      "src": "6532:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 653,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6532:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 659,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 657,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 649,
                        "src": "6561:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 655,
                        "name": "Loot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 967,
                        "src": "6548:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Loot_$967_$",
                          "typeString": "type(contract Loot)"
                        }
                      },
                      "id": 656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 444,
                      "src": "6548:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6548:21:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6532:37:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 663,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 661,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 647,
                          "src": "6587:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 662,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 654,
                          "src": "6593:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6587:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546865206f776e657220646f6573206e6f74206e65656420746f20626520617070726f766564",
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6600:40:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc469416976d510dcc8bdcb3a54a4569a73efe3d46be4c701c6b24046273e299",
                          "typeString": "literal_string \"The owner does not need to be approved\""
                        },
                        "value": "The owner does not need to be approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc469416976d510dcc8bdcb3a54a4569a73efe3d46be4c701c6b24046273e299",
                          "typeString": "literal_string \"The owner does not need to be approved\""
                        }
                      ],
                      "id": 660,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6579:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 665,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6579:62:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 666,
                  "nodeType": "ExpressionStatement",
                  "src": "6579:62:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 677,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 671,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 668,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "6673:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6673:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 670,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 654,
                            "src": "6687:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6673:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 673,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 654,
                              "src": "6713:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 674,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "6720:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 675,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "6720:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 672,
                            "name": "isApprovedForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 775,
                            "src": "6696:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address,address) view returns (bool)"
                            }
                          },
                          "id": 676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6696:35:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6673:58:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206f776e657273206f72206f70657261746f7273206d61792063616c6c20746869732066756e6374696f6e",
                        "id": 678,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6745:49:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c484a1c656db6bce1db58462424182070f8bddee7485afc6f07e005ef0d6d5d2",
                          "typeString": "literal_string \"Only owners or operators may call this function\""
                        },
                        "value": "Only owners or operators may call this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c484a1c656db6bce1db58462424182070f8bddee7485afc6f07e005ef0d6d5d2",
                          "typeString": "literal_string \"Only owners or operators may call this function\""
                        }
                      ],
                      "id": 667,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6652:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 679,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6652:152:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 680,
                  "nodeType": "ExpressionStatement",
                  "src": "6652:152:8"
                },
                {
                  "expression": {
                    "id": 685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 681,
                        "name": "_tokenApprovals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 307,
                        "src": "6815:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 683,
                      "indexExpression": {
                        "id": 682,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 649,
                        "src": "6831:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6815:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 684,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 647,
                      "src": "6842:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6815:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 686,
                  "nodeType": "ExpressionStatement",
                  "src": "6815:29:8"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 690,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 649,
                            "src": "6881:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 688,
                            "name": "Loot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 967,
                            "src": "6868:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Loot_$967_$",
                              "typeString": "type(contract Loot)"
                            }
                          },
                          "id": 689,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ownerOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 444,
                          "src": "6868:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                            "typeString": "function (uint256) view returns (address)"
                          }
                        },
                        "id": 691,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6868:21:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 692,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 647,
                        "src": "6891:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 693,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 649,
                        "src": "6895:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 687,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1160,
                      "src": "6859:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6859:44:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 695,
                  "nodeType": "EmitStatement",
                  "src": "6854:49:8"
                }
              ]
            },
            "documentation": {
              "id": 645,
              "nodeType": "StructuredDocumentation",
              "src": "6382:65:8",
              "text": " @dev Approves an operator to handle the ERC721"
            },
            "functionSelector": "095ea7b3",
            "id": 697,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "6461:7:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 651,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6513:8:8"
            },
            "parameters": {
              "id": 650,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 647,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "6477:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 697,
                  "src": "6469:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 646,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6469:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 649,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "6489:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 697,
                  "src": "6481:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 648,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6481:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6468:29:8"
            },
            "returnParameters": {
              "id": 652,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6522:0:8"
            },
            "scope": 967,
            "src": "6452:458:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1221
            ],
            "body": {
              "id": 722,
              "nodeType": "Block",
              "src": "7125:172:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 714,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 707,
                            "name": "_owners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 295,
                            "src": "7156:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 709,
                          "indexExpression": {
                            "id": 708,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 700,
                            "src": "7164:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7156:16:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 712,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7184:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 711,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7176:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 710,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7176:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 713,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7176:10:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7156:30:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f766964656420746f6b656e20494420646f6573206e6f74206578697374",
                        "id": 715,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7200:38:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_934a2a57784f7ca3e84075dadbf8d1591f9bf42e2d3de09130902b8175957d4b",
                          "typeString": "literal_string \"The provided token ID does not exist\""
                        },
                        "value": "The provided token ID does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_934a2a57784f7ca3e84075dadbf8d1591f9bf42e2d3de09130902b8175957d4b",
                          "typeString": "literal_string \"The provided token ID does not exist\""
                        }
                      ],
                      "id": 706,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7135:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 716,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7135:113:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 717,
                  "nodeType": "ExpressionStatement",
                  "src": "7135:113:8"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 718,
                      "name": "_tokenApprovals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 307,
                      "src": "7266:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                        "typeString": "mapping(uint256 => address)"
                      }
                    },
                    "id": 720,
                    "indexExpression": {
                      "id": 719,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 700,
                      "src": "7282:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7266:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 705,
                  "id": 721,
                  "nodeType": "Return",
                  "src": "7259:31:8"
                }
              ]
            },
            "documentation": {
              "id": 698,
              "nodeType": "StructuredDocumentation",
              "src": "6916:75:8",
              "text": " @dev Checks which address is approved for given token ID"
            },
            "functionSelector": "081812fc",
            "id": 723,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getApproved",
            "nameLocation": "7005:11:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 702,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7086:8:8"
            },
            "parameters": {
              "id": 701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 700,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7025:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 723,
                  "src": "7017:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 699,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7017:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7016:17:8"
            },
            "returnParameters": {
              "id": 705,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 704,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 723,
                  "src": "7112:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 703,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7112:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7111:9:8"
            },
            "scope": 967,
            "src": "6996:301:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1229
            ],
            "body": {
              "id": 756,
              "nodeType": "Block",
              "src": "7500:209:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 733,
                          "name": "operator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 726,
                          "src": "7518:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "expression": {
                            "id": 734,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "7530:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 735,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "7530:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7518:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652073656e646572206d6179206e6f7420626520746865206f70657261746f72",
                        "id": 737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7542:36:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6ec7b1d2b1a45ab87bbdcabb376b25edfffc0b5c7d0c405af0b6eb0f327c5fbd",
                          "typeString": "literal_string \"The sender may not be the operator\""
                        },
                        "value": "The sender may not be the operator"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6ec7b1d2b1a45ab87bbdcabb376b25edfffc0b5c7d0c405af0b6eb0f327c5fbd",
                          "typeString": "literal_string \"The sender may not be the operator\""
                        }
                      ],
                      "id": 732,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7510:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 738,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7510:69:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 739,
                  "nodeType": "ExpressionStatement",
                  "src": "7510:69:8"
                },
                {
                  "expression": {
                    "id": 747,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 740,
                          "name": "_operatorApprovals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 313,
                          "src": "7590:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(address => bool))"
                          }
                        },
                        "id": 744,
                        "indexExpression": {
                          "expression": {
                            "id": 741,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "7609:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 742,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "7609:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7590:30:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 745,
                      "indexExpression": {
                        "id": 743,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 726,
                        "src": "7621:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7590:40:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 746,
                      "name": "approved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 728,
                      "src": "7633:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "7590:51:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 748,
                  "nodeType": "ExpressionStatement",
                  "src": "7590:51:8"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 750,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7671:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 751,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7671:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 752,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 726,
                        "src": "7683:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 753,
                        "name": "approved",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 728,
                        "src": "7693:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 749,
                      "name": "ApprovalForAll",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1169,
                      "src": "7656:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                        "typeString": "function (address,address,bool)"
                      }
                    },
                    "id": 754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7656:46:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 755,
                  "nodeType": "EmitStatement",
                  "src": "7651:51:8"
                }
              ]
            },
            "documentation": {
              "id": 724,
              "nodeType": "StructuredDocumentation",
              "src": "7303:80:8",
              "text": " @dev Approve or remove operator as an operator for the caller"
            },
            "functionSelector": "a22cb465",
            "id": 757,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setApprovalForAll",
            "nameLocation": "7397:17:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 730,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7487:8:8"
            },
            "parameters": {
              "id": 729,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 726,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "7423:8:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 757,
                  "src": "7415:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 725,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7415:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 728,
                  "mutability": "mutable",
                  "name": "approved",
                  "nameLocation": "7438:8:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 757,
                  "src": "7433:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 727,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7433:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7414:33:8"
            },
            "returnParameters": {
              "id": 731,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7500:0:8"
            },
            "scope": 967,
            "src": "7388:321:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1239
            ],
            "body": {
              "id": 774,
              "nodeType": "Block",
              "src": "7962:59:8",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 768,
                        "name": "_operatorApprovals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 313,
                        "src": "7979:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                          "typeString": "mapping(address => mapping(address => bool))"
                        }
                      },
                      "id": 770,
                      "indexExpression": {
                        "id": 769,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "7998:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "7979:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 772,
                    "indexExpression": {
                      "id": 771,
                      "name": "operator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 762,
                      "src": "8005:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7979:35:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 767,
                  "id": 773,
                  "nodeType": "Return",
                  "src": "7972:42:8"
                }
              ]
            },
            "documentation": {
              "id": 758,
              "nodeType": "StructuredDocumentation",
              "src": "7715:95:8",
              "text": " @dev Returns if the operator is allowed to manage all of the assets of owner"
            },
            "functionSelector": "e985e9c5",
            "id": 775,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedForAll",
            "nameLocation": "7824:16:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 764,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7926:8:8"
            },
            "parameters": {
              "id": 763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 760,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "7849:5:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7841:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 759,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7841:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 762,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "7864:8:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7856:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 761,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7856:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7840:33:8"
            },
            "returnParameters": {
              "id": 767,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 766,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7952:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 765,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7952:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7951:6:8"
            },
            "scope": 967,
            "src": "7815:206:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1282
            ],
            "body": {
              "id": 784,
              "nodeType": "Block",
              "src": "8189:29:8",
              "statements": [
                {
                  "expression": {
                    "id": 782,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 282,
                    "src": "8206:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 781,
                  "id": 783,
                  "nodeType": "Return",
                  "src": "8199:12:8"
                }
              ]
            },
            "documentation": {
              "id": 776,
              "nodeType": "StructuredDocumentation",
              "src": "8027:88:8",
              "text": " @dev Returns the name of the token\n @notice Required for ERC721"
            },
            "functionSelector": "06fdde03",
            "id": 785,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "8129:4:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 778,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8156:8:8"
            },
            "parameters": {
              "id": 777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8133:2:8"
            },
            "returnParameters": {
              "id": 781,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 780,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 785,
                  "src": "8174:13:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 779,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8174:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8173:15:8"
            },
            "scope": 967,
            "src": "8120:98:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1288
            ],
            "body": {
              "id": 794,
              "nodeType": "Block",
              "src": "8390:31:8",
              "statements": [
                {
                  "expression": {
                    "id": 792,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 284,
                    "src": "8407:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 791,
                  "id": 793,
                  "nodeType": "Return",
                  "src": "8400:14:8"
                }
              ]
            },
            "documentation": {
              "id": 786,
              "nodeType": "StructuredDocumentation",
              "src": "8224:90:8",
              "text": " @dev Returns the symbol of the token\n @notice Required for ERC721"
            },
            "functionSelector": "95d89b41",
            "id": 795,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nameLocation": "8328:6:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 788,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8357:8:8"
            },
            "parameters": {
              "id": 787,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8334:2:8"
            },
            "returnParameters": {
              "id": 791,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 790,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 795,
                  "src": "8375:13:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 789,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8375:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8374:15:8"
            },
            "scope": 967,
            "src": "8319:102:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1296
            ],
            "body": {
              "id": 840,
              "nodeType": "Block",
              "src": "8656:320:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 812,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 805,
                            "name": "_owners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 295,
                            "src": "8687:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 807,
                          "indexExpression": {
                            "id": 806,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "8695:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8687:16:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 810,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8715:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 809,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8707:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 808,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8707:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 811,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8707:10:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8687:30:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f766964656420746f6b656e20494420646f6573206e6f74206578697374",
                        "id": 813,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8731:38:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_934a2a57784f7ca3e84075dadbf8d1591f9bf42e2d3de09130902b8175957d4b",
                          "typeString": "literal_string \"The provided token ID does not exist\""
                        },
                        "value": "The provided token ID does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_934a2a57784f7ca3e84075dadbf8d1591f9bf42e2d3de09130902b8175957d4b",
                          "typeString": "literal_string \"The provided token ID does not exist\""
                        }
                      ],
                      "id": 804,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8666:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 814,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8666:113:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 815,
                  "nodeType": "ExpressionStatement",
                  "src": "8666:113:8"
                },
                {
                  "assignments": [
                    817
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 817,
                      "mutability": "mutable",
                      "name": "baseURI",
                      "nameLocation": "8804:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 840,
                      "src": "8790:21:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 816,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "8790:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 819,
                  "initialValue": {
                    "id": 818,
                    "name": "_baseURI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 286,
                    "src": "8814:8:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8790:32:8"
                },
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 826,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 822,
                              "name": "baseURI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 817,
                              "src": "8857:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 821,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8851:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                              "typeString": "type(bytes storage pointer)"
                            },
                            "typeName": {
                              "id": 820,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "8851:5:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 823,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8851:14:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 824,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "8851:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 825,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8875:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "8851:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "hexValue": "",
                      "id": 837,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8967:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "id": 838,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "8851:118:8",
                    "trueExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 831,
                              "name": "baseURI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 817,
                              "src": "8919:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 832,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 798,
                                  "src": "8928:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 833,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "toString",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1679,
                                "src": "8928:16:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256) pure returns (string memory)"
                                }
                              },
                              "id": 834,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8928:18:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 829,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "8902:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 830,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "src": "8902:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 835,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8902:45:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "8895:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 827,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8895:6:8",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 836,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8895:53:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 803,
                  "id": 839,
                  "nodeType": "Return",
                  "src": "8832:137:8"
                }
              ]
            },
            "documentation": {
              "id": 796,
              "nodeType": "StructuredDocumentation",
              "src": "8427:92:8",
              "text": " @dev Returns the base URI of the token\n @notice Required for ERC721"
            },
            "functionSelector": "c87b56dd",
            "id": 841,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "8533:8:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 800,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8611:8:8"
            },
            "parameters": {
              "id": 799,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 798,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "8550:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 841,
                  "src": "8542:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 797,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8542:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8541:17:8"
            },
            "returnParameters": {
              "id": 803,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 802,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 841,
                  "src": "8637:13:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 801,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8637:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8636:15:8"
            },
            "scope": 967,
            "src": "8524:452:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 952,
              "nodeType": "Block",
              "src": "9120:841:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 861,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 856,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 845,
                          "src": "9151:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 859,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9165:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 858,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9157:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 857,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9157:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9157:10:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9151:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520746f6b656e206d6179206e6f742062652073656e7420746f20746865207a65726f2061646472657373",
                        "id": 862,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9181:47:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_74822b6add88661407c6f7b19266f60ec9c8007e8828c0584c54516174f02da5",
                          "typeString": "literal_string \"The token may not be sent to the zero address\""
                        },
                        "value": "The token may not be sent to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_74822b6add88661407c6f7b19266f60ec9c8007e8828c0584c54516174f02da5",
                          "typeString": "literal_string \"The token may not be sent to the zero address\""
                        }
                      ],
                      "id": 855,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9130:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 863,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9130:108:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 864,
                  "nodeType": "ExpressionStatement",
                  "src": "9130:108:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 869,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "9256:20:8",
                        "subExpression": {
                          "baseExpression": {
                            "id": 866,
                            "name": "_punkMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "9257:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 868,
                          "indexExpression": {
                            "id": 867,
                            "name": "punkId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 843,
                            "src": "9269:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9257:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652043727970746f50756e6b2077617320616c7265616479206d696e746564",
                        "id": 870,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9278:35:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0faacb3a0fbc33ede8333373946ac919e0ef6b19494207e8e7f075af37d2e6c5",
                          "typeString": "literal_string \"The CryptoPunk was already minted\""
                        },
                        "value": "The CryptoPunk was already minted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0faacb3a0fbc33ede8333373946ac919e0ef6b19494207e8e7f075af37d2e6c5",
                          "typeString": "literal_string \"The CryptoPunk was already minted\""
                        }
                      ],
                      "id": 865,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9248:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9248:66:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 872,
                  "nodeType": "ExpressionStatement",
                  "src": "9248:66:8"
                },
                {
                  "assignments": [
                    874
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 874,
                      "mutability": "mutable",
                      "name": "newIndex",
                      "nameLocation": "9333:8:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 952,
                      "src": "9325:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 873,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9325:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 879,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 878,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 875,
                      "name": "_index",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 291,
                      "src": "9344:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "expression": {
                        "id": 876,
                        "name": "ids",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 848,
                        "src": "9353:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                          "typeString": "uint8[] memory"
                        }
                      },
                      "id": 877,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "9353:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9344:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9325:38:8"
                },
                {
                  "body": {
                    "id": 939,
                    "nodeType": "Block",
                    "src": "9416:463:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 896,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 889,
                                  "name": "_owners",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 295,
                                  "src": "9455:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                    "typeString": "mapping(uint256 => address)"
                                  }
                                },
                                "id": 891,
                                "indexExpression": {
                                  "id": 890,
                                  "name": "_index",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 291,
                                  "src": "9463:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "9455:15:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 894,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "9482:1:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 893,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "9474:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 892,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9474:7:8",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 895,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9474:10:8",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "9455:29:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5468652070726f766964656420746f6b656e20494420646f6573206e6f74206578697374",
                              "id": 897,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9502:38:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_934a2a57784f7ca3e84075dadbf8d1591f9bf42e2d3de09130902b8175957d4b",
                                "typeString": "literal_string \"The provided token ID does not exist\""
                              },
                              "value": "The provided token ID does not exist"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_934a2a57784f7ca3e84075dadbf8d1591f9bf42e2d3de09130902b8175957d4b",
                                "typeString": "literal_string \"The provided token ID does not exist\""
                              }
                            ],
                            "id": 888,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9430:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9430:124:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 899,
                        "nodeType": "ExpressionStatement",
                        "src": "9430:124:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 904,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9624:1:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 903,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "9616:7:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 902,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "9616:7:8",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 905,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "9616:10:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 906,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 845,
                                  "src": "9628:2:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 907,
                                  "name": "_index",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 291,
                                  "src": "9632:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 901,
                                "name": "_checkOnERC721Received",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 644,
                                "src": "9593:22:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256) returns (bool)"
                                }
                              },
                              "id": 908,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9593:46:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5468652072656365697665722063616e6e6f74206163636570742045524337323120746f6b656e73",
                              "id": 909,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9657:42:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_939ade121b33e36156c9d8ad70f72630e2e7e8be3f0a1ff36555ecdea177dd16",
                                "typeString": "literal_string \"The receiver cannot accept ERC721 tokens\""
                              },
                              "value": "The receiver cannot accept ERC721 tokens"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_939ade121b33e36156c9d8ad70f72630e2e7e8be3f0a1ff36555ecdea177dd16",
                                "typeString": "literal_string \"The receiver cannot accept ERC721 tokens\""
                              }
                            ],
                            "id": 900,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9568:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9568:145:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 911,
                        "nodeType": "ExpressionStatement",
                        "src": "9568:145:8"
                      },
                      {
                        "expression": {
                          "id": 916,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 912,
                              "name": "_balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 303,
                              "src": "9728:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 914,
                            "indexExpression": {
                              "id": 913,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 845,
                              "src": "9738:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9728:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "hexValue": "31",
                            "id": 915,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9745:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "9728:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 917,
                        "nodeType": "ExpressionStatement",
                        "src": "9728:18:8"
                      },
                      {
                        "expression": {
                          "id": 922,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 918,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 295,
                              "src": "9760:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 920,
                            "indexExpression": {
                              "id": 919,
                              "name": "_index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 291,
                              "src": "9768:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9760:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 921,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 845,
                            "src": "9778:2:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9760:20:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 923,
                        "nodeType": "ExpressionStatement",
                        "src": "9760:20:8"
                      },
                      {
                        "expression": {
                          "id": 928,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 924,
                              "name": "_shiny",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "9794:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                "typeString": "mapping(uint256 => bool)"
                              }
                            },
                            "id": 926,
                            "indexExpression": {
                              "id": 925,
                              "name": "_index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 291,
                              "src": "9801:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9794:14:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 927,
                            "name": "shiny",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 850,
                            "src": "9811:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "9794:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 929,
                        "nodeType": "ExpressionStatement",
                        "src": "9794:22:8"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 933,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9853:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 932,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9845:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 931,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9845:7:8",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 934,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9845:10:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 935,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 845,
                              "src": "9857:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 936,
                              "name": "_index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 291,
                              "src": "9861:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 930,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1151,
                            "src": "9836:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 937,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9836:32:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 938,
                        "nodeType": "EmitStatement",
                        "src": "9831:37:8"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 884,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 882,
                      "name": "_index",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 291,
                      "src": "9387:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 883,
                      "name": "newIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 874,
                      "src": "9396:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9387:17:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 940,
                  "initializationExpression": {
                    "expression": {
                      "id": 880,
                      "name": "_index",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 291,
                      "src": "9379:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 881,
                    "nodeType": "ExpressionStatement",
                    "src": "9379:6:8"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 886,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "9406:8:8",
                      "subExpression": {
                        "id": 885,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 291,
                        "src": "9406:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 887,
                    "nodeType": "ExpressionStatement",
                    "src": "9406:8:8"
                  },
                  "nodeType": "ForStatement",
                  "src": "9374:505:8"
                },
                {
                  "expression": {
                    "id": 945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 941,
                        "name": "_punkMinted",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 317,
                        "src": "9889:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 943,
                      "indexExpression": {
                        "id": 942,
                        "name": "punkId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 843,
                        "src": "9901:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9889:19:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 944,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9911:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "9889:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 946,
                  "nodeType": "ExpressionStatement",
                  "src": "9889:26:8"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 948,
                        "name": "punkId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 843,
                        "src": "9943:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 949,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 845,
                        "src": "9951:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 947,
                      "name": "PunkConsumed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 323,
                      "src": "9930:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9930:24:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 951,
                  "nodeType": "EmitStatement",
                  "src": "9925:29:8"
                }
              ]
            },
            "functionSelector": "389ebd4d",
            "id": 953,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 853,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 852,
                  "name": "onlyOracleOperator",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 369,
                  "src": "9101:18:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "9101:18:8"
              }
            ],
            "name": "mint",
            "nameLocation": "8991:4:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 843,
                  "mutability": "mutable",
                  "name": "punkId",
                  "nameLocation": "9013:6:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 953,
                  "src": "9005:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9005:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 845,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "9037:2:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 953,
                  "src": "9029:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 844,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9029:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 848,
                  "mutability": "mutable",
                  "name": "ids",
                  "nameLocation": "9064:3:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 953,
                  "src": "9049:18:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 846,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "9049:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 847,
                    "nodeType": "ArrayTypeName",
                    "src": "9049:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 850,
                  "mutability": "mutable",
                  "name": "shiny",
                  "nameLocation": "9082:5:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 953,
                  "src": "9077:10:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 849,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9077:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8995:98:8"
            },
            "returnParameters": {
              "id": 854,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9120:0:8"
            },
            "scope": 967,
            "src": "8982:979:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 965,
              "nodeType": "Block",
              "src": "10091:39:8",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 961,
                      "name": "_shiny",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 299,
                      "src": "10108:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                        "typeString": "mapping(uint256 => bool)"
                      }
                    },
                    "id": 963,
                    "indexExpression": {
                      "id": 962,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 956,
                      "src": "10115:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "10108:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 960,
                  "id": 964,
                  "nodeType": "Return",
                  "src": "10101:22:8"
                }
              ]
            },
            "documentation": {
              "id": 954,
              "nodeType": "StructuredDocumentation",
              "src": "9967:58:8",
              "text": " @dev Returns the shinyness of an object"
            },
            "functionSelector": "22fa1d85",
            "id": 966,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isShiny",
            "nameLocation": "10039:7:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 957,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 956,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "10055:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 966,
                  "src": "10047:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 955,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10047:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10046:17:8"
            },
            "returnParameters": {
              "id": 960,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 959,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 966,
                  "src": "10085:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 958,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10085:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10084:6:8"
            },
            "scope": 967,
            "src": "10030:100:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 968,
        "src": "783:9349:8",
        "usedErrors": []
      }
    ],
    "src": "31:10102:8"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162001891380380620018918339810160408190526200003491620001fd565b835162000049906000906020870190620000a0565b5082516200005f906001906020860190620000a0565b50815162000075906002906020850190620000a0565b50600380546001600160a01b0319166001600160a01b03929092169190911790555062000303915050565b828054620000ae90620002b0565b90600052602060002090601f016020900481019282620000d257600085556200011d565b82601f10620000ed57805160ff19168380011785556200011d565b828001600101855582156200011d579182015b828111156200011d57825182559160200191906001019062000100565b506200012b9291506200012f565b5090565b5b808211156200012b576000815560010162000130565b600082601f8301126200015857600080fd5b81516001600160401b0380821115620001755762000175620002ed565b604051601f8301601f19908116603f01168101908282118183101715620001a057620001a0620002ed565b81604052838152602092508683858801011115620001bd57600080fd5b600091505b83821015620001e15785820183015181830184015290820190620001c2565b83821115620001f35760008385830101525b9695505050505050565b600080600080608085870312156200021457600080fd5b84516001600160401b03808211156200022c57600080fd5b6200023a8883890162000146565b955060208701519150808211156200025157600080fd5b6200025f8883890162000146565b945060408701519150808211156200027657600080fd5b50620002858782880162000146565b606087015190935090506001600160a01b0381168114620002a557600080fd5b939692955090935050565b600181811c90821680620002c557607f821691505b60208210811415620002e757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61157e80620003136000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb46514610257578063b88d4fde1461026a578063c87b56dd1461027d578063e985e9c51461029057600080fd5b80636352211e146101de57806370a0823114610207578063833b1fce1461023e57806395d89b411461024f57600080fd5b806322fa1d85116100d357806322fa1d851461018257806323b872dd146101a5578063389ebd4d146101b857806342842e0e146101cb57600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b61011861011336600461113d565b6102a3565b60405190151581526020015b60405180910390f35b6101356102f5565b60405161012491906112ac565b610155610150366004611177565b610387565b6040516001600160a01b039091168152602001610124565b61018061017b366004611111565b6103e0565b005b610118610190366004611177565b60009081526006602052604090205460ff1690565b6101806101b3366004610fd7565b610543565b6101806101c6366004611190565b610553565b6101806101d9366004610fd7565b610871565b6101556101ec366004611177565b6000908152600560205260409020546001600160a01b031690565b610230610215366004610f64565b6001600160a01b031660009081526007602052604090205490565b604051908152602001610124565b6003546001600160a01b0316610155565b610135610af7565b6101806102653660046110dc565b610b06565b610180610278366004611018565b610bd6565b61013561028b366004611177565b610be7565b61011861029e366004610f9e565b610cfd565b60006001600160e01b031982166380ac58cd60e01b14806102d457506001600160e01b03198216635b5e139f60e01b145b806102ef57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461030490611458565b80601f016020809104026020016040519081016040528092919081815260200182805461033090611458565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050905090565b6000818152600560205260408120546001600160a01b03166103c45760405162461bcd60e51b81526004016103bb9061132c565b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b6000818152600560205260409020546001600160a01b0390811690831681141561045b5760405162461bcd60e51b815260206004820152602660248201527f546865206f776e657220646f6573206e6f74206e65656420746f2062652061706044820152651c1c9bdd995960d21b60648201526084016103bb565b336001600160a01b038216148061047757506104778133610cfd565b6104db5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79206f776e657273206f72206f70657261746f7273206d61792063616c60448201526e36103a3434b990333ab731ba34b7b760891b60648201526084016103bb565b600082815260086020908152604080832080546001600160a01b0319166001600160a01b038881169182179092556005909352818420549151869492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61054e838383610871565b505050565b600360009054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610f81565b6001600160a01b0316336001600160a01b0316146106525760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7920746865206f7261636c65206f70657261746f72206d61792070657260448201526f3337b936903a3434b99030b1ba34b7b760811b60648201526084016103bb565b6001600160a01b0383166106785760405162461bcd60e51b81526004016103bb906112df565b6000848152600a602052604090205460ff16156106e15760405162461bcd60e51b815260206004820152602160248201527f5468652043727970746f50756e6b2077617320616c7265616479206d696e74656044820152601960fa1b60648201526084016103bb565b600082516004546106f291906113e9565b90505b80600454101561081e576004546000908152600560205260409020546001600160a01b0316156107375760405162461bcd60e51b81526004016103bb9061132c565b610745600085600454610d2b565b6107615760405162461bcd60e51b81526004016103bb90611370565b6001600160a01b038416600090815260076020526040812080546001929061078a9084906113e9565b909155505060048054600090815260056020908152604080832080546001600160a01b0319166001600160a01b038a16908117909155845484526006909252808320805460ff1916871515179055925492519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46004805490600061081483611493565b91905055506106f5565b6000858152600a6020526040808220805460ff19166001179055516001600160a01b0386169187917f346ded8055a0968941609c2ff8335d290f586f0f20658fac695b54946923a1f89190a35050505050565b6000818152600560205260409020546001600160a01b0316806108d65760405162461bcd60e51b815260206004820152601860248201527f54686520746f6b656e20646f6573206e6f74206578697374000000000000000060448201526064016103bb565b336001600160a01b03821614806108fd5750336108f283610387565b6001600160a01b0316145b8061090d575061090d8133610cfd565b6109755760405162461bcd60e51b815260206004820152603360248201527f546865206f70657261746f72206973206e6f7420617070726f76656420746f206044820152723a3930b739b332b9103a3434b9903a37b5b2b760691b60648201526084016103bb565b836001600160a01b0316816001600160a01b0316146109f15760405162461bcd60e51b815260206004820152603260248201527f5468652073656e64657220646f6573206e6f74206f776e2074686520746f6b656044820152711b881d1bc81899481d1c985b9cd9995c995960721b60648201526084016103bb565b6001600160a01b038316610a175760405162461bcd60e51b81526004016103bb906112df565b610a22848484610d2b565b610a3e5760405162461bcd60e51b81526004016103bb90611370565b6001600160a01b0384166000908152600760205260408120805460019290610a67908490611415565b90915550506001600160a01b0383166000908152600760205260408120805460019290610a959084906113e9565b909155505060008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b60606001805461030490611458565b6001600160a01b038216331415610b6a5760405162461bcd60e51b815260206004820152602260248201527f5468652073656e646572206d6179206e6f7420626520746865206f706572617460448201526137b960f11b60648201526084016103bb565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610be1848484610871565b50505050565b6000818152600560205260409020546060906001600160a01b0316610c1e5760405162461bcd60e51b81526004016103bb9061132c565b600060028054610c2d90611458565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5990611458565b8015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b505050505090506000815111610ccb5760405180602001604052806000815250610cf6565b80610cd584610e49565b604051602001610ce692919061127d565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b60006001600160a01b0383163b15610e3f57604051630a85bd0160e11b81523360048201526001600160a01b03858116602483015260448201849052608060648301526000608483015284169063150b7a029060a401602060405180830381600087803b158015610d9b57600080fd5b505af1925050508015610dcb575060408051601f3d908101601f19168201909252610dc89181019061115a565b60015b610e25573d808015610df9576040519150601f19603f3d011682016040523d82523d6000602084013e610dfe565b606091505b508051610e1d5760405162461bcd60e51b81526004016103bb90611370565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cf6565b5060019392505050565b606081610e6d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e975780610e8181611493565b9150610e909050600a83611401565b9150610e71565b60008167ffffffffffffffff811115610eb257610eb2611504565b6040519080825280601f01601f191660200182016040528015610edc576020820181803683370190505b5090505b8415610f4757610ef1600183611415565b9150610efe600a866114ae565b610f099060306113e9565b60f81b818381518110610f1e57610f1e6114ee565b60200101906001600160f81b031916908160001a905350610f40600a86611401565b9450610ee0565b949350505050565b80358015158114610f5f57600080fd5b919050565b600060208284031215610f7657600080fd5b8135610cf68161151a565b600060208284031215610f9357600080fd5b8151610cf68161151a565b60008060408385031215610fb157600080fd5b8235610fbc8161151a565b91506020830135610fcc8161151a565b809150509250929050565b600080600060608486031215610fec57600080fd5b8335610ff78161151a565b925060208401356110078161151a565b929592945050506040919091013590565b6000806000806080858703121561102e57600080fd5b84356110398161151a565b935060208581013561104a8161151a565b935060408601359250606086013567ffffffffffffffff8082111561106e57600080fd5b818801915088601f83011261108257600080fd5b81358181111561109457611094611504565b6110a6601f8201601f191685016113b8565b915080825289848285010111156110bc57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080604083850312156110ef57600080fd5b82356110fa8161151a565b915061110860208401610f4f565b90509250929050565b6000806040838503121561112457600080fd5b823561112f8161151a565b946020939093013593505050565b60006020828403121561114f57600080fd5b8135610cf681611532565b60006020828403121561116c57600080fd5b8151610cf681611532565b60006020828403121561118957600080fd5b5035919050565b600080600080608085870312156111a657600080fd5b843593506020808601356111b98161151a565b9350604086013567ffffffffffffffff808211156111d657600080fd5b818801915088601f8301126111ea57600080fd5b8135818111156111fc576111fc611504565b8060051b915061120d8483016113b8565b8181528481019084860184860187018d101561122857600080fd5b600095508594505b8385101561125c57803560ff81168114611248578687fd5b835260019490940193918601918601611230565b5080975050505050505061127260608601610f4f565b905092959194509250565b6000835161128f81846020880161142c565b8351908301906112a381836020880161142c565b01949350505050565b60208152600082518060208401526112cb81604085016020870161142c565b601f01601f19169190910160400192915050565b6020808252602d908201527f54686520746f6b656e206d6179206e6f742062652073656e7420746f2074686560408201526c207a65726f206164647265737360981b606082015260800190565b60208082526024908201527f5468652070726f766964656420746f6b656e20494420646f6573206e6f7420656040820152631e1a5cdd60e21b606082015260800190565b60208082526028908201527f5468652072656365697665722063616e6e6f74206163636570742045524337326040820152673120746f6b656e7360c01b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156113e1576113e1611504565b604052919050565b600082198211156113fc576113fc6114c2565b500190565b600082611410576114106114d8565b500490565b600082821015611427576114276114c2565b500390565b60005b8381101561144757818101518382015260200161142f565b83811115610be15750506000910152565b600181811c9082168061146c57607f821691505b6020821081141561148d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156114a7576114a76114c2565b5060010190565b6000826114bd576114bd6114d8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461152f57600080fd5b50565b6001600160e01b03198116811461152f57600080fdfea2646970667358221220aa97a63fd5f1fad588b22753c70de5d89ec347017600c9c6c6da1a7e85fe645c64736f6c63430008060033",
  "bytecodeSha1": "77d4d8574baa54de12e32ed6ead9693ad3ca75e1",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.6+commit.11564f7e"
  },
  "contractName": "Loot",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {},
      "2": {},
      "3": {},
      "4": {
        "Strings.toString": {
          "68": [
            548,
            558,
            false
          ]
        }
      },
      "5": {},
      "6": {},
      "8": {
        "Loot.approve": {
          "52": [
            6587,
            6598,
            true
          ],
          "53": [
            6673,
            6692,
            true
          ],
          "54": [
            6696,
            6731,
            true
          ]
        },
        "Loot.mint": {
          "55": [
            2397,
            2429,
            true
          ],
          "56": [
            9151,
            9167,
            true
          ],
          "57": [
            9256,
            9276,
            true
          ],
          "58": [
            9455,
            9484,
            true
          ],
          "59": [
            9593,
            9639,
            true
          ]
        },
        "Loot.safeTransferFrom": {
          "60": [
            4083,
            4102,
            true
          ],
          "61": [
            4122,
            4156,
            true
          ],
          "62": [
            4176,
            4211,
            true
          ],
          "63": [
            4319,
            4332,
            true
          ],
          "64": [
            4439,
            4455,
            true
          ],
          "65": [
            4557,
            4598,
            true
          ]
        },
        "Loot.setApprovalForAll": {
          "66": [
            7518,
            7540,
            true
          ]
        },
        "Loot.tokenURI": {
          "67": [
            8851,
            8876,
            true
          ]
        }
      },
      "9": {}
    },
    "statements": {
      "0": {},
      "1": {},
      "2": {},
      "3": {
        "Address.isContract": {
          "41": [
            1073,
            1088
          ]
        }
      },
      "4": {
        "Strings.toString": {
          "45": [
            574,
            584
          ],
          "46": [
            690,
            698
          ],
          "47": [
            712,
            722
          ],
          "48": [
            824,
            835
          ],
          "49": [
            849,
            905
          ],
          "50": [
            919,
            930
          ],
          "51": [
            950,
            971
          ]
        }
      },
      "5": {
        "ERC165.supportsInterface": {
          "4": [
            864,
            911
          ]
        }
      },
      "6": {},
      "8": {
        "Loot._checkOnERC721Received": {
          "42": [
            6094,
            6144
          ],
          "43": [
            5928,
            5986
          ],
          "44": [
            6348,
            6359
          ]
        },
        "Loot.approve": {
          "8": [
            6579,
            6641
          ],
          "9": [
            6652,
            6804
          ],
          "10": [
            6815,
            6844
          ],
          "11": [
            6854,
            6903
          ]
        },
        "Loot.balanceOf": {
          "1": [
            3353,
            3376
          ]
        },
        "Loot.getApproved": {
          "6": [
            7135,
            7248
          ],
          "7": [
            7259,
            7290
          ]
        },
        "Loot.getOracle": {
          "2": [
            2649,
            2672
          ]
        },
        "Loot.isApprovedForAll": {
          "40": [
            7972,
            8014
          ]
        },
        "Loot.isShiny": {
          "0": [
            10101,
            10123
          ]
        },
        "Loot.mint": {
          "13": [
            9130,
            9238
          ],
          "14": [
            9248,
            9314
          ],
          "15": [
            9430,
            9554
          ],
          "16": [
            9568,
            9713
          ],
          "17": [
            9728,
            9746
          ],
          "18": [
            9760,
            9780
          ],
          "19": [
            9794,
            9816
          ],
          "20": [
            9831,
            9868
          ],
          "21": [
            9406,
            9414
          ],
          "22": [
            9889,
            9915
          ],
          "23": [
            9925,
            9954
          ]
        },
        "Loot.name": {
          "5": [
            8199,
            8211
          ]
        },
        "Loot.safeTransferFrom": {
          "24": [
            3985,
            4052
          ],
          "25": [
            4062,
            4288
          ],
          "26": [
            4298,
            4408
          ],
          "27": [
            4418,
            4526
          ],
          "28": [
            4536,
            4664
          ],
          "29": [
            4675,
            4695
          ],
          "30": [
            4705,
            4723
          ],
          "31": [
            4733,
            4754
          ],
          "32": [
            4765,
            4797
          ],
          "37": [
            5098,
            5133
          ]
        },
        "Loot.setApprovalForAll": {
          "34": [
            7510,
            7579
          ],
          "35": [
            7590,
            7641
          ],
          "36": [
            7651,
            7702
          ]
        },
        "Loot.supportsInterface": {
          "3": [
            2905,
            3080
          ]
        },
        "Loot.symbol": {
          "33": [
            8400,
            8414
          ]
        },
        "Loot.tokenURI": {
          "38": [
            8666,
            8779
          ],
          "39": [
            8832,
            8969
          ]
        },
        "Loot.transferFrom": {
          "12": [
            5385,
            5420
          ]
        }
      },
      "9": {}
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.3.1/Address",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/ERC165",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC165",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC721",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC721Metadata",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC721Receiver",
    "Oracle",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/Strings"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb46514610257578063b88d4fde1461026a578063c87b56dd1461027d578063e985e9c51461029057600080fd5b80636352211e146101de57806370a0823114610207578063833b1fce1461023e57806395d89b411461024f57600080fd5b806322fa1d85116100d357806322fa1d851461018257806323b872dd146101a5578063389ebd4d146101b857806342842e0e146101cb57600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b61011861011336600461113d565b6102a3565b60405190151581526020015b60405180910390f35b6101356102f5565b60405161012491906112ac565b610155610150366004611177565b610387565b6040516001600160a01b039091168152602001610124565b61018061017b366004611111565b6103e0565b005b610118610190366004611177565b60009081526006602052604090205460ff1690565b6101806101b3366004610fd7565b610543565b6101806101c6366004611190565b610553565b6101806101d9366004610fd7565b610871565b6101556101ec366004611177565b6000908152600560205260409020546001600160a01b031690565b610230610215366004610f64565b6001600160a01b031660009081526007602052604090205490565b604051908152602001610124565b6003546001600160a01b0316610155565b610135610af7565b6101806102653660046110dc565b610b06565b610180610278366004611018565b610bd6565b61013561028b366004611177565b610be7565b61011861029e366004610f9e565b610cfd565b60006001600160e01b031982166380ac58cd60e01b14806102d457506001600160e01b03198216635b5e139f60e01b145b806102ef57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461030490611458565b80601f016020809104026020016040519081016040528092919081815260200182805461033090611458565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050905090565b6000818152600560205260408120546001600160a01b03166103c45760405162461bcd60e51b81526004016103bb9061132c565b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b6000818152600560205260409020546001600160a01b0390811690831681141561045b5760405162461bcd60e51b815260206004820152602660248201527f546865206f776e657220646f6573206e6f74206e65656420746f2062652061706044820152651c1c9bdd995960d21b60648201526084016103bb565b336001600160a01b038216148061047757506104778133610cfd565b6104db5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c79206f776e657273206f72206f70657261746f7273206d61792063616c60448201526e36103a3434b990333ab731ba34b7b760891b60648201526084016103bb565b600082815260086020908152604080832080546001600160a01b0319166001600160a01b038881169182179092556005909352818420549151869492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61054e838383610871565b505050565b600360009054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610f81565b6001600160a01b0316336001600160a01b0316146106525760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7920746865206f7261636c65206f70657261746f72206d61792070657260448201526f3337b936903a3434b99030b1ba34b7b760811b60648201526084016103bb565b6001600160a01b0383166106785760405162461bcd60e51b81526004016103bb906112df565b6000848152600a602052604090205460ff16156106e15760405162461bcd60e51b815260206004820152602160248201527f5468652043727970746f50756e6b2077617320616c7265616479206d696e74656044820152601960fa1b60648201526084016103bb565b600082516004546106f291906113e9565b90505b80600454101561081e576004546000908152600560205260409020546001600160a01b0316156107375760405162461bcd60e51b81526004016103bb9061132c565b610745600085600454610d2b565b6107615760405162461bcd60e51b81526004016103bb90611370565b6001600160a01b038416600090815260076020526040812080546001929061078a9084906113e9565b909155505060048054600090815260056020908152604080832080546001600160a01b0319166001600160a01b038a16908117909155845484526006909252808320805460ff1916871515179055925492519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46004805490600061081483611493565b91905055506106f5565b6000858152600a6020526040808220805460ff19166001179055516001600160a01b0386169187917f346ded8055a0968941609c2ff8335d290f586f0f20658fac695b54946923a1f89190a35050505050565b6000818152600560205260409020546001600160a01b0316806108d65760405162461bcd60e51b815260206004820152601860248201527f54686520746f6b656e20646f6573206e6f74206578697374000000000000000060448201526064016103bb565b336001600160a01b03821614806108fd5750336108f283610387565b6001600160a01b0316145b8061090d575061090d8133610cfd565b6109755760405162461bcd60e51b815260206004820152603360248201527f546865206f70657261746f72206973206e6f7420617070726f76656420746f206044820152723a3930b739b332b9103a3434b9903a37b5b2b760691b60648201526084016103bb565b836001600160a01b0316816001600160a01b0316146109f15760405162461bcd60e51b815260206004820152603260248201527f5468652073656e64657220646f6573206e6f74206f776e2074686520746f6b656044820152711b881d1bc81899481d1c985b9cd9995c995960721b60648201526084016103bb565b6001600160a01b038316610a175760405162461bcd60e51b81526004016103bb906112df565b610a22848484610d2b565b610a3e5760405162461bcd60e51b81526004016103bb90611370565b6001600160a01b0384166000908152600760205260408120805460019290610a67908490611415565b90915550506001600160a01b0383166000908152600760205260408120805460019290610a959084906113e9565b909155505060008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b60606001805461030490611458565b6001600160a01b038216331415610b6a5760405162461bcd60e51b815260206004820152602260248201527f5468652073656e646572206d6179206e6f7420626520746865206f706572617460448201526137b960f11b60648201526084016103bb565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610be1848484610871565b50505050565b6000818152600560205260409020546060906001600160a01b0316610c1e5760405162461bcd60e51b81526004016103bb9061132c565b600060028054610c2d90611458565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5990611458565b8015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b505050505090506000815111610ccb5760405180602001604052806000815250610cf6565b80610cd584610e49565b604051602001610ce692919061127d565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b60006001600160a01b0383163b15610e3f57604051630a85bd0160e11b81523360048201526001600160a01b03858116602483015260448201849052608060648301526000608483015284169063150b7a029060a401602060405180830381600087803b158015610d9b57600080fd5b505af1925050508015610dcb575060408051601f3d908101601f19168201909252610dc89181019061115a565b60015b610e25573d808015610df9576040519150601f19603f3d011682016040523d82523d6000602084013e610dfe565b606091505b508051610e1d5760405162461bcd60e51b81526004016103bb90611370565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cf6565b5060019392505050565b606081610e6d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e975780610e8181611493565b9150610e909050600a83611401565b9150610e71565b60008167ffffffffffffffff811115610eb257610eb2611504565b6040519080825280601f01601f191660200182016040528015610edc576020820181803683370190505b5090505b8415610f4757610ef1600183611415565b9150610efe600a866114ae565b610f099060306113e9565b60f81b818381518110610f1e57610f1e6114ee565b60200101906001600160f81b031916908160001a905350610f40600a86611401565b9450610ee0565b949350505050565b80358015158114610f5f57600080fd5b919050565b600060208284031215610f7657600080fd5b8135610cf68161151a565b600060208284031215610f9357600080fd5b8151610cf68161151a565b60008060408385031215610fb157600080fd5b8235610fbc8161151a565b91506020830135610fcc8161151a565b809150509250929050565b600080600060608486031215610fec57600080fd5b8335610ff78161151a565b925060208401356110078161151a565b929592945050506040919091013590565b6000806000806080858703121561102e57600080fd5b84356110398161151a565b935060208581013561104a8161151a565b935060408601359250606086013567ffffffffffffffff8082111561106e57600080fd5b818801915088601f83011261108257600080fd5b81358181111561109457611094611504565b6110a6601f8201601f191685016113b8565b915080825289848285010111156110bc57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080604083850312156110ef57600080fd5b82356110fa8161151a565b915061110860208401610f4f565b90509250929050565b6000806040838503121561112457600080fd5b823561112f8161151a565b946020939093013593505050565b60006020828403121561114f57600080fd5b8135610cf681611532565b60006020828403121561116c57600080fd5b8151610cf681611532565b60006020828403121561118957600080fd5b5035919050565b600080600080608085870312156111a657600080fd5b843593506020808601356111b98161151a565b9350604086013567ffffffffffffffff808211156111d657600080fd5b818801915088601f8301126111ea57600080fd5b8135818111156111fc576111fc611504565b8060051b915061120d8483016113b8565b8181528481019084860184860187018d101561122857600080fd5b600095508594505b8385101561125c57803560ff81168114611248578687fd5b835260019490940193918601918601611230565b5080975050505050505061127260608601610f4f565b905092959194509250565b6000835161128f81846020880161142c565b8351908301906112a381836020880161142c565b01949350505050565b60208152600082518060208401526112cb81604085016020870161142c565b601f01601f19169190910160400192915050565b6020808252602d908201527f54686520746f6b656e206d6179206e6f742062652073656e7420746f2074686560408201526c207a65726f206164647265737360981b606082015260800190565b60208082526024908201527f5468652070726f766964656420746f6b656e20494420646f6573206e6f7420656040820152631e1a5cdd60e21b606082015260800190565b60208082526028908201527f5468652072656365697665722063616e6e6f74206163636570742045524337326040820152673120746f6b656e7360c01b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156113e1576113e1611504565b604052919050565b600082198211156113fc576113fc6114c2565b500190565b600082611410576114106114d8565b500490565b600082821015611427576114276114c2565b500390565b60005b8381101561144757818101518382015260200161142f565b83811115610be15750506000910152565b600181811c9082168061146c57607f821691505b6020821081141561148d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156114a7576114a76114c2565b5060010190565b6000826114bd576114bd6114d8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461152f57600080fd5b50565b6001600160e01b03198116811461152f57600080fdfea2646970667358221220aa97a63fd5f1fad588b22753c70de5d89ec347017600c9c6c6da1a7e85fe645c64736f6c63430008060033",
  "deployedSourceMap": "783:9349:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2743:344;;;;;;:::i;:::-;;:::i;:::-;;;6757:14:10;;6750:22;6732:41;;6720:2;6705:18;2743:344:8;;;;;;;;8120:98;;;:::i;:::-;;;;;;;:::i;6996:301::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;5988:32:10;;;5970:51;;5958:2;5943:18;6996:301:8;5925:102:10;6452:458:8;;;;;;:::i;:::-;;:::i;:::-;;10030:100;;;;;;:::i;:::-;10085:4;10108:15;;;:6;:15;;;;;;;;;10030:100;5256:171;;;;;;:::i;:::-;;:::i;8982:979::-;;;;;;:::i;:::-;;:::i;3805:999::-;;;;;;:::i;:::-;;:::i;3506:196::-;;;;;;:::i;:::-;3618:7;3657:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3657:16:8;;3506:196;3218:165;;;;;;:::i;:::-;-1:-1:-1;;;;;3360:16:8;3330:7;3360:16;;;:9;:16;;;;;;;3218:165;;;;11783:25:10;;;11771:2;11756:18;3218:165:8;11738:76:10;2588:91:8;2664:7;;-1:-1:-1;;;;;2664:7:8;2588:91;;8319:102;;;:::i;7388:321::-;;;;;;:::i;:::-;;:::i;4937:203::-;;;;;;:::i;:::-;;:::i;8524:452::-;;;;;;:::i;:::-;;:::i;7815:206::-;;;;;;:::i;:::-;;:::i;2743:344::-;2885:4;-1:-1:-1;;;;;;2924:40:8;;-1:-1:-1;;;2924:40:8;;:104;;-1:-1:-1;;;;;;;2980:48:8;;-1:-1:-1;;;2980:48:8;2924:104;:156;;;-1:-1:-1;;;;;;;;;;871:40:5;;;3044:36:8;2905:175;2743:344;-1:-1:-1;;2743:344:8:o;8120:98::-;8174:13;8206:5;8199:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8120:98;:::o;6996:301::-;7112:7;7156:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7156:16:8;7135:113;;;;-1:-1:-1;;;7135:113:8;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;7266:24:8;;;;:15;:24;;;;;;-1:-1:-1;;;;;7266:24:8;;6996:301::o;6452:458::-;6532:13;3657:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3657:16:8;;;;6587:11;;;;;6579:62;;;;-1:-1:-1;;;6579:62:8;;11432:2:10;6579:62:8;;;11414:21:10;11471:2;11451:18;;;11444:30;11510:34;11490:18;;;11483:62;-1:-1:-1;;;11561:18:10;;;11554:36;11607:19;;6579:62:8;11404:228:10;6579:62:8;6673:10;-1:-1:-1;;;;;6673:19:8;;;;:58;;;6696:35;6713:5;6720:10;6696:16;:35::i;:::-;6652:152;;;;-1:-1:-1;;;6652:152:8;;10663:2:10;6652:152:8;;;10645:21:10;10702:2;10682:18;;;10675:30;10741:34;10721:18;;;10714:62;-1:-1:-1;;;10792:18:10;;;10785:45;10847:19;;6652:152:8;10635:237:10;6652:152:8;6815:24;;;;:15;:24;;;;;;;;:29;;-1:-1:-1;;;;;;6815:29:8;-1:-1:-1;;;;;6815:29:8;;;;;;;;;3657:7;:16;;;;;;;6859:44;;6815:24;;3657:16;;;;;6859:44;;;6522:388;6452:458;;:::o;5256:171::-;5385:35;5402:4;5408:2;5412:7;5385:16;:35::i;:::-;5256:171;;;:::o;8982:979::-;2411:7;;;;;;;;;-1:-1:-1;;;;;2411:7:8;-1:-1:-1;;;;;2411:16:8;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2397:32:8;:10;-1:-1:-1;;;;;2397:32:8;;2376:127;;;;-1:-1:-1;;;2376:127:8;;9013:2:10;2376:127:8;;;8995:21:10;9052:2;9032:18;;;9025:30;9091:34;9071:18;;;9064:62;-1:-1:-1;;;9142:18:10;;;9135:46;9198:19;;2376:127:8;8985:238:10;2376:127:8;-1:-1:-1;;;;;9151:16:8;::::1;9130:108;;;;-1:-1:-1::0;;;9130:108:8::1;;;;;;;:::i;:::-;9257:19;::::0;;;:11:::1;:19;::::0;;;;;::::1;;9256:20;9248:66;;;::::0;-1:-1:-1;;;9248:66:8;;7374:2:10;9248:66:8::1;::::0;::::1;7356:21:10::0;7413:2;7393:18;;;7386:30;7452:34;7432:18;;;7425:62;-1:-1:-1;;;7503:18:10;;;7496:31;7544:19;;9248:66:8::1;7346:223:10::0;9248:66:8::1;9325:16;9353:3;:10;9344:6;;:19;;;;:::i;:::-;9325:38;;9374:505;9396:8;9387:6;;:17;9374:505;;;9463:6;::::0;9482:1:::1;9455:15:::0;;;:7:::1;:15;::::0;;;;;-1:-1:-1;;;;;9455:15:8::1;:29:::0;9430:124:::1;;;;-1:-1:-1::0;;;9430:124:8::1;;;;;;;:::i;:::-;9593:46;9624:1;9628:2;9632:6;;9593:22;:46::i;:::-;9568:145;;;;-1:-1:-1::0;;;9568:145:8::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;9728:13:8;::::1;;::::0;;;:9:::1;:13;::::0;;;;:18;;9745:1:::1;::::0;9728:13;:18:::1;::::0;9745:1;;9728:18:::1;:::i;:::-;::::0;;;-1:-1:-1;;9768:6:8::1;::::0;;9760:15:::1;::::0;;;:7:::1;:15;::::0;;;;;;;:20;;-1:-1:-1;;;;;;9760:20:8::1;-1:-1:-1::0;;;;;9760:20:8;::::1;::::0;;::::1;::::0;;;9801:6;;9794:14;;:6:::1;:14:::0;;;;;;:22;;-1:-1:-1;;9794:22:8::1;::::0;::::1;;;::::0;;9861:6;;9836:32;;9760:20;;:15;9836:32:::1;::::0;9760:15;;9836:32:::1;9406:6;:8:::0;;;:6:::1;:8;::::0;::::1;:::i;:::-;;;;;;9374:505;;;9889:19;::::0;;;:11:::1;:19;::::0;;;;;:26;;-1:-1:-1;;9889:26:8::1;9911:4;9889:26;::::0;;9930:24;-1:-1:-1;;;;;9930:24:8;::::1;::::0;9901:6;;9930:24:::1;::::0;9889:19;9930:24:::1;9120:841;8982:979:::0;;;;:::o;3805:999::-;3938:13;3657:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3657:16:8;;3985:67;;;;-1:-1:-1;;;3985:67:8;;11079:2:10;3985:67:8;;;11061:21:10;11118:2;11098:18;;;11091:30;11157:26;11137:18;;;11130:54;11201:18;;3985:67:8;11051:174:10;3985:67:8;4083:10;-1:-1:-1;;;;;4083:19:8;;;;:73;;-1:-1:-1;4146:10:8;4122:20;4134:7;4122:11;:20::i;:::-;-1:-1:-1;;;;;4122:34:8;;4083:73;:128;;;;4176:35;4193:5;4200:10;4176:16;:35::i;:::-;4062:226;;;;-1:-1:-1;;;4062:226:8;;7776:2:10;4062:226:8;;;7758:21:10;7815:2;7795:18;;;7788:30;7854:34;7834:18;;;7827:62;-1:-1:-1;;;7905:18:10;;;7898:49;7964:19;;4062:226:8;7748:241:10;4062:226:8;4328:4;-1:-1:-1;;;;;4319:13:8;:5;-1:-1:-1;;;;;4319:13:8;;4298:110;;;;-1:-1:-1;;;4298:110:8;;10244:2:10;4298:110:8;;;10226:21:10;10283:2;10263:18;;;10256:30;10322:34;10302:18;;;10295:62;-1:-1:-1;;;10373:18:10;;;10366:48;10431:19;;4298:110:8;10216:240:10;4298:110:8;-1:-1:-1;;;;;4439:16:8;;4418:108;;;;-1:-1:-1;;;4418:108:8;;;;;;;:::i;:::-;4557:41;4580:4;4586:2;4590:7;4557:22;:41::i;:::-;4536:128;;;;-1:-1:-1;;;4536:128:8;;;;;;;:::i;:::-;-1:-1:-1;;;;;4675:15:8;;;;;;:9;:15;;;;;:20;;4694:1;;4675:15;:20;;4694:1;;4675:20;:::i;:::-;;;;-1:-1:-1;;;;;;;4705:13:8;;;;;;:9;:13;;;;;:18;;4722:1;;4705:13;:18;;4722:1;;4705:18;:::i;:::-;;;;-1:-1:-1;;4733:16:8;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;4733:21:8;-1:-1:-1;;;;;4733:21:8;;;;;;;;;4770:27;;4733:16;;4770:27;;;;;;;3928:876;3805:999;;;:::o;8319:102::-;8375:13;8407:7;8400:14;;;;;:::i;7388:321::-;-1:-1:-1;;;;;7518:22:8;;7530:10;7518:22;;7510:69;;;;-1:-1:-1;;;7510:69:8;;8196:2:10;7510:69:8;;;8178:21:10;8235:2;8215:18;;;8208:30;8274:34;8254:18;;;8247:62;-1:-1:-1;;;8325:18:10;;;8318:32;8367:19;;7510:69:8;8168:224:10;7510:69:8;7609:10;7590:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;7590:40:8;;;;;;;;;;;;:51;;-1:-1:-1;;7590:51:8;;;;;;;;;;7656:46;;6732:41:10;;;7590:40:8;;7609:10;7656:46;;6705:18:10;7656:46:8;;;;;;;7388:321;;:::o;4937:203::-;5098:35;5115:4;5121:2;5125:7;5098:16;:35::i;:::-;4937:203;;;;:::o;8524:452::-;8715:1;8687:16;;;:7;:16;;;;;;8637:13;;-1:-1:-1;;;;;8687:16:8;8666:113;;;;-1:-1:-1;;;8666:113:8;;;;;;;:::i;:::-;8790:21;8814:8;8790:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8875:1;8857:7;8851:21;:25;:118;;;;;;;;;;;;;;;;;8919:7;8928:18;:7;:16;:18::i;:::-;8902:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8851:118;8832:137;8524:452;-1:-1:-1;;;8524:452:8:o;7815:206::-;-1:-1:-1;;;;;7979:25:8;;;7952:4;7979:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;7815:206::o;5515:861::-;5637:4;-1:-1:-1;;;;;5657:13:8;;1034:20:3;1080:8;5653:717:8;;5708:165;;-1:-1:-1;;;5708:165:8;;5766:10;5708:165;;;6337:34:10;-1:-1:-1;;;;;6407:15:10;;;6387:18;;;6380:43;6439:18;;;6432:34;;;6502:3;6482:18;;;6475:31;-1:-1:-1;6522:19:10;;;6515:30;5708:36:8;;;;;6562:19:10;;5708:165:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5708:165:8;;;;;;;;-1:-1:-1;;5708:165:8;;;;;;;;;;;;:::i;:::-;;;5688:630;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6052:13:8;;6048:256;;6094:50;;-1:-1:-1;;;6094:50:8;;;;;;;:::i;6048:256::-;6256:6;6250:13;6241:6;6237:2;6233:15;6226:38;5688:630;-1:-1:-1;;;;;;5935:51:8;-1:-1:-1;;;5935:51:8;;-1:-1:-1;5928:58:8;;5653:717;-1:-1:-1;6355:4:8;5515:861;;;;;:::o;275:703:4:-;331:13;548:10;544:51;;-1:-1:-1;;574:10:4;;;;;;;;;;;;-1:-1:-1;;;574:10:4;;;;;275:703::o;544:51::-;619:5;604:12;658:75;665:9;;658:75;;690:8;;;;:::i;:::-;;-1:-1:-1;712:10:4;;-1:-1:-1;720:2:4;712:10;;:::i;:::-;;;658:75;;;742:19;774:6;764:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;764:17:4;;742:39;;791:150;798:10;;791:150;;824:11;834:1;824:11;;:::i;:::-;;-1:-1:-1;892:10:4;900:2;892:5;:10;:::i;:::-;879:24;;:2;:24;:::i;:::-;866:39;;849:6;856;849:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;849:56:4;;;;;;;;-1:-1:-1;919:11:4;928:2;919:11;;:::i;:::-;;;791:150;;;964:6;275:703;-1:-1:-1;;;;275:703:4:o;14:160:10:-;79:20;;135:13;;128:21;118:32;;108:2;;164:1;161;154:12;108:2;60:114;;;:::o;179:247::-;238:6;291:2;279:9;270:7;266:23;262:32;259:2;;;307:1;304;297:12;259:2;346:9;333:23;365:31;390:5;365:31;:::i;431:251::-;501:6;554:2;542:9;533:7;529:23;525:32;522:2;;;570:1;567;560:12;522:2;602:9;596:16;621:31;646:5;621:31;:::i;687:388::-;755:6;763;816:2;804:9;795:7;791:23;787:32;784:2;;;832:1;829;822:12;784:2;871:9;858:23;890:31;915:5;890:31;:::i;:::-;940:5;-1:-1:-1;997:2:10;982:18;;969:32;1010:33;969:32;1010:33;:::i;:::-;1062:7;1052:17;;;774:301;;;;;:::o;1080:456::-;1157:6;1165;1173;1226:2;1214:9;1205:7;1201:23;1197:32;1194:2;;;1242:1;1239;1232:12;1194:2;1281:9;1268:23;1300:31;1325:5;1300:31;:::i;:::-;1350:5;-1:-1:-1;1407:2:10;1392:18;;1379:32;1420:33;1379:32;1420:33;:::i;:::-;1184:352;;1472:7;;-1:-1:-1;;;1526:2:10;1511:18;;;;1498:32;;1184:352::o;1541:1108::-;1636:6;1644;1652;1660;1713:3;1701:9;1692:7;1688:23;1684:33;1681:2;;;1730:1;1727;1720:12;1681:2;1769:9;1756:23;1788:31;1813:5;1788:31;:::i;:::-;1838:5;-1:-1:-1;1862:2:10;1901:18;;;1888:32;1929:33;1888:32;1929:33;:::i;:::-;1981:7;-1:-1:-1;2035:2:10;2020:18;;2007:32;;-1:-1:-1;2090:2:10;2075:18;;2062:32;2113:18;2143:14;;;2140:2;;;2170:1;2167;2160:12;2140:2;2208:6;2197:9;2193:22;2183:32;;2253:7;2246:4;2242:2;2238:13;2234:27;2224:2;;2275:1;2272;2265:12;2224:2;2311;2298:16;2333:2;2329;2326:10;2323:2;;;2339:18;;:::i;:::-;2381:53;2424:2;2405:13;;-1:-1:-1;;2401:27:10;2397:36;;2381:53;:::i;:::-;2368:66;;2457:2;2450:5;2443:17;2497:7;2492:2;2487;2483;2479:11;2475:20;2472:33;2469:2;;;2518:1;2515;2508:12;2469:2;2573;2568;2564;2560:11;2555:2;2548:5;2544:14;2531:45;2617:1;2612:2;2607;2600:5;2596:14;2592:23;2585:34;;2638:5;2628:15;;;;;1671:978;;;;;;;:::o;2654:315::-;2719:6;2727;2780:2;2768:9;2759:7;2755:23;2751:32;2748:2;;;2796:1;2793;2786:12;2748:2;2835:9;2822:23;2854:31;2879:5;2854:31;:::i;:::-;2904:5;-1:-1:-1;2928:35:10;2959:2;2944:18;;2928:35;:::i;:::-;2918:45;;2738:231;;;;;:::o;2974:315::-;3042:6;3050;3103:2;3091:9;3082:7;3078:23;3074:32;3071:2;;;3119:1;3116;3109:12;3071:2;3158:9;3145:23;3177:31;3202:5;3177:31;:::i;:::-;3227:5;3279:2;3264:18;;;;3251:32;;-1:-1:-1;;;3061:228:10:o;3294:245::-;3352:6;3405:2;3393:9;3384:7;3380:23;3376:32;3373:2;;;3421:1;3418;3411:12;3373:2;3460:9;3447:23;3479:30;3503:5;3479:30;:::i;3544:249::-;3613:6;3666:2;3654:9;3645:7;3641:23;3637:32;3634:2;;;3682:1;3679;3672:12;3634:2;3714:9;3708:16;3733:30;3757:5;3733:30;:::i;3798:180::-;3857:6;3910:2;3898:9;3889:7;3885:23;3881:32;3878:2;;;3926:1;3923;3916:12;3878:2;-1:-1:-1;3949:23:10;;3868:110;-1:-1:-1;3868:110:10:o;3983:1361::-;4089:6;4097;4105;4113;4166:3;4154:9;4145:7;4141:23;4137:33;4134:2;;;4183:1;4180;4173:12;4134:2;4219:9;4206:23;4196:33;;4248:2;4300;4289:9;4285:18;4272:32;4313:31;4338:5;4313:31;:::i;:::-;4363:5;-1:-1:-1;4419:2:10;4404:18;;4391:32;4442:18;4472:14;;;4469:2;;;4499:1;4496;4489:12;4469:2;4537:6;4526:9;4522:22;4512:32;;4582:7;4575:4;4571:2;4567:13;4563:27;4553:2;;4604:1;4601;4594:12;4553:2;4640;4627:16;4662:2;4658;4655:10;4652:2;;;4668:18;;:::i;:::-;4714:2;4711:1;4707:10;4697:20;;4737:28;4761:2;4757;4753:11;4737:28;:::i;:::-;4799:15;;;4830:12;;;;4862:11;;;4892;;;4888:20;;4885:33;-1:-1:-1;4882:2:10;;;4931:1;4928;4921:12;4882:2;4953:1;4944:10;;4974:1;4963:12;;4984:276;5000:2;4995:3;4992:11;4984:276;;;5077:3;5064:17;5129:4;5120:7;5116:18;5107:7;5104:31;5094:2;;5149:1;5146;5139:12;5094:2;5166:20;;5022:1;5013:11;;;;;5206:12;;;;5238;;4984:276;;;4988:3;5279:5;5269:15;;;;;;;;5303:35;5334:2;5323:9;5319:18;5303:35;:::i;:::-;5293:45;;4124:1220;;;;;;;:::o;5349:470::-;5528:3;5566:6;5560:13;5582:53;5628:6;5623:3;5616:4;5608:6;5604:17;5582:53;:::i;:::-;5698:13;;5657:16;;;;5720:57;5698:13;5657:16;5754:4;5742:17;;5720:57;:::i;:::-;5793:20;;5536:283;-1:-1:-1;;;;5536:283:10:o;6784:383::-;6933:2;6922:9;6915:21;6896:4;6965:6;6959:13;7008:6;7003:2;6992:9;6988:18;6981:34;7024:66;7083:6;7078:2;7067:9;7063:18;7058:2;7050:6;7046:15;7024:66;:::i;:::-;7151:2;7130:15;-1:-1:-1;;7126:29:10;7111:45;;;;7158:2;7107:54;;6905:262;-1:-1:-1;;6905:262:10:o;8397:409::-;8599:2;8581:21;;;8638:2;8618:18;;;8611:30;8677:34;8672:2;8657:18;;8650:62;-1:-1:-1;;;8743:2:10;8728:18;;8721:43;8796:3;8781:19;;8571:235::o;9228:400::-;9430:2;9412:21;;;9469:2;9449:18;;;9442:30;9508:34;9503:2;9488:18;;9481:62;-1:-1:-1;;;9574:2:10;9559:18;;9552:34;9618:3;9603:19;;9402:226::o;9633:404::-;9835:2;9817:21;;;9874:2;9854:18;;;9847:30;9913:34;9908:2;9893:18;;9886:62;-1:-1:-1;;;9979:2:10;9964:18;;9957:38;10027:3;10012:19;;9807:230::o;11819:275::-;11890:2;11884:9;11955:2;11936:13;;-1:-1:-1;;11932:27:10;11920:40;;11990:18;11975:34;;12011:22;;;11972:62;11969:2;;;12037:18;;:::i;:::-;12073:2;12066:22;11864:230;;-1:-1:-1;11864:230:10:o;12099:128::-;12139:3;12170:1;12166:6;12163:1;12160:13;12157:2;;;12176:18;;:::i;:::-;-1:-1:-1;12212:9:10;;12147:80::o;12232:120::-;12272:1;12298;12288:2;;12303:18;;:::i;:::-;-1:-1:-1;12337:9:10;;12278:74::o;12357:125::-;12397:4;12425:1;12422;12419:8;12416:2;;;12430:18;;:::i;:::-;-1:-1:-1;12467:9:10;;12406:76::o;12487:258::-;12559:1;12569:113;12583:6;12580:1;12577:13;12569:113;;;12659:11;;;12653:18;12640:11;;;12633:39;12605:2;12598:10;12569:113;;;12700:6;12697:1;12694:13;12691:2;;;-1:-1:-1;;12735:1:10;12717:16;;12710:27;12540:205::o;12750:380::-;12829:1;12825:12;;;;12872;;;12893:2;;12947:4;12939:6;12935:17;12925:27;;12893:2;13000;12992:6;12989:14;12969:18;12966:38;12963:2;;;13046:10;13041:3;13037:20;13034:1;13027:31;13081:4;13078:1;13071:15;13109:4;13106:1;13099:15;12963:2;;12805:325;;;:::o;13135:135::-;13174:3;-1:-1:-1;;13195:17:10;;13192:2;;;13215:18;;:::i;:::-;-1:-1:-1;13262:1:10;13251:13;;13182:88::o;13275:112::-;13307:1;13333;13323:2;;13338:18;;:::i;:::-;-1:-1:-1;13372:9:10;;13313:74::o;13392:127::-;13453:10;13448:3;13444:20;13441:1;13434:31;13484:4;13481:1;13474:15;13508:4;13505:1;13498:15;13524:127;13585:10;13580:3;13576:20;13573:1;13566:31;13616:4;13613:1;13606:15;13640:4;13637:1;13630:15;13656:127;13717:10;13712:3;13708:20;13705:1;13698:31;13748:4;13745:1;13738:15;13772:4;13769:1;13762:15;13788:127;13849:10;13844:3;13840:20;13837:1;13830:31;13880:4;13877:1;13870:15;13904:4;13901:1;13894:15;13920:131;-1:-1:-1;;;;;13995:31:10;;13985:42;;13975:2;;14041:1;14038;14031:12;13975:2;13965:86;:::o;14056:131::-;-1:-1:-1;;;;;;14130:32:10;;14120:43;;14110:2;;14177:1;14174;14167:12",
  "language": "Solidity",
  "natspec": {
    "details": "This contract is a light implementation of ERC721 to save on gas and bloat",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves an operator to handle the ERC721"
      },
      "balanceOf(address)": {
        "details": "Check the balance of the provided address",
        "notice": "Does not throw for zero address queries"
      },
      "constructor": {
        "details": "Initializes the contract by setting a `name` and a `symbol` to the token collection"
      },
      "getApproved(uint256)": {
        "details": "Checks which address is approved for given token ID"
      },
      "getOracle()": {
        "details": "Gets the oracle operator address"
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the operator is allowed to manage all of the assets of owner"
      },
      "isShiny(uint256)": {
        "details": "Returns the shinyness of an object"
      },
      "name()": {
        "details": "Returns the name of the token",
        "notice": "Required for ERC721"
      },
      "ownerOf(uint256)": {
        "details": "Get the owner of a specific token",
        "notice": "Does not throw for zero address queries"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers a token and checks that the receiver accepts ERC721 tokens"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Defaults to the safe transfer method and discards data",
        "notice": "Required for ERC721 standard"
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove operator as an operator for the caller"
      },
      "supportsInterface(bytes4)": {
        "details": "Defines the ERC165 interfaces"
      },
      "symbol()": {
        "details": "Returns the symbol of the token",
        "notice": "Required for ERC721"
      },
      "tokenURI(uint256)": {
        "details": "Returns the base URI of the token",
        "notice": "Required for ERC721"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Defaults to the safe transfer method",
        "notice": "Required for ERC721 interface"
      }
    },
    "notice": "Much of this code is taken from the OpenZeppelin ERC721 implementation         https://docs.openzeppelin.com/contracts/4.x/api/token/erc721",
    "title": "Loot NFT",
    "version": 1
  },
  "offset": [
    783,
    10132
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x833B1FCE EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x22FA1D85 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x22FA1D85 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x389EBD4D EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x12AC JUMP JUMPDEST PUSH2 0x155 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0x1111 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x118 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x1C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x871 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x155 JUMP JUMPDEST PUSH2 0x135 PUSH2 0xAF7 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x265 CALLDATASIZE PUSH1 0x4 PUSH2 0x10DC JUMP JUMPDEST PUSH2 0xB06 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x1018 JUMP JUMPDEST PUSH2 0xBD6 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0xBE7 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0xF9E JUMP JUMPDEST PUSH2 0xCFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2D4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x2EF JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x304 SWAP1 PUSH2 0x1458 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x330 SWAP1 PUSH2 0x1458 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x37D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x352 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x37D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x360 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ ISZERO PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865206F776E657220646F6573206E6F74206E65656420746F206265206170 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C1C9BDD9959 PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x477 JUMPI POP PUSH2 0x477 DUP2 CALLER PUSH2 0xCFD JUMP JUMPDEST PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657273206F72206F70657261746F7273206D61792063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x36103A3434B990333AB731BA34B7B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x5 SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD SWAP2 MLOAD DUP7 SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x54E DUP4 DUP4 DUP4 PUSH2 0x871 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x570CA735 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D9 SWAP2 SWAP1 PUSH2 0xF81 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920746865206F7261636C65206F70657261746F72206D617920706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x3337B936903A3434B99030B1BA34B7B7 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x12DF JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652043727970746F50756E6B2077617320616C7265616479206D696E7465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x4 SLOAD PUSH2 0x6F2 SWAP2 SWAP1 PUSH2 0x13E9 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH1 0x4 SLOAD LT ISZERO PUSH2 0x81E JUMPI PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x737 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x745 PUSH1 0x0 DUP6 PUSH1 0x4 SLOAD PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x761 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x78A SWAP1 DUP5 SWAP1 PUSH2 0x13E9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 SLOAD DUP5 MSTORE PUSH1 0x6 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP8 ISZERO ISZERO OR SWAP1 SSTORE SWAP3 SLOAD SWAP3 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 PUSH1 0x4 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x814 DUP4 PUSH2 0x1493 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 DUP8 SWAP2 PUSH32 0x346DED8055A0968941609C2FF8335D290F586F0F20658FAC695B54946923A1F8 SWAP2 SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520746F6B656E20646F6573206E6F742065786973740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3BB JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x8FD JUMPI POP CALLER PUSH2 0x8F2 DUP4 PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x90D JUMPI POP PUSH2 0x90D DUP2 CALLER PUSH2 0xCFD JUMP JUMPDEST PUSH2 0x975 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865206F70657261746F72206973206E6F7420617070726F76656420746F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x3A3930B739B332B9103A3434B9903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652073656E64657220646F6573206E6F74206F776E2074686520746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x1B881D1BC81899481D1C985B9CD9995C9959 PUSH1 0x72 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x12DF JUMP JUMPDEST PUSH2 0xA22 DUP5 DUP5 DUP5 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0xA3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x1370 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xA67 SWAP1 DUP5 SWAP1 PUSH2 0x1415 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xA95 SWAP1 DUP5 SWAP1 PUSH2 0x13E9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP9 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x304 SWAP1 PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0xB6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652073656E646572206D6179206E6F7420626520746865206F7065726174 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x37B9 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BB JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xBE1 DUP5 DUP5 DUP5 PUSH2 0x871 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 SLOAD PUSH2 0xC2D SWAP1 PUSH2 0x1458 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC59 SWAP1 PUSH2 0x1458 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCA6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC7B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCA6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC89 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xCCB JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xCF6 JUMP JUMPDEST DUP1 PUSH2 0xCD5 DUP5 PUSH2 0xE49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCE6 SWAP3 SWAP2 SWAP1 PUSH2 0x127D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0xE3F JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xDCB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDC8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x115A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE25 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0xE1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BB SWAP1 PUSH2 0x1370 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xCF6 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xE6D JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xE97 JUMPI DUP1 PUSH2 0xE81 DUP2 PUSH2 0x1493 JUMP JUMPDEST SWAP2 POP PUSH2 0xE90 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1401 JUMP JUMPDEST SWAP2 POP PUSH2 0xE71 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEB2 JUMPI PUSH2 0xEB2 PUSH2 0x1504 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEDC JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xF47 JUMPI PUSH2 0xEF1 PUSH1 0x1 DUP4 PUSH2 0x1415 JUMP JUMPDEST SWAP2 POP PUSH2 0xEFE PUSH1 0xA DUP7 PUSH2 0x14AE JUMP JUMPDEST PUSH2 0xF09 SWAP1 PUSH1 0x30 PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF1E JUMPI PUSH2 0xF1E PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xF40 PUSH1 0xA DUP7 PUSH2 0x1401 JUMP JUMPDEST SWAP5 POP PUSH2 0xEE0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCF6 DUP2 PUSH2 0x151A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xCF6 DUP2 PUSH2 0x151A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xFBC DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFCC DUP2 PUSH2 0x151A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xFF7 DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1007 DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x102E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1039 DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH2 0x104A DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x106E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1094 JUMPI PUSH2 0x1094 PUSH2 0x1504 JUMP JUMPDEST PUSH2 0x10A6 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP6 ADD PUSH2 0x13B8 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP10 DUP5 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x10BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 ADD DUP6 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP5 DUP3 DUP5 ADD ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x10FA DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP2 POP PUSH2 0x1108 PUSH1 0x20 DUP5 ADD PUSH2 0xF4F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x112F DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCF6 DUP2 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x116C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xCF6 DUP2 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD PUSH2 0x11B9 DUP2 PUSH2 0x151A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x11FC JUMPI PUSH2 0x11FC PUSH2 0x1504 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x120D DUP5 DUP4 ADD PUSH2 0x13B8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP14 LT ISZERO PUSH2 0x1228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP DUP6 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x125C JUMPI DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1248 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1230 JUMP JUMPDEST POP DUP1 SWAP8 POP POP POP POP POP POP POP PUSH2 0x1272 PUSH1 0x60 DUP7 ADD PUSH2 0xF4F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x128F DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x142C JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x12A3 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x142C JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x12CB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x142C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x54686520746F6B656E206D6179206E6F742062652073656E7420746F20746865 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x207A65726F2061646472657373 PUSH1 0x98 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x5468652070726F766964656420746F6B656E20494420646F6573206E6F742065 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1E1A5CDD PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x5468652072656365697665722063616E6E6F7420616363657074204552433732 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x3120746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13E1 JUMPI PUSH2 0x13E1 PUSH2 0x1504 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x13FC JUMPI PUSH2 0x13FC PUSH2 0x14C2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1410 JUMPI PUSH2 0x1410 PUSH2 0x14D8 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1427 JUMPI PUSH2 0x1427 PUSH2 0x14C2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1447 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x142F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xBE1 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x146C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x148D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x14A7 JUMPI PUSH2 0x14A7 PUSH2 0x14C2 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14BD JUMPI PUSH2 0x14BD PUSH2 0x14D8 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x152F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x152F JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA SWAP8 0xA6 EXTCODEHASH 0xD5 CALL STATICCALL 0xD5 DUP9 0xB2 0x27 MSTORE8 0xC7 0xD 0xE5 0xD8 SWAP15 0xC3 SELFBALANCE ADD PUSH23 0xC9C6C6DA1A7E85FE645C64736F6C6343000806003300 ",
  "pcMap": {
    "0": {
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "CALLVALUE",
      "path": "8"
    },
    "6": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "7": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "8": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "12": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "REVERT",
      "path": "8"
    },
    "16": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "17": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "POP",
      "path": "8"
    },
    "18": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "21": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "LT",
      "path": "8"
    },
    "22": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x100"
    },
    "25": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "26": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "CALLDATALOAD",
      "path": "8"
    },
    "29": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "SHR",
      "path": "8"
    },
    "32": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "33": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x6352211E"
    },
    "38": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "GT",
      "path": "8"
    },
    "39": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x97"
    },
    "42": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "43": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "44": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA22CB465"
    },
    "49": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "GT",
      "path": "8"
    },
    "50": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "54": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "55": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA22CB465"
    },
    "60": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "61": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x257"
    },
    "64": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "65": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "66": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xB88D4FDE"
    },
    "71": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "72": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x26A"
    },
    "75": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "76": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "77": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xC87B56DD"
    },
    "82": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "83": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x27D"
    },
    "86": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "87": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "88": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xE985E9C5"
    },
    "93": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "94": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x290"
    },
    "97": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "98": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "101": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "REVERT",
      "path": "8"
    },
    "102": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "103": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "104": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x6352211E"
    },
    "109": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "110": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1DE"
    },
    "113": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "114": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "115": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x70A08231"
    },
    "120": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "121": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x207"
    },
    "124": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "125": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "126": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x833B1FCE"
    },
    "131": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "132": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x23E"
    },
    "135": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "136": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "137": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x95D89B41"
    },
    "142": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "143": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x24F"
    },
    "146": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "147": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "149": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "150": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "REVERT",
      "path": "8"
    },
    "151": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "152": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "153": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x22FA1D85"
    },
    "158": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "GT",
      "path": "8"
    },
    "159": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xD3"
    },
    "162": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "163": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "164": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x22FA1D85"
    },
    "169": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "170": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x182"
    },
    "173": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "174": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "175": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x23B872DD"
    },
    "180": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "181": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1A5"
    },
    "184": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "185": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "186": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x389EBD4D"
    },
    "191": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "192": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B8"
    },
    "195": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "196": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "197": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x42842E0E"
    },
    "202": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "203": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1CB"
    },
    "206": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "207": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "209": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "210": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "REVERT",
      "path": "8"
    },
    "211": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "212": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "213": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x1FFC9A7"
    },
    "218": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "219": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x105"
    },
    "222": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "223": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "224": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x6FDDE03"
    },
    "229": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "230": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x12D"
    },
    "233": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "234": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "235": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x81812FC"
    },
    "240": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "241": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x142"
    },
    "244": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "245": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "246": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x95EA7B3"
    },
    "251": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "EQ",
      "path": "8"
    },
    "252": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x16D"
    },
    "255": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "256": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "257": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "259": {
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "DUP1",
      "path": "8"
    },
    "260": {
      "first_revert": true,
      "fn": null,
      "offset": [
        783,
        10132
      ],
      "op": "REVERT",
      "path": "8"
    },
    "261": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "262": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x118"
    },
    "265": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x113"
    },
    "268": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "269": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "271": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x113D"
    },
    "274": {
      "fn": "Loot.supportsInterface",
      "jump": "i",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMP",
      "path": "8"
    },
    "275": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "276": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2A3"
    },
    "279": {
      "fn": "Loot.supportsInterface",
      "jump": "i",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMP",
      "path": "8"
    },
    "280": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "281": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "283": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "284": {
      "op": "SWAP1"
    },
    "285": {
      "op": "ISZERO"
    },
    "286": {
      "op": "ISZERO"
    },
    "287": {
      "op": "DUP2"
    },
    "288": {
      "op": "MSTORE"
    },
    "289": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "291": {
      "op": "ADD"
    },
    "292": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "293": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "295": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "296": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "DUP1",
      "path": "8"
    },
    "297": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "298": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "SUB",
      "path": "8"
    },
    "299": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "300": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "RETURN",
      "path": "8"
    },
    "301": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "302": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x135"
    },
    "305": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2F5"
    },
    "308": {
      "fn": "Loot.name",
      "jump": "i",
      "offset": [
        8120,
        8218
      ],
      "op": "JUMP",
      "path": "8"
    },
    "309": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "310": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "312": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "313": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x124"
    },
    "316": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "317": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "318": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x12AC"
    },
    "321": {
      "fn": "Loot.name",
      "jump": "i",
      "offset": [
        8120,
        8218
      ],
      "op": "JUMP",
      "path": "8"
    },
    "322": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "323": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x155"
    },
    "326": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x150"
    },
    "329": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "330": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "332": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1177"
    },
    "335": {
      "fn": "Loot.getApproved",
      "jump": "i",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMP",
      "path": "8"
    },
    "336": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "337": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x387"
    },
    "340": {
      "fn": "Loot.getApproved",
      "jump": "i",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMP",
      "path": "8"
    },
    "341": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "342": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "344": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "345": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "347": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "349": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "351": {
      "op": "SHL"
    },
    "352": {
      "op": "SUB"
    },
    "353": {
      "op": "SWAP1"
    },
    "354": {
      "op": "SWAP2"
    },
    "355": {
      "op": "AND"
    },
    "356": {
      "op": "DUP2"
    },
    "357": {
      "op": "MSTORE"
    },
    "358": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "360": {
      "op": "ADD"
    },
    "361": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x124"
    },
    "364": {
      "op": "JUMP"
    },
    "365": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "366": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x180"
    },
    "369": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x17B"
    },
    "372": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "373": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "375": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1111"
    },
    "378": {
      "fn": "Loot.approve",
      "jump": "i",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMP",
      "path": "8"
    },
    "379": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "380": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3E0"
    },
    "383": {
      "fn": "Loot.approve",
      "jump": "i",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMP",
      "path": "8"
    },
    "384": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "385": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "STOP",
      "path": "8"
    },
    "386": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "387": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x118"
    },
    "390": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x190"
    },
    "393": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "394": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "396": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1177"
    },
    "399": {
      "fn": "Loot.isShiny",
      "jump": "i",
      "offset": [
        10030,
        10130
      ],
      "op": "JUMP",
      "path": "8"
    },
    "400": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "401": {
      "fn": "Loot.isShiny",
      "offset": [
        10085,
        10089
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "403": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "SWAP1",
      "path": "8",
      "statement": 0
    },
    "404": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "DUP2",
      "path": "8"
    },
    "405": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "406": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10114
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x6"
    },
    "408": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "410": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "411": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "413": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "414": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "415": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "416": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xFF"
    },
    "418": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "AND",
      "path": "8"
    },
    "419": {
      "fn": "Loot.isShiny",
      "offset": [
        10108,
        10123
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "420": {
      "fn": "Loot.isShiny",
      "offset": [
        10030,
        10130
      ],
      "op": "JUMP",
      "path": "8"
    },
    "421": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "422": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x180"
    },
    "425": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B3"
    },
    "428": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "429": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "431": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xFD7"
    },
    "434": {
      "fn": "Loot.transferFrom",
      "jump": "i",
      "offset": [
        5256,
        5427
      ],
      "op": "JUMP",
      "path": "8"
    },
    "435": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "436": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x543"
    },
    "439": {
      "fn": "Loot.transferFrom",
      "jump": "i",
      "offset": [
        5256,
        5427
      ],
      "op": "JUMP",
      "path": "8"
    },
    "440": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "441": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x180"
    },
    "444": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1C6"
    },
    "447": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "448": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "450": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1190"
    },
    "453": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        8982,
        9961
      ],
      "op": "JUMP",
      "path": "8"
    },
    "454": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "455": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x553"
    },
    "458": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        8982,
        9961
      ],
      "op": "JUMP",
      "path": "8"
    },
    "459": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "460": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x180"
    },
    "463": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1D9"
    },
    "466": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "467": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "469": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xFD7"
    },
    "472": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        3805,
        4804
      ],
      "op": "JUMP",
      "path": "8"
    },
    "473": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "474": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x871"
    },
    "477": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        3805,
        4804
      ],
      "op": "JUMP",
      "path": "8"
    },
    "478": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "479": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x155"
    },
    "482": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1EC"
    },
    "485": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "486": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "488": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1177"
    },
    "491": {
      "fn": "Loot.ownerOf",
      "jump": "i",
      "offset": [
        3506,
        3702
      ],
      "op": "JUMP",
      "path": "8"
    },
    "492": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "493": {
      "fn": "Loot.ownerOf",
      "offset": [
        3618,
        3625
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "495": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "496": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "497": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "498": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3664
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "500": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "502": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "503": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "505": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "506": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "507": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "508": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "512": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "514": {
      "op": "SHL"
    },
    "515": {
      "op": "SUB"
    },
    "516": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "AND",
      "path": "8"
    },
    "517": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "518": {
      "fn": "Loot.ownerOf",
      "offset": [
        3506,
        3702
      ],
      "op": "JUMP",
      "path": "8"
    },
    "519": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "520": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x230"
    },
    "523": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x215"
    },
    "526": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "527": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "529": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xF64"
    },
    "532": {
      "fn": "Loot.balanceOf",
      "jump": "i",
      "offset": [
        3218,
        3383
      ],
      "op": "JUMP",
      "path": "8"
    },
    "533": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "534": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "536": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "538": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "540": {
      "op": "SHL"
    },
    "541": {
      "op": "SUB"
    },
    "542": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "AND",
      "path": "8",
      "statement": 1
    },
    "543": {
      "fn": "Loot.balanceOf",
      "offset": [
        3330,
        3337
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "545": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "546": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "DUP2",
      "path": "8"
    },
    "547": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "548": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3369
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x7"
    },
    "550": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "552": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "553": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "555": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "556": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "557": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "558": {
      "fn": "Loot.balanceOf",
      "offset": [
        3360,
        3376
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "559": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "JUMP",
      "path": "8"
    },
    "560": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "561": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "563": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "564": {
      "op": "SWAP1"
    },
    "565": {
      "op": "DUP2"
    },
    "566": {
      "op": "MSTORE"
    },
    "567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "569": {
      "op": "ADD"
    },
    "570": {
      "fn": "Loot.balanceOf",
      "offset": [
        3218,
        3383
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x124"
    },
    "573": {
      "op": "JUMP"
    },
    "574": {
      "fn": "Loot.getOracle",
      "offset": [
        2588,
        2679
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "575": {
      "fn": "Loot.getOracle",
      "offset": [
        2664,
        2671
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 2,
      "value": "0x3"
    },
    "577": {
      "fn": "Loot.getOracle",
      "offset": [
        2664,
        2671
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "578": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "582": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "584": {
      "op": "SHL"
    },
    "585": {
      "op": "SUB"
    },
    "586": {
      "fn": "Loot.getOracle",
      "offset": [
        2664,
        2671
      ],
      "op": "AND",
      "path": "8"
    },
    "587": {
      "fn": "Loot.getOracle",
      "offset": [
        2588,
        2679
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x155"
    },
    "590": {
      "fn": "Loot.getOracle",
      "offset": [
        2588,
        2679
      ],
      "op": "JUMP",
      "path": "8"
    },
    "591": {
      "fn": "Loot.symbol",
      "offset": [
        8319,
        8421
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "592": {
      "fn": "Loot.symbol",
      "offset": [
        8319,
        8421
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x135"
    },
    "595": {
      "fn": "Loot.symbol",
      "offset": [
        8319,
        8421
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xAF7"
    },
    "598": {
      "fn": "Loot.symbol",
      "jump": "i",
      "offset": [
        8319,
        8421
      ],
      "op": "JUMP",
      "path": "8"
    },
    "599": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "600": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x180"
    },
    "603": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x265"
    },
    "606": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "607": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "609": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10DC"
    },
    "612": {
      "fn": "Loot.setApprovalForAll",
      "jump": "i",
      "offset": [
        7388,
        7709
      ],
      "op": "JUMP",
      "path": "8"
    },
    "613": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "614": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xB06"
    },
    "617": {
      "fn": "Loot.setApprovalForAll",
      "jump": "i",
      "offset": [
        7388,
        7709
      ],
      "op": "JUMP",
      "path": "8"
    },
    "618": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "619": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x180"
    },
    "622": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x278"
    },
    "625": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "626": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "628": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1018"
    },
    "631": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4937,
        5140
      ],
      "op": "JUMP",
      "path": "8"
    },
    "632": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "633": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xBD6"
    },
    "636": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4937,
        5140
      ],
      "op": "JUMP",
      "path": "8"
    },
    "637": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "638": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x135"
    },
    "641": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x28B"
    },
    "644": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "645": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "647": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1177"
    },
    "650": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8524,
        8976
      ],
      "op": "JUMP",
      "path": "8"
    },
    "651": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "652": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xBE7"
    },
    "655": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8524,
        8976
      ],
      "op": "JUMP",
      "path": "8"
    },
    "656": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "657": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x118"
    },
    "660": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x29E"
    },
    "663": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "664": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "666": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xF9E"
    },
    "669": {
      "fn": "Loot.isApprovedForAll",
      "jump": "i",
      "offset": [
        7815,
        8021
      ],
      "op": "JUMP",
      "path": "8"
    },
    "670": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "671": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCFD"
    },
    "674": {
      "fn": "Loot.isApprovedForAll",
      "jump": "i",
      "offset": [
        7815,
        8021
      ],
      "op": "JUMP",
      "path": "8"
    },
    "675": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "676": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2885,
        2889
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "678": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "682": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "684": {
      "op": "SHL"
    },
    "685": {
      "op": "SUB"
    },
    "686": {
      "op": "NOT"
    },
    "687": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        2964
      ],
      "op": "DUP3",
      "path": "8",
      "statement": 3
    },
    "688": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        2964
      ],
      "op": "AND",
      "path": "8"
    },
    "689": {
      "op": "PUSH4",
      "value": "0x80AC58CD"
    },
    "694": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "696": {
      "op": "SHL"
    },
    "697": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        2964
      ],
      "op": "EQ",
      "path": "8"
    },
    "698": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        2964
      ],
      "op": "DUP1",
      "path": "8"
    },
    "699": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        3028
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2D4"
    },
    "702": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        3028
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "703": {
      "op": "POP"
    },
    "704": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "706": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "708": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "710": {
      "op": "SHL"
    },
    "711": {
      "op": "SUB"
    },
    "712": {
      "op": "NOT"
    },
    "713": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2980,
        3028
      ],
      "op": "DUP3",
      "path": "8"
    },
    "714": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2980,
        3028
      ],
      "op": "AND",
      "path": "8"
    },
    "715": {
      "op": "PUSH4",
      "value": "0x5B5E139F"
    },
    "720": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "722": {
      "op": "SHL"
    },
    "723": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2980,
        3028
      ],
      "op": "EQ",
      "path": "8"
    },
    "724": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        3028
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "725": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        3080
      ],
      "op": "DUP1",
      "path": "8"
    },
    "726": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        3080
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2EF"
    },
    "729": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2924,
        3080
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "730": {
      "op": "POP"
    },
    "731": {
      "op": "PUSH4",
      "value": "0x1FFC9A7"
    },
    "736": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "738": {
      "op": "SHL"
    },
    "739": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "741": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "743": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "745": {
      "op": "SHL"
    },
    "746": {
      "op": "SUB"
    },
    "747": {
      "op": "NOT"
    },
    "748": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        871,
        911
      ],
      "op": "DUP4",
      "path": "5",
      "statement": 4
    },
    "749": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        871,
        911
      ],
      "op": "AND",
      "path": "5"
    },
    "750": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        871,
        911
      ],
      "op": "EQ",
      "path": "5"
    },
    "751": {
      "fn": "Loot.supportsInterface",
      "offset": [
        3044,
        3080
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "752": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2905,
        3080
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "753": {
      "fn": "Loot.supportsInterface",
      "offset": [
        2743,
        3087
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "754": {
      "op": "POP"
    },
    "755": {
      "op": "POP"
    },
    "756": {
      "fn": "Loot.supportsInterface",
      "jump": "o",
      "offset": [
        2743,
        3087
      ],
      "op": "JUMP",
      "path": "8"
    },
    "757": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "758": {
      "fn": "Loot.name",
      "offset": [
        8174,
        8187
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x60"
    },
    "760": {
      "fn": "Loot.name",
      "offset": [
        8206,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 5,
      "value": "0x0"
    },
    "762": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "763": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "764": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x304"
    },
    "767": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "768": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1458"
    },
    "771": {
      "fn": "Loot.name",
      "jump": "i",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMP",
      "path": "8"
    },
    "772": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "773": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "774": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "776": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "777": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "779": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "780": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "781": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DIV",
      "path": "8"
    },
    "782": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MUL",
      "path": "8"
    },
    "783": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "785": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "786": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "788": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "789": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "790": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP2",
      "path": "8"
    },
    "791": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "792": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "794": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "795": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "796": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "797": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "798": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "799": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP2",
      "path": "8"
    },
    "800": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP2",
      "path": "8"
    },
    "801": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "802": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "804": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "805": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP3",
      "path": "8"
    },
    "806": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "807": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "808": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x330"
    },
    "811": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "812": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1458"
    },
    "815": {
      "fn": "Loot.name",
      "jump": "i",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMP",
      "path": "8"
    },
    "816": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "817": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "818": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "819": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x37D"
    },
    "822": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "823": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "824": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "826": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "LT",
      "path": "8"
    },
    "827": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x352"
    },
    "830": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "831": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x100"
    },
    "834": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "835": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP4",
      "path": "8"
    },
    "836": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "837": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DIV",
      "path": "8"
    },
    "838": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MUL",
      "path": "8"
    },
    "839": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP4",
      "path": "8"
    },
    "840": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "841": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "842": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "844": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "845": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "846": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x37D"
    },
    "849": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMP",
      "path": "8"
    },
    "850": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "851": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP3",
      "path": "8"
    },
    "852": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "853": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "854": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "855": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "857": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "858": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "860": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "862": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "863": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "864": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "865": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP2",
      "path": "8"
    },
    "866": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "867": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP2",
      "path": "8"
    },
    "868": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "869": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "870": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "872": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "873": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "874": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "876": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "877": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "878": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP4",
      "path": "8"
    },
    "879": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "GT",
      "path": "8"
    },
    "880": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x360"
    },
    "883": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "884": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP3",
      "path": "8"
    },
    "885": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "886": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SUB",
      "path": "8"
    },
    "887": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "889": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "AND",
      "path": "8"
    },
    "890": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "DUP3",
      "path": "8"
    },
    "891": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "ADD",
      "path": "8"
    },
    "892": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "893": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "894": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "POP",
      "path": "8"
    },
    "895": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "POP",
      "path": "8"
    },
    "896": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "POP",
      "path": "8"
    },
    "897": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "POP",
      "path": "8"
    },
    "898": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "POP",
      "path": "8"
    },
    "899": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "900": {
      "fn": "Loot.name",
      "offset": [
        8199,
        8211
      ],
      "op": "POP",
      "path": "8"
    },
    "901": {
      "fn": "Loot.name",
      "offset": [
        8120,
        8218
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "902": {
      "fn": "Loot.name",
      "jump": "o",
      "offset": [
        8120,
        8218
      ],
      "op": "JUMP",
      "path": "8"
    },
    "903": {
      "fn": "Loot.getApproved",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "904": {
      "fn": "Loot.getApproved",
      "offset": [
        7112,
        7119
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "906": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "DUP2",
      "path": "8",
      "statement": 6
    },
    "907": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "DUP2",
      "path": "8"
    },
    "908": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "909": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7163
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "911": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "913": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "914": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "916": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "DUP2",
      "path": "8"
    },
    "917": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "918": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "919": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "921": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "923": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "925": {
      "op": "SHL"
    },
    "926": {
      "op": "SUB"
    },
    "927": {
      "fn": "Loot.getApproved",
      "offset": [
        7156,
        7172
      ],
      "op": "AND",
      "path": "8"
    },
    "928": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3C4"
    },
    "931": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "932": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "934": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "935": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "939": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "941": {
      "op": "SHL"
    },
    "942": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "DUP2",
      "path": "8"
    },
    "943": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "944": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "946": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "ADD",
      "path": "8"
    },
    "947": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "950": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "951": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x132C"
    },
    "954": {
      "fn": "Loot.getApproved",
      "jump": "i",
      "offset": [
        7135,
        7248
      ],
      "op": "JUMP",
      "path": "8"
    },
    "955": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "956": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "958": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "959": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "DUP1",
      "path": "8"
    },
    "960": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "961": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "SUB",
      "path": "8"
    },
    "962": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "963": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "8"
    },
    "964": {
      "fn": "Loot.getApproved",
      "offset": [
        7135,
        7248
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "965": {
      "op": "POP"
    },
    "966": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 7,
      "value": "0x0"
    },
    "968": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "969": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "DUP2",
      "path": "8"
    },
    "970": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "971": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7281
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x8"
    },
    "973": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "975": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "976": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "978": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "979": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "980": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "983": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "985": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "987": {
      "op": "SHL"
    },
    "988": {
      "op": "SUB"
    },
    "989": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "AND",
      "path": "8"
    },
    "990": {
      "fn": "Loot.getApproved",
      "offset": [
        7266,
        7290
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "991": {
      "fn": "Loot.getApproved",
      "jump": "o",
      "offset": [
        6996,
        7297
      ],
      "op": "JUMP",
      "path": "8"
    },
    "992": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "993": {
      "fn": "Loot.approve",
      "offset": [
        6532,
        6545
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "995": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "996": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "997": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "998": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3664
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "1000": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1002": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1003": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1005": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1006": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1007": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1008": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1010": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1012": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1014": {
      "op": "SHL"
    },
    "1015": {
      "op": "SUB"
    },
    "1016": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1017": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1018": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "AND",
      "path": "8"
    },
    "1019": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1020": {
      "fn": "Loot.approve",
      "offset": [
        6587,
        6598
      ],
      "op": "DUP4",
      "path": "8",
      "statement": 8
    },
    "1021": {
      "fn": "Loot.approve",
      "offset": [
        6587,
        6598
      ],
      "op": "AND",
      "path": "8"
    },
    "1022": {
      "fn": "Loot.approve",
      "offset": [
        6587,
        6598
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1023": {
      "fn": "Loot.approve",
      "offset": [
        6587,
        6598
      ],
      "op": "EQ",
      "path": "8"
    },
    "1024": {
      "branch": 52,
      "fn": "Loot.approve",
      "offset": [
        6587,
        6598
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1025": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x45B"
    },
    "1028": {
      "branch": 52,
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1029": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1031": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1032": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1036": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1038": {
      "op": "SHL"
    },
    "1039": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1040": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1041": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1043": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1045": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1046": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "ADD",
      "path": "8"
    },
    "1047": {
      "op": "MSTORE"
    },
    "1048": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1050": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1052": {
      "op": "DUP3"
    },
    "1053": {
      "op": "ADD"
    },
    "1054": {
      "op": "MSTORE"
    },
    "1055": {
      "op": "PUSH32",
      "value": "0x546865206F776E657220646F6573206E6F74206E65656420746F206265206170"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1090": {
      "op": "DUP3"
    },
    "1091": {
      "op": "ADD"
    },
    "1092": {
      "op": "MSTORE"
    },
    "1093": {
      "op": "PUSH6",
      "value": "0x1C1C9BDD9959"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "1102": {
      "op": "SHL"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1105": {
      "op": "DUP3"
    },
    "1106": {
      "op": "ADD"
    },
    "1107": {
      "op": "MSTORE"
    },
    "1108": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1110": {
      "op": "ADD"
    },
    "1111": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1114": {
      "op": "JUMP"
    },
    "1115": {
      "fn": "Loot.approve",
      "offset": [
        6579,
        6641
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1116": {
      "fn": "Loot.approve",
      "offset": [
        6673,
        6683
      ],
      "op": "CALLER",
      "path": "8",
      "statement": 9
    },
    "1117": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1119": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1121": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1123": {
      "op": "SHL"
    },
    "1124": {
      "op": "SUB"
    },
    "1125": {
      "fn": "Loot.approve",
      "offset": [
        6673,
        6692
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1126": {
      "fn": "Loot.approve",
      "offset": [
        6673,
        6692
      ],
      "op": "AND",
      "path": "8"
    },
    "1127": {
      "fn": "Loot.approve",
      "offset": [
        6673,
        6692
      ],
      "op": "EQ",
      "path": "8"
    },
    "1128": {
      "branch": 53,
      "fn": "Loot.approve",
      "offset": [
        6673,
        6692
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1129": {
      "fn": "Loot.approve",
      "offset": [
        6673,
        6731
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x477"
    },
    "1132": {
      "branch": 53,
      "fn": "Loot.approve",
      "offset": [
        6673,
        6731
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1133": {
      "fn": "Loot.approve",
      "offset": [
        6673,
        6731
      ],
      "op": "POP",
      "path": "8"
    },
    "1134": {
      "fn": "Loot.approve",
      "offset": [
        6696,
        6731
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x477"
    },
    "1137": {
      "fn": "Loot.approve",
      "offset": [
        6713,
        6718
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1138": {
      "fn": "Loot.approve",
      "offset": [
        6720,
        6730
      ],
      "op": "CALLER",
      "path": "8"
    },
    "1139": {
      "fn": "Loot.approve",
      "offset": [
        6696,
        6712
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCFD"
    },
    "1142": {
      "fn": "Loot.approve",
      "jump": "i",
      "offset": [
        6696,
        6731
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1143": {
      "branch": 54,
      "fn": "Loot.approve",
      "offset": [
        6696,
        6731
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1144": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x4DB"
    },
    "1147": {
      "branch": 54,
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1148": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1150": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1151": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1155": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1157": {
      "op": "SHL"
    },
    "1158": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1159": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1160": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1162": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1164": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1165": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "ADD",
      "path": "8"
    },
    "1166": {
      "op": "MSTORE"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "1169": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1171": {
      "op": "DUP3"
    },
    "1172": {
      "op": "ADD"
    },
    "1173": {
      "op": "MSTORE"
    },
    "1174": {
      "op": "PUSH32",
      "value": "0x4F6E6C79206F776E657273206F72206F70657261746F7273206D61792063616C"
    },
    "1207": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1209": {
      "op": "DUP3"
    },
    "1210": {
      "op": "ADD"
    },
    "1211": {
      "op": "MSTORE"
    },
    "1212": {
      "op": "PUSH15",
      "value": "0x36103A3434B990333AB731BA34B7B7"
    },
    "1228": {
      "op": "PUSH1",
      "value": "0x89"
    },
    "1230": {
      "op": "SHL"
    },
    "1231": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1233": {
      "op": "DUP3"
    },
    "1234": {
      "op": "ADD"
    },
    "1235": {
      "op": "MSTORE"
    },
    "1236": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1238": {
      "op": "ADD"
    },
    "1239": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1242": {
      "op": "JUMP"
    },
    "1243": {
      "fn": "Loot.approve",
      "offset": [
        6652,
        6804
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1244": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 10,
      "value": "0x0"
    },
    "1246": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1247": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1248": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1249": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6830
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x8"
    },
    "1251": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1253": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1254": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1255": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1256": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1258": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1259": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1260": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1261": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1262": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1263": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1265": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1269": {
      "op": "SHL"
    },
    "1270": {
      "op": "SUB"
    },
    "1271": {
      "op": "NOT"
    },
    "1272": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "AND",
      "path": "8"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1277": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1279": {
      "op": "SHL"
    },
    "1280": {
      "op": "SUB"
    },
    "1281": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "DUP9",
      "path": "8"
    },
    "1282": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1283": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "AND",
      "path": "8"
    },
    "1284": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1285": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1286": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "OR",
      "path": "8"
    },
    "1287": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1288": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "1289": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6844
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "1290": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3664
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "1292": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1293": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "1294": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1295": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1296": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP5",
      "path": "8"
    },
    "1297": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1298": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1299": {
      "fn": "Loot.approve",
      "offset": [
        6859,
        6903
      ],
      "op": "SWAP2",
      "path": "8",
      "statement": 11
    },
    "1300": {
      "fn": "Loot.approve",
      "offset": [
        6859,
        6903
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1301": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "DUP7",
      "path": "8"
    },
    "1302": {
      "fn": "Loot.approve",
      "offset": [
        6815,
        6839
      ],
      "op": "SWAP5",
      "path": "8"
    },
    "1303": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "1304": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1305": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1306": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "AND",
      "path": "8"
    },
    "1307": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1308": {
      "fn": "Loot.approve",
      "offset": [
        6859,
        6903
      ],
      "op": "PUSH32",
      "path": "8",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1341": {
      "fn": "Loot.approve",
      "offset": [
        6859,
        6903
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1342": {
      "fn": "Loot.approve",
      "offset": [
        6859,
        6903
      ],
      "op": "LOG4",
      "path": "8"
    },
    "1343": {
      "fn": "Loot.approve",
      "offset": [
        6522,
        6910
      ],
      "op": "POP",
      "path": "8"
    },
    "1344": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "POP",
      "path": "8"
    },
    "1345": {
      "fn": "Loot.approve",
      "offset": [
        6452,
        6910
      ],
      "op": "POP",
      "path": "8"
    },
    "1346": {
      "fn": "Loot.approve",
      "jump": "o",
      "offset": [
        6452,
        6910
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1347": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1348": {
      "fn": "Loot.transferFrom",
      "offset": [
        5385,
        5420
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 12,
      "value": "0x54E"
    },
    "1351": {
      "fn": "Loot.transferFrom",
      "offset": [
        5402,
        5406
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1352": {
      "fn": "Loot.transferFrom",
      "offset": [
        5408,
        5410
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1353": {
      "fn": "Loot.transferFrom",
      "offset": [
        5412,
        5419
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1354": {
      "fn": "Loot.transferFrom",
      "offset": [
        5385,
        5401
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x871"
    },
    "1357": {
      "fn": "Loot.transferFrom",
      "jump": "i",
      "offset": [
        5385,
        5420
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1358": {
      "fn": "Loot.transferFrom",
      "offset": [
        5385,
        5420
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1359": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "POP",
      "path": "8"
    },
    "1360": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "POP",
      "path": "8"
    },
    "1361": {
      "fn": "Loot.transferFrom",
      "offset": [
        5256,
        5427
      ],
      "op": "POP",
      "path": "8"
    },
    "1362": {
      "fn": "Loot.transferFrom",
      "jump": "o",
      "offset": [
        5256,
        5427
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1363": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1364": {
      "offset": [
        2411,
        2418
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x3"
    },
    "1366": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1368": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1369": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1370": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1371": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x100"
    },
    "1374": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "EXP",
      "path": "8"
    },
    "1375": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1376": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2418
      ],
      "op": "DIV",
      "path": "8"
    },
    "1377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1379": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1381": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1383": {
      "op": "SHL"
    },
    "1384": {
      "op": "SUB"
    },
    "1385": {
      "offset": [
        2411,
        2418
      ],
      "op": "AND",
      "path": "8"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1388": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1390": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1392": {
      "op": "SHL"
    },
    "1393": {
      "op": "SUB"
    },
    "1394": {
      "offset": [
        2411,
        2427
      ],
      "op": "AND",
      "path": "8"
    },
    "1395": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2427
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x570CA735"
    },
    "1400": {
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1402": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1403": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1404": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xFFFFFFFF"
    },
    "1409": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "AND",
      "path": "8"
    },
    "1410": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xE0"
    },
    "1412": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "SHL",
      "path": "8"
    },
    "1413": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1414": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1415": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1417": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ADD",
      "path": "8"
    },
    "1418": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1420": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1422": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1423": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1424": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1425": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "SUB",
      "path": "8"
    },
    "1426": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1427": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP7",
      "path": "8"
    },
    "1428": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1429": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "EXTCODESIZE",
      "path": "8"
    },
    "1430": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1431": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1432": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1433": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x5A1"
    },
    "1436": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1437": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1439": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1440": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "REVERT",
      "path": "8"
    },
    "1441": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1442": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "POP",
      "path": "8"
    },
    "1443": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "GAS",
      "path": "8"
    },
    "1444": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "STATICCALL",
      "path": "8"
    },
    "1445": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1446": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1447": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1448": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x5B5"
    },
    "1451": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1452": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "1453": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1455": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1456": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "RETURNDATACOPY",
      "path": "8"
    },
    "1457": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "1458": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1460": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "REVERT",
      "path": "8"
    },
    "1461": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1462": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "POP",
      "path": "8"
    },
    "1463": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "POP",
      "path": "8"
    },
    "1464": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "POP",
      "path": "8"
    },
    "1465": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "POP",
      "path": "8"
    },
    "1466": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1468": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1469": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "1470": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "1472": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "NOT",
      "path": "8"
    },
    "1473": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "1475": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1476": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ADD",
      "path": "8"
    },
    "1477": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "AND",
      "path": "8"
    },
    "1478": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1479": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ADD",
      "path": "8"
    },
    "1480": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1481": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1483": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1484": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "POP",
      "path": "8"
    },
    "1485": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1486": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "ADD",
      "path": "8"
    },
    "1487": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1488": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x5D9"
    },
    "1491": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1492": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1493": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xF81"
    },
    "1496": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        2411,
        2429
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1497": {
      "fn": "Loot.mint",
      "offset": [
        2411,
        2429
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1500": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1502": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1504": {
      "op": "SHL"
    },
    "1505": {
      "op": "SUB"
    },
    "1506": {
      "offset": [
        2397,
        2429
      ],
      "op": "AND",
      "path": "8"
    },
    "1507": {
      "offset": [
        2397,
        2407
      ],
      "op": "CALLER",
      "path": "8"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1512": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1514": {
      "op": "SHL"
    },
    "1515": {
      "op": "SUB"
    },
    "1516": {
      "offset": [
        2397,
        2429
      ],
      "op": "AND",
      "path": "8"
    },
    "1517": {
      "branch": 55,
      "fn": "Loot.mint",
      "offset": [
        2397,
        2429
      ],
      "op": "EQ",
      "path": "8"
    },
    "1518": {
      "offset": [
        2376,
        2503
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x652"
    },
    "1521": {
      "branch": 55,
      "offset": [
        2376,
        2503
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1522": {
      "fn": "Loot.mint",
      "offset": [
        2376,
        2503
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1524": {
      "fn": "Loot.mint",
      "offset": [
        2376,
        2503
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1525": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1529": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1531": {
      "op": "SHL"
    },
    "1532": {
      "offset": [
        2376,
        2503
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1533": {
      "fn": "Loot.mint",
      "offset": [
        2376,
        2503
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1536": {
      "offset": [
        2376,
        2503
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1538": {
      "fn": "Loot.mint",
      "offset": [
        2376,
        2503
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1539": {
      "fn": "Loot.mint",
      "offset": [
        2376,
        2503
      ],
      "op": "ADD",
      "path": "8"
    },
    "1540": {
      "op": "MSTORE"
    },
    "1541": {
      "op": "PUSH1",
      "value": "0x30"
    },
    "1543": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1545": {
      "op": "DUP3"
    },
    "1546": {
      "op": "ADD"
    },
    "1547": {
      "op": "MSTORE"
    },
    "1548": {
      "op": "PUSH32",
      "value": "0x4F6E6C7920746865206F7261636C65206F70657261746F72206D617920706572"
    },
    "1581": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1583": {
      "op": "DUP3"
    },
    "1584": {
      "op": "ADD"
    },
    "1585": {
      "op": "MSTORE"
    },
    "1586": {
      "op": "PUSH16",
      "value": "0x3337B936903A3434B99030B1BA34B7B7"
    },
    "1603": {
      "op": "PUSH1",
      "value": "0x81"
    },
    "1605": {
      "op": "SHL"
    },
    "1606": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1608": {
      "op": "DUP3"
    },
    "1609": {
      "op": "ADD"
    },
    "1610": {
      "op": "MSTORE"
    },
    "1611": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1613": {
      "op": "ADD"
    },
    "1614": {
      "offset": [
        2376,
        2503
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1617": {
      "op": "JUMP"
    },
    "1618": {
      "offset": [
        2376,
        2503
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1619": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1621": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1623": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1625": {
      "op": "SHL"
    },
    "1626": {
      "op": "SUB"
    },
    "1627": {
      "fn": "Loot.mint",
      "offset": [
        9151,
        9167
      ],
      "op": "DUP4",
      "path": "8",
      "statement": 13
    },
    "1628": {
      "branch": 56,
      "fn": "Loot.mint",
      "offset": [
        9151,
        9167
      ],
      "op": "AND",
      "path": "8"
    },
    "1629": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x678"
    },
    "1632": {
      "branch": 56,
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1633": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1635": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1636": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1640": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1642": {
      "op": "SHL"
    },
    "1643": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1644": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1645": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1647": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "ADD",
      "path": "8"
    },
    "1648": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1651": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1652": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x12DF"
    },
    "1655": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9130,
        9238
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1656": {
      "fn": "Loot.mint",
      "offset": [
        9130,
        9238
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1657": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 14,
      "value": "0x0"
    },
    "1659": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "DUP5",
      "path": "8"
    },
    "1660": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1661": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1662": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9268
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA"
    },
    "1664": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1666": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1667": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1669": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1670": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1671": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1672": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xFF"
    },
    "1674": {
      "fn": "Loot.mint",
      "offset": [
        9257,
        9276
      ],
      "op": "AND",
      "path": "8"
    },
    "1675": {
      "branch": 57,
      "fn": "Loot.mint",
      "offset": [
        9256,
        9276
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1676": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x6E1"
    },
    "1679": {
      "branch": 57,
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1680": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1682": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1683": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1687": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1689": {
      "op": "SHL"
    },
    "1690": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1691": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1692": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1694": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1696": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1697": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "ADD",
      "path": "8"
    },
    "1698": {
      "op": "MSTORE"
    },
    "1699": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "1701": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1703": {
      "op": "DUP3"
    },
    "1704": {
      "op": "ADD"
    },
    "1705": {
      "op": "MSTORE"
    },
    "1706": {
      "op": "PUSH32",
      "value": "0x5468652043727970746F50756E6B2077617320616C7265616479206D696E7465"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1741": {
      "op": "DUP3"
    },
    "1742": {
      "op": "ADD"
    },
    "1743": {
      "op": "MSTORE"
    },
    "1744": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "1746": {
      "op": "PUSH1",
      "value": "0xFA"
    },
    "1748": {
      "op": "SHL"
    },
    "1749": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1751": {
      "op": "DUP3"
    },
    "1752": {
      "op": "ADD"
    },
    "1753": {
      "op": "MSTORE"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1756": {
      "op": "ADD"
    },
    "1757": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1760": {
      "op": "JUMP"
    },
    "1761": {
      "fn": "Loot.mint",
      "offset": [
        9248,
        9314
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1762": {
      "fn": "Loot.mint",
      "offset": [
        9325,
        9341
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1764": {
      "fn": "Loot.mint",
      "offset": [
        9353,
        9356
      ],
      "op": "DUP3",
      "path": "8"
    },
    "1765": {
      "fn": "Loot.mint",
      "offset": [
        9353,
        9363
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1766": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9350
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1768": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9350
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1769": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9363
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x6F2"
    },
    "1772": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9363
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1773": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9363
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1774": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9363
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13E9"
    },
    "1777": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9344,
        9363
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1778": {
      "fn": "Loot.mint",
      "offset": [
        9344,
        9363
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1779": {
      "fn": "Loot.mint",
      "offset": [
        9325,
        9363
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1780": {
      "fn": "Loot.mint",
      "offset": [
        9325,
        9363
      ],
      "op": "POP",
      "path": "8"
    },
    "1781": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1782": {
      "fn": "Loot.mint",
      "offset": [
        9396,
        9404
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1783": {
      "fn": "Loot.mint",
      "offset": [
        9387,
        9393
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1785": {
      "fn": "Loot.mint",
      "offset": [
        9387,
        9393
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1786": {
      "fn": "Loot.mint",
      "offset": [
        9387,
        9404
      ],
      "op": "LT",
      "path": "8"
    },
    "1787": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1788": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x81E"
    },
    "1791": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1792": {
      "fn": "Loot.mint",
      "offset": [
        9463,
        9469
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 15,
      "value": "0x4"
    },
    "1794": {
      "fn": "Loot.mint",
      "offset": [
        9463,
        9469
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1795": {
      "fn": "Loot.mint",
      "offset": [
        9482,
        9483
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1797": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1798": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1799": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1800": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9462
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "1802": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1804": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1805": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1807": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1808": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1809": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1810": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1812": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1814": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1816": {
      "op": "SHL"
    },
    "1817": {
      "op": "SUB"
    },
    "1818": {
      "fn": "Loot.mint",
      "offset": [
        9455,
        9470
      ],
      "op": "AND",
      "path": "8"
    },
    "1819": {
      "branch": 58,
      "fn": "Loot.mint",
      "offset": [
        9455,
        9484
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "1820": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x737"
    },
    "1823": {
      "branch": 58,
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1824": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1826": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1827": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1831": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1833": {
      "op": "SHL"
    },
    "1834": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1835": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1836": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1838": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "ADD",
      "path": "8"
    },
    "1839": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1842": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1843": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x132C"
    },
    "1846": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9430,
        9554
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1847": {
      "fn": "Loot.mint",
      "offset": [
        9430,
        9554
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1848": {
      "fn": "Loot.mint",
      "offset": [
        9593,
        9639
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 16,
      "value": "0x745"
    },
    "1851": {
      "fn": "Loot.mint",
      "offset": [
        9624,
        9625
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1853": {
      "fn": "Loot.mint",
      "offset": [
        9628,
        9630
      ],
      "op": "DUP6",
      "path": "8"
    },
    "1854": {
      "fn": "Loot.mint",
      "offset": [
        9632,
        9638
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1856": {
      "fn": "Loot.mint",
      "offset": [
        9632,
        9638
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1857": {
      "fn": "Loot.mint",
      "offset": [
        9593,
        9615
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xD2B"
    },
    "1860": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9593,
        9639
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1861": {
      "branch": 59,
      "fn": "Loot.mint",
      "offset": [
        9593,
        9639
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1862": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x761"
    },
    "1865": {
      "branch": 59,
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1866": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1868": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "1869": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1873": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1875": {
      "op": "SHL"
    },
    "1876": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1877": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1878": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "1880": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "ADD",
      "path": "8"
    },
    "1881": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "1884": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1885": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1370"
    },
    "1888": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9568,
        9713
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1889": {
      "fn": "Loot.mint",
      "offset": [
        9568,
        9713
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1894": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1896": {
      "op": "SHL"
    },
    "1897": {
      "op": "SUB"
    },
    "1898": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "DUP5",
      "path": "8",
      "statement": 17
    },
    "1899": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "AND",
      "path": "8"
    },
    "1900": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1902": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1903": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1904": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1905": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9737
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x7"
    },
    "1907": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1909": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1910": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1912": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1913": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1914": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1915": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1916": {
      "fn": "Loot.mint",
      "offset": [
        9745,
        9746
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "1918": {
      "fn": "Loot.mint",
      "offset": [
        9745,
        9746
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "1919": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9741
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1920": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x78A"
    },
    "1923": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1924": {
      "fn": "Loot.mint",
      "offset": [
        9745,
        9746
      ],
      "op": "DUP5",
      "path": "8"
    },
    "1925": {
      "fn": "Loot.mint",
      "offset": [
        9745,
        9746
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1926": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13E9"
    },
    "1929": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9728,
        9746
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1930": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1931": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1932": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1933": {
      "fn": "Loot.mint",
      "offset": [
        9728,
        9746
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "1934": {
      "op": "POP"
    },
    "1935": {
      "op": "POP"
    },
    "1936": {
      "fn": "Loot.mint",
      "offset": [
        9768,
        9774
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 18,
      "value": "0x4"
    },
    "1938": {
      "fn": "Loot.mint",
      "offset": [
        9768,
        9774
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1939": {
      "fn": "Loot.mint",
      "offset": [
        9768,
        9774
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1940": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "1942": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1943": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1944": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1945": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9767
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "1947": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "1949": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1950": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1951": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1952": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "1954": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1955": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1956": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1957": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1958": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1959": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1961": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1963": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1965": {
      "op": "SHL"
    },
    "1966": {
      "op": "SUB"
    },
    "1967": {
      "op": "NOT"
    },
    "1968": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "AND",
      "path": "8"
    },
    "1969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1973": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1975": {
      "op": "SHL"
    },
    "1976": {
      "op": "SUB"
    },
    "1977": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "DUP11",
      "path": "8"
    },
    "1978": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "AND",
      "path": "8"
    },
    "1979": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1980": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "DUP2",
      "path": "8"
    },
    "1981": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "OR",
      "path": "8"
    },
    "1982": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1983": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1984": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "1985": {
      "fn": "Loot.mint",
      "offset": [
        9801,
        9807
      ],
      "op": "DUP5",
      "path": "8",
      "statement": 19
    },
    "1986": {
      "fn": "Loot.mint",
      "offset": [
        9801,
        9807
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1987": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "DUP5",
      "path": "8"
    },
    "1988": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1989": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9800
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x6"
    },
    "1991": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1992": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "1993": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "1994": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1995": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "DUP4",
      "path": "8"
    },
    "1996": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9808
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "1997": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1998": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "1999": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2001": {
      "op": "NOT"
    },
    "2002": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "AND",
      "path": "8"
    },
    "2003": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "DUP8",
      "path": "8"
    },
    "2004": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "2005": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "2006": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "OR",
      "path": "8"
    },
    "2007": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2008": {
      "fn": "Loot.mint",
      "offset": [
        9794,
        9816
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2009": {
      "fn": "Loot.mint",
      "offset": [
        9861,
        9867
      ],
      "op": "SWAP3",
      "path": "8",
      "statement": 20
    },
    "2010": {
      "fn": "Loot.mint",
      "offset": [
        9861,
        9867
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2011": {
      "fn": "Loot.mint",
      "offset": [
        9836,
        9868
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2012": {
      "fn": "Loot.mint",
      "offset": [
        9836,
        9868
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2013": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2014": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9780
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2015": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2016": {
      "fn": "Loot.mint",
      "offset": [
        9836,
        9868
      ],
      "op": "PUSH32",
      "path": "8",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2049": {
      "fn": "Loot.mint",
      "offset": [
        9836,
        9868
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2050": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2051": {
      "fn": "Loot.mint",
      "offset": [
        9760,
        9775
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2052": {
      "fn": "Loot.mint",
      "offset": [
        9836,
        9868
      ],
      "op": "LOG4",
      "path": "8"
    },
    "2053": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9412
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 21,
      "value": "0x4"
    },
    "2055": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2056": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2057": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2058": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9412
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "2060": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x814"
    },
    "2063": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "DUP4",
      "path": "8"
    },
    "2064": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1493"
    },
    "2067": {
      "fn": "Loot.mint",
      "jump": "i",
      "offset": [
        9406,
        9414
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2068": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2069": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2070": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2071": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "POP",
      "path": "8"
    },
    "2072": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2073": {
      "fn": "Loot.mint",
      "offset": [
        9406,
        9414
      ],
      "op": "POP",
      "path": "8"
    },
    "2074": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x6F5"
    },
    "2077": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2078": {
      "fn": "Loot.mint",
      "offset": [
        9374,
        9879
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2079": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 22,
      "value": "0x0"
    },
    "2081": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "DUP6",
      "path": "8"
    },
    "2082": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2083": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2084": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9900
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA"
    },
    "2086": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2088": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2089": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2091": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2092": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2093": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2094": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9915
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2095": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9915
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2096": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2098": {
      "op": "NOT"
    },
    "2099": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9915
      ],
      "op": "AND",
      "path": "8"
    },
    "2100": {
      "fn": "Loot.mint",
      "offset": [
        9911,
        9915
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "2102": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9915
      ],
      "op": "OR",
      "path": "8"
    },
    "2103": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9915
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2104": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9915
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2105": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "MLOAD",
      "path": "8",
      "statement": 23
    },
    "2106": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2108": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2110": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2112": {
      "op": "SHL"
    },
    "2113": {
      "op": "SUB"
    },
    "2114": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "DUP7",
      "path": "8"
    },
    "2115": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "AND",
      "path": "8"
    },
    "2116": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2117": {
      "fn": "Loot.mint",
      "offset": [
        9901,
        9907
      ],
      "op": "DUP8",
      "path": "8"
    },
    "2118": {
      "fn": "Loot.mint",
      "offset": [
        9901,
        9907
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2119": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "PUSH32",
      "path": "8",
      "value": "0x346DED8055A0968941609C2FF8335D290F586F0F20658FAC695B54946923A1F8"
    },
    "2152": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2153": {
      "fn": "Loot.mint",
      "offset": [
        9889,
        9908
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2154": {
      "fn": "Loot.mint",
      "offset": [
        9930,
        9954
      ],
      "op": "LOG3",
      "path": "8"
    },
    "2155": {
      "fn": "Loot.mint",
      "offset": [
        9120,
        9961
      ],
      "op": "POP",
      "path": "8"
    },
    "2156": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "POP",
      "path": "8"
    },
    "2157": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "POP",
      "path": "8"
    },
    "2158": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "POP",
      "path": "8"
    },
    "2159": {
      "fn": "Loot.mint",
      "offset": [
        8982,
        9961
      ],
      "op": "POP",
      "path": "8"
    },
    "2160": {
      "fn": "Loot.mint",
      "jump": "o",
      "offset": [
        8982,
        9961
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2161": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2162": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3938,
        3951
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "2164": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2165": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2166": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2167": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3664
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "2169": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2171": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2172": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2174": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2175": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2176": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2183": {
      "op": "SHL"
    },
    "2184": {
      "op": "SUB"
    },
    "2185": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "AND",
      "path": "8"
    },
    "2186": {
      "fn": "Loot.ownerOf",
      "offset": [
        3657,
        3673
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2187": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 24,
      "value": "0x8D6"
    },
    "2190": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2191": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2193": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2194": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2198": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2200": {
      "op": "SHL"
    },
    "2201": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2202": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2203": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2205": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2207": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2208": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "ADD",
      "path": "8"
    },
    "2209": {
      "op": "MSTORE"
    },
    "2210": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "2212": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2214": {
      "op": "DUP3"
    },
    "2215": {
      "op": "ADD"
    },
    "2216": {
      "op": "MSTORE"
    },
    "2217": {
      "op": "PUSH32",
      "value": "0x54686520746F6B656E20646F6573206E6F742065786973740000000000000000"
    },
    "2250": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2252": {
      "op": "DUP3"
    },
    "2253": {
      "op": "ADD"
    },
    "2254": {
      "op": "MSTORE"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2257": {
      "op": "ADD"
    },
    "2258": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "2261": {
      "op": "JUMP"
    },
    "2262": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3985,
        4052
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2263": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4093
      ],
      "op": "CALLER",
      "path": "8",
      "statement": 25
    },
    "2264": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2266": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2270": {
      "op": "SHL"
    },
    "2271": {
      "op": "SUB"
    },
    "2272": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4102
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2273": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4102
      ],
      "op": "AND",
      "path": "8"
    },
    "2274": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4102
      ],
      "op": "EQ",
      "path": "8"
    },
    "2275": {
      "branch": 60,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4102
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2276": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4156
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x8FD"
    },
    "2279": {
      "branch": 60,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4156
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2280": {
      "op": "POP"
    },
    "2281": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4146,
        4156
      ],
      "op": "CALLER",
      "path": "8"
    },
    "2282": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4122,
        4142
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x8F2"
    },
    "2285": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4134,
        4141
      ],
      "op": "DUP4",
      "path": "8"
    },
    "2286": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4122,
        4133
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x387"
    },
    "2289": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4122,
        4142
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2290": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4122,
        4142
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2293": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2295": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2297": {
      "op": "SHL"
    },
    "2298": {
      "op": "SUB"
    },
    "2299": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4122,
        4156
      ],
      "op": "AND",
      "path": "8"
    },
    "2300": {
      "branch": 61,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4122,
        4156
      ],
      "op": "EQ",
      "path": "8"
    },
    "2301": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4156
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2302": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4211
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2303": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x90D"
    },
    "2306": {
      "branch": 61,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4211
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2307": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4083,
        4211
      ],
      "op": "POP",
      "path": "8"
    },
    "2308": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4176,
        4211
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x90D"
    },
    "2311": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4193,
        4198
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2312": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4200,
        4210
      ],
      "op": "CALLER",
      "path": "8"
    },
    "2313": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4176,
        4192
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCFD"
    },
    "2316": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4176,
        4211
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2317": {
      "branch": 62,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4176,
        4211
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2318": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x975"
    },
    "2321": {
      "branch": 62,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2322": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2324": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2325": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2329": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2331": {
      "op": "SHL"
    },
    "2332": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2333": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2334": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2336": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2338": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2339": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "ADD",
      "path": "8"
    },
    "2340": {
      "op": "MSTORE"
    },
    "2341": {
      "op": "PUSH1",
      "value": "0x33"
    },
    "2343": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2345": {
      "op": "DUP3"
    },
    "2346": {
      "op": "ADD"
    },
    "2347": {
      "op": "MSTORE"
    },
    "2348": {
      "op": "PUSH32",
      "value": "0x546865206F70657261746F72206973206E6F7420617070726F76656420746F20"
    },
    "2381": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2383": {
      "op": "DUP3"
    },
    "2384": {
      "op": "ADD"
    },
    "2385": {
      "op": "MSTORE"
    },
    "2386": {
      "op": "PUSH19",
      "value": "0x3A3930B739B332B9103A3434B9903A37B5B2B7"
    },
    "2406": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "2408": {
      "op": "SHL"
    },
    "2409": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2411": {
      "op": "DUP3"
    },
    "2412": {
      "op": "ADD"
    },
    "2413": {
      "op": "MSTORE"
    },
    "2414": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2416": {
      "op": "ADD"
    },
    "2417": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "2420": {
      "op": "JUMP"
    },
    "2421": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4062,
        4288
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2422": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4328,
        4332
      ],
      "op": "DUP4",
      "path": "8",
      "statement": 26
    },
    "2423": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2427": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2429": {
      "op": "SHL"
    },
    "2430": {
      "op": "SUB"
    },
    "2431": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4319,
        4332
      ],
      "op": "AND",
      "path": "8"
    },
    "2432": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4319,
        4324
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2433": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2437": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2439": {
      "op": "SHL"
    },
    "2440": {
      "op": "SUB"
    },
    "2441": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4319,
        4332
      ],
      "op": "AND",
      "path": "8"
    },
    "2442": {
      "branch": 63,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4319,
        4332
      ],
      "op": "EQ",
      "path": "8"
    },
    "2443": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x9F1"
    },
    "2446": {
      "branch": 63,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2447": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2449": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2450": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2454": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2456": {
      "op": "SHL"
    },
    "2457": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2458": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2459": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2461": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2463": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2464": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "ADD",
      "path": "8"
    },
    "2465": {
      "op": "MSTORE"
    },
    "2466": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "2468": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2470": {
      "op": "DUP3"
    },
    "2471": {
      "op": "ADD"
    },
    "2472": {
      "op": "MSTORE"
    },
    "2473": {
      "op": "PUSH32",
      "value": "0x5468652073656E64657220646F6573206E6F74206F776E2074686520746F6B65"
    },
    "2506": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2508": {
      "op": "DUP3"
    },
    "2509": {
      "op": "ADD"
    },
    "2510": {
      "op": "MSTORE"
    },
    "2511": {
      "op": "PUSH18",
      "value": "0x1B881D1BC81899481D1C985B9CD9995C9959"
    },
    "2530": {
      "op": "PUSH1",
      "value": "0x72"
    },
    "2532": {
      "op": "SHL"
    },
    "2533": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2535": {
      "op": "DUP3"
    },
    "2536": {
      "op": "ADD"
    },
    "2537": {
      "op": "MSTORE"
    },
    "2538": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2540": {
      "op": "ADD"
    },
    "2541": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "2544": {
      "op": "JUMP"
    },
    "2545": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4298,
        4408
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2546": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2548": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2550": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2552": {
      "op": "SHL"
    },
    "2553": {
      "op": "SUB"
    },
    "2554": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4439,
        4455
      ],
      "op": "DUP4",
      "path": "8",
      "statement": 27
    },
    "2555": {
      "branch": 64,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4439,
        4455
      ],
      "op": "AND",
      "path": "8"
    },
    "2556": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xA17"
    },
    "2559": {
      "branch": 64,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2560": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2562": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2563": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2567": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2569": {
      "op": "SHL"
    },
    "2570": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2571": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2572": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2574": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "ADD",
      "path": "8"
    },
    "2575": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "2578": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2579": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x12DF"
    },
    "2582": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4418,
        4526
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2583": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4418,
        4526
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2584": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4557,
        4598
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 28,
      "value": "0xA22"
    },
    "2587": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4580,
        4584
      ],
      "op": "DUP5",
      "path": "8"
    },
    "2588": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4586,
        4588
      ],
      "op": "DUP5",
      "path": "8"
    },
    "2589": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4590,
        4597
      ],
      "op": "DUP5",
      "path": "8"
    },
    "2590": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4557,
        4579
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xD2B"
    },
    "2593": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4557,
        4598
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2594": {
      "branch": 65,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4557,
        4598
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2595": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xA3E"
    },
    "2598": {
      "branch": 65,
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2599": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2601": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2602": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2606": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2608": {
      "op": "SHL"
    },
    "2609": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2610": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2611": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2613": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "ADD",
      "path": "8"
    },
    "2614": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "2617": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2618": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1370"
    },
    "2621": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4536,
        4664
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2622": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4536,
        4664
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2623": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2625": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2627": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2629": {
      "op": "SHL"
    },
    "2630": {
      "op": "SUB"
    },
    "2631": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "DUP5",
      "path": "8",
      "statement": 29
    },
    "2632": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "AND",
      "path": "8"
    },
    "2633": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "2635": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2636": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2637": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2638": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4684
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x7"
    },
    "2640": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2642": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2643": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2645": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2646": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2647": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2648": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2649": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4694,
        4695
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "2651": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4694,
        4695
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2652": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4690
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2653": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xA67"
    },
    "2656": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2657": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4694,
        4695
      ],
      "op": "DUP5",
      "path": "8"
    },
    "2658": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4694,
        4695
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2659": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1415"
    },
    "2662": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4675,
        4695
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2663": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2664": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2665": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2666": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4675,
        4695
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2667": {
      "op": "POP"
    },
    "2668": {
      "op": "POP"
    },
    "2669": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2671": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2673": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2675": {
      "op": "SHL"
    },
    "2676": {
      "op": "SUB"
    },
    "2677": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "DUP4",
      "path": "8",
      "statement": 30
    },
    "2678": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "AND",
      "path": "8"
    },
    "2679": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "2681": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2682": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2683": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2684": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4714
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x7"
    },
    "2686": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2688": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2689": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2691": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2692": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2693": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2694": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2695": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4722,
        4723
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "2697": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4722,
        4723
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2698": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4718
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2699": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xA95"
    },
    "2702": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2703": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4722,
        4723
      ],
      "op": "DUP5",
      "path": "8"
    },
    "2704": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4722,
        4723
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2705": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13E9"
    },
    "2708": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        4705,
        4723
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2709": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2710": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2711": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2712": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4705,
        4723
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2713": {
      "op": "POP"
    },
    "2714": {
      "op": "POP"
    },
    "2715": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 31,
      "value": "0x0"
    },
    "2717": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2718": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2719": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2720": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4740
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "2722": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2724": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2725": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2727": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2728": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2729": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2730": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2731": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2732": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2734": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2736": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2738": {
      "op": "SHL"
    },
    "2739": {
      "op": "SUB"
    },
    "2740": {
      "op": "NOT"
    },
    "2741": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "AND",
      "path": "8"
    },
    "2742": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2744": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2746": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2748": {
      "op": "SHL"
    },
    "2749": {
      "op": "SUB"
    },
    "2750": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "DUP8",
      "path": "8"
    },
    "2751": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2752": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "AND",
      "path": "8"
    },
    "2753": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2754": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2755": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "OR",
      "path": "8"
    },
    "2756": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2757": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2758": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4754
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2759": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "SWAP2",
      "path": "8",
      "statement": 32
    },
    "2760": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2761": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "DUP6",
      "path": "8"
    },
    "2762": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4733,
        4749
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "2763": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2764": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "DUP9",
      "path": "8"
    },
    "2765": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "AND",
      "path": "8"
    },
    "2766": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2767": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "PUSH32",
      "path": "8",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2800": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2801": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4770,
        4797
      ],
      "op": "LOG4",
      "path": "8"
    },
    "2802": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3928,
        4804
      ],
      "op": "POP",
      "path": "8"
    },
    "2803": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "POP",
      "path": "8"
    },
    "2804": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "POP",
      "path": "8"
    },
    "2805": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        3805,
        4804
      ],
      "op": "POP",
      "path": "8"
    },
    "2806": {
      "fn": "Loot.safeTransferFrom",
      "jump": "o",
      "offset": [
        3805,
        4804
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2807": {
      "fn": "Loot.symbol",
      "offset": [
        8319,
        8421
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2808": {
      "fn": "Loot.symbol",
      "offset": [
        8375,
        8388
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x60"
    },
    "2810": {
      "fn": "Loot.symbol",
      "offset": [
        8407,
        8414
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 33,
      "value": "0x1"
    },
    "2812": {
      "fn": "Loot.symbol",
      "offset": [
        8400,
        8414
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2813": {
      "fn": "Loot.symbol",
      "offset": [
        8400,
        8414
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2814": {
      "fn": "Loot.symbol",
      "offset": [
        8400,
        8414
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x304"
    },
    "2817": {
      "fn": "Loot.symbol",
      "offset": [
        8400,
        8414
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2818": {
      "fn": "Loot.symbol",
      "offset": [
        8400,
        8414
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1458"
    },
    "2821": {
      "fn": "Loot.symbol",
      "jump": "i",
      "offset": [
        8400,
        8414
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2822": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2827": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2829": {
      "op": "SHL"
    },
    "2830": {
      "op": "SUB"
    },
    "2831": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7518,
        7540
      ],
      "op": "DUP3",
      "path": "8",
      "statement": 34
    },
    "2832": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7518,
        7540
      ],
      "op": "AND",
      "path": "8"
    },
    "2833": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7530,
        7540
      ],
      "op": "CALLER",
      "path": "8"
    },
    "2834": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7518,
        7540
      ],
      "op": "EQ",
      "path": "8"
    },
    "2835": {
      "branch": 66,
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7518,
        7540
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "2836": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xB6A"
    },
    "2839": {
      "branch": 66,
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2840": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2842": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2843": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2847": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2849": {
      "op": "SHL"
    },
    "2850": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2851": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2852": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2854": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2856": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2857": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "ADD",
      "path": "8"
    },
    "2858": {
      "op": "MSTORE"
    },
    "2859": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2861": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2863": {
      "op": "DUP3"
    },
    "2864": {
      "op": "ADD"
    },
    "2865": {
      "op": "MSTORE"
    },
    "2866": {
      "op": "PUSH32",
      "value": "0x5468652073656E646572206D6179206E6F7420626520746865206F7065726174"
    },
    "2899": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2901": {
      "op": "DUP3"
    },
    "2902": {
      "op": "ADD"
    },
    "2903": {
      "op": "MSTORE"
    },
    "2904": {
      "op": "PUSH2",
      "value": "0x37B9"
    },
    "2907": {
      "op": "PUSH1",
      "value": "0xF1"
    },
    "2909": {
      "op": "SHL"
    },
    "2910": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2912": {
      "op": "DUP3"
    },
    "2913": {
      "op": "ADD"
    },
    "2914": {
      "op": "MSTORE"
    },
    "2915": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2917": {
      "op": "ADD"
    },
    "2918": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "2921": {
      "op": "JUMP"
    },
    "2922": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7510,
        7579
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2923": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7609,
        7619
      ],
      "op": "CALLER",
      "path": "8",
      "statement": 35
    },
    "2924": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "2926": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2927": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2928": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2929": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7608
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x9"
    },
    "2931": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2933": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2934": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2935": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2936": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2938": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2939": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "DUP4",
      "path": "8"
    },
    "2940": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7620
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2943": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2945": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2947": {
      "op": "SHL"
    },
    "2948": {
      "op": "SUB"
    },
    "2949": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "DUP8",
      "path": "8"
    },
    "2950": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "AND",
      "path": "8"
    },
    "2951": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2952": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "DUP6",
      "path": "8"
    },
    "2953": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2954": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2955": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "DUP4",
      "path": "8"
    },
    "2956": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2957": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2958": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2959": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2960": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "2961": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2962": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "2963": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2965": {
      "op": "NOT"
    },
    "2966": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "AND",
      "path": "8"
    },
    "2967": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "DUP7",
      "path": "8"
    },
    "2968": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "2969": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "2970": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2971": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2972": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "OR",
      "path": "8"
    },
    "2973": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2974": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2975": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7641
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "2976": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "SWAP1",
      "path": "8",
      "statement": 36
    },
    "2977": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2978": {
      "op": "SWAP1"
    },
    "2979": {
      "op": "DUP2"
    },
    "2980": {
      "op": "MSTORE"
    },
    "2981": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2982": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7590,
        7630
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2983": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7609,
        7619
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "2984": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "PUSH32",
      "path": "8",
      "value": "0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
    },
    "3017": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3018": {
      "op": "ADD"
    },
    "3019": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3021": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3022": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3023": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3024": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "SUB",
      "path": "8"
    },
    "3025": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3026": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7656,
        7702
      ],
      "op": "LOG3",
      "path": "8"
    },
    "3027": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "POP",
      "path": "8"
    },
    "3028": {
      "fn": "Loot.setApprovalForAll",
      "offset": [
        7388,
        7709
      ],
      "op": "POP",
      "path": "8"
    },
    "3029": {
      "fn": "Loot.setApprovalForAll",
      "jump": "o",
      "offset": [
        7388,
        7709
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3030": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3031": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        5098,
        5133
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 37,
      "value": "0xBE1"
    },
    "3034": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        5115,
        5119
      ],
      "op": "DUP5",
      "path": "8"
    },
    "3035": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        5121,
        5123
      ],
      "op": "DUP5",
      "path": "8"
    },
    "3036": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        5125,
        5132
      ],
      "op": "DUP5",
      "path": "8"
    },
    "3037": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        5098,
        5114
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x871"
    },
    "3040": {
      "fn": "Loot.safeTransferFrom",
      "jump": "i",
      "offset": [
        5098,
        5133
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3041": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        5098,
        5133
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3042": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "POP",
      "path": "8"
    },
    "3043": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "POP",
      "path": "8"
    },
    "3044": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "POP",
      "path": "8"
    },
    "3045": {
      "fn": "Loot.safeTransferFrom",
      "offset": [
        4937,
        5140
      ],
      "op": "POP",
      "path": "8"
    },
    "3046": {
      "fn": "Loot.safeTransferFrom",
      "jump": "o",
      "offset": [
        4937,
        5140
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3047": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3048": {
      "fn": "Loot.tokenURI",
      "offset": [
        8715,
        8716
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 38,
      "value": "0x0"
    },
    "3050": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3051": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3052": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3053": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8694
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x5"
    },
    "3055": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3057": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3058": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3060": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3061": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "3062": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "3063": {
      "fn": "Loot.tokenURI",
      "offset": [
        8637,
        8650
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x60"
    },
    "3065": {
      "fn": "Loot.tokenURI",
      "offset": [
        8637,
        8650
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3068": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3070": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3072": {
      "op": "SHL"
    },
    "3073": {
      "op": "SUB"
    },
    "3074": {
      "fn": "Loot.tokenURI",
      "offset": [
        8687,
        8703
      ],
      "op": "AND",
      "path": "8"
    },
    "3075": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC1E"
    },
    "3078": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3079": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3081": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3082": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3086": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3088": {
      "op": "SHL"
    },
    "3089": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3090": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3091": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "3093": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "ADD",
      "path": "8"
    },
    "3094": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "3097": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3098": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x132C"
    },
    "3101": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8666,
        8779
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3102": {
      "fn": "Loot.tokenURI",
      "offset": [
        8666,
        8779
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3103": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8811
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3105": {
      "fn": "Loot.tokenURI",
      "offset": [
        8814,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x2"
    },
    "3107": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3108": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "3109": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC2D"
    },
    "3112": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3113": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1458"
    },
    "3116": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3117": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3118": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3119": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "3121": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3122": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3124": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3125": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3126": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DIV",
      "path": "8"
    },
    "3127": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MUL",
      "path": "8"
    },
    "3128": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3130": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3131": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3133": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3134": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3135": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3136": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3137": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3139": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3140": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3141": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "3142": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3143": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3144": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3145": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3146": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3147": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3149": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3150": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3151": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3152": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "3153": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC59"
    },
    "3156": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3157": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1458"
    },
    "3160": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3161": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3162": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3163": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "3164": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCA6"
    },
    "3167": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3168": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3169": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "3171": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "LT",
      "path": "8"
    },
    "3172": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC7B"
    },
    "3175": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3176": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x100"
    },
    "3179": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3180": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3181": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "3182": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DIV",
      "path": "8"
    },
    "3183": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MUL",
      "path": "8"
    },
    "3184": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3185": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3186": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3187": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3189": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3190": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3191": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCA6"
    },
    "3194": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3195": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3196": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3197": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3198": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3199": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3200": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3202": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3203": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3205": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3207": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "3208": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3209": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3210": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3211": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "3212": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3213": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3214": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3215": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "3217": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3218": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3219": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3221": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3222": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3223": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3224": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "GT",
      "path": "8"
    },
    "3225": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC89"
    },
    "3228": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3229": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3230": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3231": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SUB",
      "path": "8"
    },
    "3232": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "3234": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "AND",
      "path": "8"
    },
    "3235": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3236": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "ADD",
      "path": "8"
    },
    "3237": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3238": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3239": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "POP",
      "path": "8"
    },
    "3240": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "POP",
      "path": "8"
    },
    "3241": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "POP",
      "path": "8"
    },
    "3242": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "POP",
      "path": "8"
    },
    "3243": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "POP",
      "path": "8"
    },
    "3244": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3245": {
      "fn": "Loot.tokenURI",
      "offset": [
        8790,
        8822
      ],
      "op": "POP",
      "path": "8"
    },
    "3246": {
      "fn": "Loot.tokenURI",
      "offset": [
        8875,
        8876
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 39,
      "value": "0x0"
    },
    "3248": {
      "fn": "Loot.tokenURI",
      "offset": [
        8857,
        8864
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3249": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8872
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3250": {
      "branch": 67,
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8876
      ],
      "op": "GT",
      "path": "8"
    },
    "3251": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCCB"
    },
    "3254": {
      "branch": 67,
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3255": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3257": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3258": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3259": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3261": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "ADD",
      "path": "8"
    },
    "3262": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3264": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3265": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3266": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3268": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3269": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3270": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "POP",
      "path": "8"
    },
    "3271": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCF6"
    },
    "3274": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3275": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3276": {
      "fn": "Loot.tokenURI",
      "offset": [
        8919,
        8926
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3277": {
      "fn": "Loot.tokenURI",
      "offset": [
        8928,
        8946
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCD5"
    },
    "3280": {
      "fn": "Loot.tokenURI",
      "offset": [
        8928,
        8935
      ],
      "op": "DUP5",
      "path": "8"
    },
    "3281": {
      "fn": "Loot.tokenURI",
      "offset": [
        8928,
        8944
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xE49"
    },
    "3284": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8928,
        8946
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3285": {
      "fn": "Loot.tokenURI",
      "offset": [
        8928,
        8946
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3286": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3288": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3289": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3291": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "ADD",
      "path": "8"
    },
    "3292": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCE6"
    },
    "3295": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "3296": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3297": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3298": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x127D"
    },
    "3301": {
      "fn": "Loot.tokenURI",
      "jump": "i",
      "offset": [
        8902,
        8947
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3302": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3303": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3305": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3306": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3308": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3309": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3310": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "SUB",
      "path": "8"
    },
    "3311": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "SUB",
      "path": "8"
    },
    "3312": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3313": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3314": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3315": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3317": {
      "fn": "Loot.tokenURI",
      "offset": [
        8902,
        8947
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3318": {
      "fn": "Loot.tokenURI",
      "offset": [
        8851,
        8969
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3319": {
      "fn": "Loot.tokenURI",
      "offset": [
        8832,
        8969
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "3320": {
      "fn": "Loot.tokenURI",
      "offset": [
        8524,
        8976
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "3321": {
      "op": "POP"
    },
    "3322": {
      "op": "POP"
    },
    "3323": {
      "op": "POP"
    },
    "3324": {
      "fn": "Loot.tokenURI",
      "jump": "o",
      "offset": [
        8524,
        8976
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3325": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7815,
        8021
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3326": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3328": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3330": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3332": {
      "op": "SHL"
    },
    "3333": {
      "op": "SUB"
    },
    "3334": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "SWAP2",
      "path": "8",
      "statement": 40
    },
    "3335": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3336": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "AND",
      "path": "8"
    },
    "3337": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7952,
        7956
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3339": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3340": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3341": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3342": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        7997
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x9"
    },
    "3344": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3346": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3347": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3348": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3349": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3351": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3352": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3353": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8004
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "3354": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "3355": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3356": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP5",
      "path": "8"
    },
    "3357": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "AND",
      "path": "8"
    },
    "3358": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3359": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3360": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3361": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3362": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3363": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3364": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "3365": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "3366": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xFF"
    },
    "3368": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "AND",
      "path": "8"
    },
    "3369": {
      "fn": "Loot.isApprovedForAll",
      "offset": [
        7979,
        8014
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3370": {
      "fn": "Loot.isApprovedForAll",
      "jump": "o",
      "offset": [
        7815,
        8021
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3371": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5515,
        6376
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3372": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5637,
        5641
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3380": {
      "op": "SHL"
    },
    "3381": {
      "op": "SUB"
    },
    "3382": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5657,
        5670
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3383": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5657,
        5670
      ],
      "op": "AND",
      "path": "8"
    },
    "3384": {
      "fn": "Address.isContract",
      "offset": [
        1034,
        1054
      ],
      "op": "EXTCODESIZE",
      "path": "3"
    },
    "3385": {
      "fn": "Address.isContract",
      "offset": [
        1080,
        1088
      ],
      "op": "ISZERO",
      "path": "3",
      "statement": 41
    },
    "3386": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5653,
        6370
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xE3F"
    },
    "3389": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5653,
        6370
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3390": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3392": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3393": {
      "op": "PUSH4",
      "value": "0xA85BD01"
    },
    "3398": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "3400": {
      "op": "SHL"
    },
    "3401": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3402": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3403": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5766,
        5776
      ],
      "op": "CALLER",
      "path": "8"
    },
    "3404": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "3406": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3407": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ADD",
      "path": "8"
    },
    "3408": {
      "op": "MSTORE"
    },
    "3409": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3411": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3413": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3415": {
      "op": "SHL"
    },
    "3416": {
      "op": "SUB"
    },
    "3417": {
      "op": "DUP6"
    },
    "3418": {
      "op": "DUP2"
    },
    "3419": {
      "op": "AND"
    },
    "3420": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3422": {
      "op": "DUP4"
    },
    "3423": {
      "op": "ADD"
    },
    "3424": {
      "op": "MSTORE"
    },
    "3425": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3427": {
      "op": "DUP3"
    },
    "3428": {
      "op": "ADD"
    },
    "3429": {
      "op": "DUP5"
    },
    "3430": {
      "op": "SWAP1"
    },
    "3431": {
      "op": "MSTORE"
    },
    "3432": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3434": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3436": {
      "op": "DUP4"
    },
    "3437": {
      "op": "ADD"
    },
    "3438": {
      "op": "MSTORE"
    },
    "3439": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3441": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3443": {
      "op": "DUP4"
    },
    "3444": {
      "op": "ADD"
    },
    "3445": {
      "op": "MSTORE"
    },
    "3446": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5744
      ],
      "op": "DUP5",
      "path": "8"
    },
    "3447": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5744
      ],
      "op": "AND",
      "path": "8"
    },
    "3448": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5744
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3449": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5744
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x150B7A02"
    },
    "3454": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5744
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3455": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "3457": {
      "op": "ADD"
    },
    "3458": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3460": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3462": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3463": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3464": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP4",
      "path": "8"
    },
    "3465": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SUB",
      "path": "8"
    },
    "3466": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3467": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3469": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP8",
      "path": "8"
    },
    "3470": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3471": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "EXTCODESIZE",
      "path": "8"
    },
    "3472": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "3473": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3474": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "3475": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xD9B"
    },
    "3478": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3479": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3481": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3482": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "REVERT",
      "path": "8"
    },
    "3483": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3484": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "POP",
      "path": "8"
    },
    "3485": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "GAS",
      "path": "8"
    },
    "3486": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "CALL",
      "path": "8"
    },
    "3487": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "3488": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "POP",
      "path": "8"
    },
    "3489": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "POP",
      "path": "8"
    },
    "3490": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "POP",
      "path": "8"
    },
    "3491": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3492": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "3493": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xDCB"
    },
    "3496": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3497": {
      "op": "POP"
    },
    "3498": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3500": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3501": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3502": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "3504": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "3505": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3506": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3507": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ADD",
      "path": "8"
    },
    "3508": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3510": {
      "op": "NOT"
    },
    "3511": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "AND",
      "path": "8"
    },
    "3512": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3513": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ADD",
      "path": "8"
    },
    "3514": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3515": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "3516": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3517": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xDC8"
    },
    "3520": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3521": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3522": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "ADD",
      "path": "8"
    },
    "3523": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3524": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x115A"
    },
    "3527": {
      "fn": "Loot._checkOnERC721Received",
      "jump": "i",
      "offset": [
        5708,
        5873
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3528": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3529": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "3531": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5708,
        5873
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3532": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xE25"
    },
    "3535": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3536": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "3537": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3538": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3539": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "3540": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xDF9"
    },
    "3543": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3544": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3546": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3547": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3548": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "POP",
      "path": "8"
    },
    "3549": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "3551": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "NOT",
      "path": "8"
    },
    "3552": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x3F"
    },
    "3554": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "3555": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "ADD",
      "path": "8"
    },
    "3556": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "AND",
      "path": "8"
    },
    "3557": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3558": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "ADD",
      "path": "8"
    },
    "3559": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "3561": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3562": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "3563": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "DUP3",
      "path": "8"
    },
    "3564": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3565": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "RETURNDATASIZE",
      "path": "8"
    },
    "3566": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "3568": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3570": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "DUP5",
      "path": "8"
    },
    "3571": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "ADD",
      "path": "8"
    },
    "3572": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "RETURNDATACOPY",
      "path": "8"
    },
    "3573": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xDFE"
    },
    "3576": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3577": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3578": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x60"
    },
    "3580": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "3581": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "POP",
      "path": "8"
    },
    "3582": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3583": {
      "op": "POP"
    },
    "3584": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6052,
        6065
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3585": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6052,
        6065
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3586": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6048,
        6304
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xE1D"
    },
    "3589": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6048,
        6304
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "3590": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 42,
      "value": "0x40"
    },
    "3592": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3593": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3597": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3599": {
      "op": "SHL"
    },
    "3600": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3601": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "3602": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "3604": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "ADD",
      "path": "8"
    },
    "3605": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BB"
    },
    "3608": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3609": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6094,
        6144
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1370"
    },
    "3612": {
      "fn": "Loot._checkOnERC721Received",
      "jump": "i",
      "offset": [
        6094,
        6144
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3613": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6048,
        6304
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3614": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6256,
        6262
      ],
      "op": "DUP1",
      "path": "8"
    },
    "3615": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6250,
        6263
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "3616": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6241,
        6247
      ],
      "op": "DUP2",
      "path": "8"
    },
    "3617": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6237,
        6239
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "3619": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6233,
        6248
      ],
      "op": "ADD",
      "path": "8"
    },
    "3620": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6226,
        6264
      ],
      "op": "REVERT",
      "path": "8"
    },
    "3621": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5688,
        6318
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3622": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3624": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3626": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3628": {
      "op": "SHL"
    },
    "3629": {
      "op": "SUB"
    },
    "3630": {
      "op": "NOT"
    },
    "3631": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5935,
        5986
      ],
      "op": "AND",
      "path": "8",
      "statement": 43
    },
    "3632": {
      "op": "PUSH4",
      "value": "0xA85BD01"
    },
    "3637": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "3639": {
      "op": "SHL"
    },
    "3640": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5935,
        5986
      ],
      "op": "EQ",
      "path": "8"
    },
    "3641": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5935,
        5986
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "3642": {
      "op": "POP"
    },
    "3643": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5928,
        5986
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCF6"
    },
    "3646": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5928,
        5986
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3647": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5653,
        6370
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "3648": {
      "op": "POP"
    },
    "3649": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        6355,
        6359
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 44,
      "value": "0x1"
    },
    "3651": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5515,
        6376
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "3652": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5515,
        6376
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "3653": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5515,
        6376
      ],
      "op": "POP",
      "path": "8"
    },
    "3654": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5515,
        6376
      ],
      "op": "POP",
      "path": "8"
    },
    "3655": {
      "fn": "Loot._checkOnERC721Received",
      "offset": [
        5515,
        6376
      ],
      "op": "POP",
      "path": "8"
    },
    "3656": {
      "fn": "Loot._checkOnERC721Received",
      "jump": "o",
      "offset": [
        5515,
        6376
      ],
      "op": "JUMP",
      "path": "8"
    },
    "3657": {
      "fn": "Strings.toString",
      "offset": [
        275,
        978
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3658": {
      "fn": "Strings.toString",
      "offset": [
        331,
        344
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x60"
    },
    "3660": {
      "branch": 68,
      "fn": "Strings.toString",
      "offset": [
        548,
        558
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3661": {
      "fn": "Strings.toString",
      "offset": [
        544,
        595
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE6D"
    },
    "3664": {
      "branch": 68,
      "fn": "Strings.toString",
      "offset": [
        544,
        595
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3665": {
      "op": "POP"
    },
    "3666": {
      "op": "POP"
    },
    "3667": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 45,
      "value": "0x40"
    },
    "3669": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3670": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3671": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3672": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3673": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "ADD",
      "path": "4"
    },
    "3674": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3675": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3676": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3677": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "3679": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3680": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3681": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "3683": {
      "op": "PUSH1",
      "value": "0xFC"
    },
    "3685": {
      "op": "SHL"
    },
    "3686": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3688": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3689": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "ADD",
      "path": "4"
    },
    "3690": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3691": {
      "fn": "Strings.toString",
      "offset": [
        574,
        584
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3692": {
      "fn": "Strings.toString",
      "jump": "o",
      "offset": [
        275,
        978
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3693": {
      "fn": "Strings.toString",
      "offset": [
        544,
        595
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3694": {
      "fn": "Strings.toString",
      "offset": [
        619,
        624
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3695": {
      "fn": "Strings.toString",
      "offset": [
        604,
        616
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3697": {
      "fn": "Strings.toString",
      "offset": [
        658,
        733
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3698": {
      "fn": "Strings.toString",
      "offset": [
        665,
        674
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3699": {
      "fn": "Strings.toString",
      "offset": [
        665,
        674
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3700": {
      "fn": "Strings.toString",
      "offset": [
        658,
        733
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE97"
    },
    "3703": {
      "fn": "Strings.toString",
      "offset": [
        658,
        733
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3704": {
      "fn": "Strings.toString",
      "offset": [
        690,
        698
      ],
      "op": "DUP1",
      "path": "4",
      "statement": 46
    },
    "3705": {
      "fn": "Strings.toString",
      "offset": [
        690,
        698
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE81"
    },
    "3708": {
      "fn": "Strings.toString",
      "offset": [
        690,
        698
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3709": {
      "fn": "Strings.toString",
      "offset": [
        690,
        698
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1493"
    },
    "3712": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        690,
        698
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3713": {
      "fn": "Strings.toString",
      "offset": [
        690,
        698
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3714": {
      "fn": "Strings.toString",
      "offset": [
        690,
        698
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3715": {
      "op": "POP"
    },
    "3716": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 47,
      "value": "0xE90"
    },
    "3719": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3720": {
      "op": "POP"
    },
    "3721": {
      "fn": "Strings.toString",
      "offset": [
        720,
        722
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xA"
    },
    "3723": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3724": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1401"
    },
    "3727": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        712,
        722
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3728": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3729": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3730": {
      "fn": "Strings.toString",
      "offset": [
        712,
        722
      ],
      "op": "POP",
      "path": "4"
    },
    "3731": {
      "fn": "Strings.toString",
      "offset": [
        658,
        733
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xE71"
    },
    "3734": {
      "fn": "Strings.toString",
      "offset": [
        658,
        733
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3735": {
      "fn": "Strings.toString",
      "offset": [
        658,
        733
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3736": {
      "fn": "Strings.toString",
      "offset": [
        742,
        761
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3738": {
      "fn": "Strings.toString",
      "offset": [
        774,
        780
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3739": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH8",
      "path": "4",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3748": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3749": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "GT",
      "path": "4"
    },
    "3750": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3751": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEB2"
    },
    "3754": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3755": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEB2"
    },
    "3758": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1504"
    },
    "3761": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        764,
        781
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3762": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3763": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3765": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3766": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3767": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3768": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3769": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3770": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3771": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "3773": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ADD",
      "path": "4"
    },
    "3774": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1F"
    },
    "3776": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "NOT",
      "path": "4"
    },
    "3777": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "AND",
      "path": "4"
    },
    "3778": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3780": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ADD",
      "path": "4"
    },
    "3781": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3782": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ADD",
      "path": "4"
    },
    "3783": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "3785": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "3786": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3787": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3788": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEDC"
    },
    "3791": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3792": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3794": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP3",
      "path": "4"
    },
    "3795": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ADD",
      "path": "4"
    },
    "3796": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3797": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP1",
      "path": "4"
    },
    "3798": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "3799": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3800": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "CALLDATACOPY",
      "path": "4"
    },
    "3801": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "ADD",
      "path": "4"
    },
    "3802": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3803": {
      "op": "POP"
    },
    "3804": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3805": {
      "fn": "Strings.toString",
      "offset": [
        764,
        781
      ],
      "op": "POP",
      "path": "4"
    },
    "3806": {
      "fn": "Strings.toString",
      "offset": [
        742,
        781
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3807": {
      "fn": "Strings.toString",
      "offset": [
        742,
        781
      ],
      "op": "POP",
      "path": "4"
    },
    "3808": {
      "fn": "Strings.toString",
      "offset": [
        791,
        941
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3809": {
      "fn": "Strings.toString",
      "offset": [
        798,
        808
      ],
      "op": "DUP5",
      "path": "4"
    },
    "3810": {
      "fn": "Strings.toString",
      "offset": [
        798,
        808
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "3811": {
      "fn": "Strings.toString",
      "offset": [
        791,
        941
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF47"
    },
    "3814": {
      "fn": "Strings.toString",
      "offset": [
        791,
        941
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3815": {
      "fn": "Strings.toString",
      "offset": [
        824,
        835
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 48,
      "value": "0xEF1"
    },
    "3818": {
      "fn": "Strings.toString",
      "offset": [
        834,
        835
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "3820": {
      "fn": "Strings.toString",
      "offset": [
        824,
        835
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3821": {
      "fn": "Strings.toString",
      "offset": [
        824,
        835
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1415"
    },
    "3824": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        824,
        835
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3825": {
      "fn": "Strings.toString",
      "offset": [
        824,
        835
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3826": {
      "fn": "Strings.toString",
      "offset": [
        824,
        835
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "3827": {
      "op": "POP"
    },
    "3828": {
      "fn": "Strings.toString",
      "offset": [
        892,
        902
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 49,
      "value": "0xEFE"
    },
    "3831": {
      "fn": "Strings.toString",
      "offset": [
        900,
        902
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xA"
    },
    "3833": {
      "fn": "Strings.toString",
      "offset": [
        892,
        897
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3834": {
      "fn": "Strings.toString",
      "offset": [
        892,
        902
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14AE"
    },
    "3837": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        892,
        902
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3838": {
      "fn": "Strings.toString",
      "offset": [
        892,
        902
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3839": {
      "fn": "Strings.toString",
      "offset": [
        879,
        903
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF09"
    },
    "3842": {
      "fn": "Strings.toString",
      "offset": [
        879,
        903
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3843": {
      "fn": "Strings.toString",
      "offset": [
        879,
        881
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x30"
    },
    "3845": {
      "fn": "Strings.toString",
      "offset": [
        879,
        903
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x13E9"
    },
    "3848": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        879,
        903
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3849": {
      "fn": "Strings.toString",
      "offset": [
        879,
        903
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3850": {
      "fn": "Strings.toString",
      "offset": [
        866,
        905
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xF8"
    },
    "3852": {
      "fn": "Strings.toString",
      "offset": [
        866,
        905
      ],
      "op": "SHL",
      "path": "4"
    },
    "3853": {
      "fn": "Strings.toString",
      "offset": [
        849,
        855
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3854": {
      "fn": "Strings.toString",
      "offset": [
        856,
        862
      ],
      "op": "DUP4",
      "path": "4"
    },
    "3855": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3856": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "3857": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3858": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "LT",
      "path": "4"
    },
    "3859": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF1E"
    },
    "3862": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "3863": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xF1E"
    },
    "3866": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x14EE"
    },
    "3869": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        849,
        863
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3870": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3871": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "3873": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "ADD",
      "path": "4"
    },
    "3874": {
      "fn": "Strings.toString",
      "offset": [
        849,
        863
      ],
      "op": "ADD",
      "path": "4"
    },
    "3875": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3876": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3878": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3880": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3882": {
      "op": "SHL"
    },
    "3883": {
      "op": "SUB"
    },
    "3884": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "NOT",
      "path": "4"
    },
    "3885": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "AND",
      "path": "4"
    },
    "3886": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3887": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "DUP2",
      "path": "4"
    },
    "3888": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "3890": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "BYTE",
      "path": "4"
    },
    "3891": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "3892": {
      "fn": "Strings.toString",
      "offset": [
        849,
        905
      ],
      "op": "MSTORE8",
      "path": "4"
    },
    "3893": {
      "op": "POP"
    },
    "3894": {
      "fn": "Strings.toString",
      "offset": [
        919,
        930
      ],
      "op": "PUSH2",
      "path": "4",
      "statement": 50,
      "value": "0xF40"
    },
    "3897": {
      "fn": "Strings.toString",
      "offset": [
        928,
        930
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xA"
    },
    "3899": {
      "fn": "Strings.toString",
      "offset": [
        919,
        930
      ],
      "op": "DUP7",
      "path": "4"
    },
    "3900": {
      "fn": "Strings.toString",
      "offset": [
        919,
        930
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x1401"
    },
    "3903": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        919,
        930
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3904": {
      "fn": "Strings.toString",
      "offset": [
        919,
        930
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3905": {
      "fn": "Strings.toString",
      "offset": [
        919,
        930
      ],
      "op": "SWAP5",
      "path": "4"
    },
    "3906": {
      "fn": "Strings.toString",
      "offset": [
        919,
        930
      ],
      "op": "POP",
      "path": "4"
    },
    "3907": {
      "fn": "Strings.toString",
      "offset": [
        791,
        941
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0xEE0"
    },
    "3910": {
      "fn": "Strings.toString",
      "offset": [
        791,
        941
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3911": {
      "fn": "Strings.toString",
      "offset": [
        791,
        941
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "3912": {
      "fn": "Strings.toString",
      "offset": [
        964,
        970
      ],
      "op": "SWAP5",
      "path": "4",
      "statement": 51
    },
    "3913": {
      "fn": "Strings.toString",
      "offset": [
        275,
        978
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "3914": {
      "op": "POP"
    },
    "3915": {
      "op": "POP"
    },
    "3916": {
      "op": "POP"
    },
    "3917": {
      "op": "POP"
    },
    "3918": {
      "fn": "Strings.toString",
      "jump": "o",
      "offset": [
        275,
        978
      ],
      "op": "JUMP",
      "path": "4"
    },
    "3919": {
      "op": "JUMPDEST"
    },
    "3920": {
      "op": "DUP1"
    },
    "3921": {
      "op": "CALLDATALOAD"
    },
    "3922": {
      "op": "DUP1"
    },
    "3923": {
      "op": "ISZERO"
    },
    "3924": {
      "op": "ISZERO"
    },
    "3925": {
      "op": "DUP2"
    },
    "3926": {
      "op": "EQ"
    },
    "3927": {
      "op": "PUSH2",
      "value": "0xF5F"
    },
    "3930": {
      "op": "JUMPI"
    },
    "3931": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3933": {
      "op": "DUP1"
    },
    "3934": {
      "op": "REVERT"
    },
    "3935": {
      "op": "JUMPDEST"
    },
    "3936": {
      "op": "SWAP2"
    },
    "3937": {
      "op": "SWAP1"
    },
    "3938": {
      "op": "POP"
    },
    "3939": {
      "jump": "o",
      "op": "JUMP"
    },
    "3940": {
      "op": "JUMPDEST"
    },
    "3941": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3943": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3945": {
      "op": "DUP3"
    },
    "3946": {
      "op": "DUP5"
    },
    "3947": {
      "op": "SUB"
    },
    "3948": {
      "op": "SLT"
    },
    "3949": {
      "op": "ISZERO"
    },
    "3950": {
      "op": "PUSH2",
      "value": "0xF76"
    },
    "3953": {
      "op": "JUMPI"
    },
    "3954": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3956": {
      "op": "DUP1"
    },
    "3957": {
      "op": "REVERT"
    },
    "3958": {
      "op": "JUMPDEST"
    },
    "3959": {
      "op": "DUP2"
    },
    "3960": {
      "op": "CALLDATALOAD"
    },
    "3961": {
      "op": "PUSH2",
      "value": "0xCF6"
    },
    "3964": {
      "op": "DUP2"
    },
    "3965": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "3968": {
      "jump": "i",
      "op": "JUMP"
    },
    "3969": {
      "op": "JUMPDEST"
    },
    "3970": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3972": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3974": {
      "op": "DUP3"
    },
    "3975": {
      "op": "DUP5"
    },
    "3976": {
      "op": "SUB"
    },
    "3977": {
      "op": "SLT"
    },
    "3978": {
      "op": "ISZERO"
    },
    "3979": {
      "op": "PUSH2",
      "value": "0xF93"
    },
    "3982": {
      "op": "JUMPI"
    },
    "3983": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3985": {
      "op": "DUP1"
    },
    "3986": {
      "op": "REVERT"
    },
    "3987": {
      "op": "JUMPDEST"
    },
    "3988": {
      "op": "DUP2"
    },
    "3989": {
      "op": "MLOAD"
    },
    "3990": {
      "op": "PUSH2",
      "value": "0xCF6"
    },
    "3993": {
      "op": "DUP2"
    },
    "3994": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "3997": {
      "jump": "i",
      "op": "JUMP"
    },
    "3998": {
      "op": "JUMPDEST"
    },
    "3999": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4001": {
      "op": "DUP1"
    },
    "4002": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4004": {
      "op": "DUP4"
    },
    "4005": {
      "op": "DUP6"
    },
    "4006": {
      "op": "SUB"
    },
    "4007": {
      "op": "SLT"
    },
    "4008": {
      "op": "ISZERO"
    },
    "4009": {
      "op": "PUSH2",
      "value": "0xFB1"
    },
    "4012": {
      "op": "JUMPI"
    },
    "4013": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4015": {
      "op": "DUP1"
    },
    "4016": {
      "op": "REVERT"
    },
    "4017": {
      "op": "JUMPDEST"
    },
    "4018": {
      "op": "DUP3"
    },
    "4019": {
      "op": "CALLDATALOAD"
    },
    "4020": {
      "op": "PUSH2",
      "value": "0xFBC"
    },
    "4023": {
      "op": "DUP2"
    },
    "4024": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4027": {
      "jump": "i",
      "op": "JUMP"
    },
    "4028": {
      "op": "JUMPDEST"
    },
    "4029": {
      "op": "SWAP2"
    },
    "4030": {
      "op": "POP"
    },
    "4031": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4033": {
      "op": "DUP4"
    },
    "4034": {
      "op": "ADD"
    },
    "4035": {
      "op": "CALLDATALOAD"
    },
    "4036": {
      "op": "PUSH2",
      "value": "0xFCC"
    },
    "4039": {
      "op": "DUP2"
    },
    "4040": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4043": {
      "jump": "i",
      "op": "JUMP"
    },
    "4044": {
      "op": "JUMPDEST"
    },
    "4045": {
      "op": "DUP1"
    },
    "4046": {
      "op": "SWAP2"
    },
    "4047": {
      "op": "POP"
    },
    "4048": {
      "op": "POP"
    },
    "4049": {
      "op": "SWAP3"
    },
    "4050": {
      "op": "POP"
    },
    "4051": {
      "op": "SWAP3"
    },
    "4052": {
      "op": "SWAP1"
    },
    "4053": {
      "op": "POP"
    },
    "4054": {
      "jump": "o",
      "op": "JUMP"
    },
    "4055": {
      "op": "JUMPDEST"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4058": {
      "op": "DUP1"
    },
    "4059": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4061": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4063": {
      "op": "DUP5"
    },
    "4064": {
      "op": "DUP7"
    },
    "4065": {
      "op": "SUB"
    },
    "4066": {
      "op": "SLT"
    },
    "4067": {
      "op": "ISZERO"
    },
    "4068": {
      "op": "PUSH2",
      "value": "0xFEC"
    },
    "4071": {
      "op": "JUMPI"
    },
    "4072": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4074": {
      "op": "DUP1"
    },
    "4075": {
      "op": "REVERT"
    },
    "4076": {
      "op": "JUMPDEST"
    },
    "4077": {
      "op": "DUP4"
    },
    "4078": {
      "op": "CALLDATALOAD"
    },
    "4079": {
      "op": "PUSH2",
      "value": "0xFF7"
    },
    "4082": {
      "op": "DUP2"
    },
    "4083": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4086": {
      "jump": "i",
      "op": "JUMP"
    },
    "4087": {
      "op": "JUMPDEST"
    },
    "4088": {
      "op": "SWAP3"
    },
    "4089": {
      "op": "POP"
    },
    "4090": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4092": {
      "op": "DUP5"
    },
    "4093": {
      "op": "ADD"
    },
    "4094": {
      "op": "CALLDATALOAD"
    },
    "4095": {
      "op": "PUSH2",
      "value": "0x1007"
    },
    "4098": {
      "op": "DUP2"
    },
    "4099": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4102": {
      "jump": "i",
      "op": "JUMP"
    },
    "4103": {
      "op": "JUMPDEST"
    },
    "4104": {
      "op": "SWAP3"
    },
    "4105": {
      "op": "SWAP6"
    },
    "4106": {
      "op": "SWAP3"
    },
    "4107": {
      "op": "SWAP5"
    },
    "4108": {
      "op": "POP"
    },
    "4109": {
      "op": "POP"
    },
    "4110": {
      "op": "POP"
    },
    "4111": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4113": {
      "op": "SWAP2"
    },
    "4114": {
      "op": "SWAP1"
    },
    "4115": {
      "op": "SWAP2"
    },
    "4116": {
      "op": "ADD"
    },
    "4117": {
      "op": "CALLDATALOAD"
    },
    "4118": {
      "op": "SWAP1"
    },
    "4119": {
      "jump": "o",
      "op": "JUMP"
    },
    "4120": {
      "op": "JUMPDEST"
    },
    "4121": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4123": {
      "op": "DUP1"
    },
    "4124": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4126": {
      "op": "DUP1"
    },
    "4127": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4129": {
      "op": "DUP6"
    },
    "4130": {
      "op": "DUP8"
    },
    "4131": {
      "op": "SUB"
    },
    "4132": {
      "op": "SLT"
    },
    "4133": {
      "op": "ISZERO"
    },
    "4134": {
      "op": "PUSH2",
      "value": "0x102E"
    },
    "4137": {
      "op": "JUMPI"
    },
    "4138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4140": {
      "op": "DUP1"
    },
    "4141": {
      "op": "REVERT"
    },
    "4142": {
      "op": "JUMPDEST"
    },
    "4143": {
      "op": "DUP5"
    },
    "4144": {
      "op": "CALLDATALOAD"
    },
    "4145": {
      "op": "PUSH2",
      "value": "0x1039"
    },
    "4148": {
      "op": "DUP2"
    },
    "4149": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4152": {
      "jump": "i",
      "op": "JUMP"
    },
    "4153": {
      "op": "JUMPDEST"
    },
    "4154": {
      "op": "SWAP4"
    },
    "4155": {
      "op": "POP"
    },
    "4156": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4158": {
      "op": "DUP6"
    },
    "4159": {
      "op": "DUP2"
    },
    "4160": {
      "op": "ADD"
    },
    "4161": {
      "op": "CALLDATALOAD"
    },
    "4162": {
      "op": "PUSH2",
      "value": "0x104A"
    },
    "4165": {
      "op": "DUP2"
    },
    "4166": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4169": {
      "jump": "i",
      "op": "JUMP"
    },
    "4170": {
      "op": "JUMPDEST"
    },
    "4171": {
      "op": "SWAP4"
    },
    "4172": {
      "op": "POP"
    },
    "4173": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4175": {
      "op": "DUP7"
    },
    "4176": {
      "op": "ADD"
    },
    "4177": {
      "op": "CALLDATALOAD"
    },
    "4178": {
      "op": "SWAP3"
    },
    "4179": {
      "op": "POP"
    },
    "4180": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4182": {
      "op": "DUP7"
    },
    "4183": {
      "op": "ADD"
    },
    "4184": {
      "op": "CALLDATALOAD"
    },
    "4185": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4194": {
      "op": "DUP1"
    },
    "4195": {
      "op": "DUP3"
    },
    "4196": {
      "op": "GT"
    },
    "4197": {
      "op": "ISZERO"
    },
    "4198": {
      "op": "PUSH2",
      "value": "0x106E"
    },
    "4201": {
      "op": "JUMPI"
    },
    "4202": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4204": {
      "op": "DUP1"
    },
    "4205": {
      "op": "REVERT"
    },
    "4206": {
      "op": "JUMPDEST"
    },
    "4207": {
      "op": "DUP2"
    },
    "4208": {
      "op": "DUP9"
    },
    "4209": {
      "op": "ADD"
    },
    "4210": {
      "op": "SWAP2"
    },
    "4211": {
      "op": "POP"
    },
    "4212": {
      "op": "DUP9"
    },
    "4213": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4215": {
      "op": "DUP4"
    },
    "4216": {
      "op": "ADD"
    },
    "4217": {
      "op": "SLT"
    },
    "4218": {
      "op": "PUSH2",
      "value": "0x1082"
    },
    "4221": {
      "op": "JUMPI"
    },
    "4222": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4224": {
      "op": "DUP1"
    },
    "4225": {
      "op": "REVERT"
    },
    "4226": {
      "op": "JUMPDEST"
    },
    "4227": {
      "op": "DUP2"
    },
    "4228": {
      "op": "CALLDATALOAD"
    },
    "4229": {
      "op": "DUP2"
    },
    "4230": {
      "op": "DUP2"
    },
    "4231": {
      "op": "GT"
    },
    "4232": {
      "op": "ISZERO"
    },
    "4233": {
      "op": "PUSH2",
      "value": "0x1094"
    },
    "4236": {
      "op": "JUMPI"
    },
    "4237": {
      "op": "PUSH2",
      "value": "0x1094"
    },
    "4240": {
      "op": "PUSH2",
      "value": "0x1504"
    },
    "4243": {
      "jump": "i",
      "op": "JUMP"
    },
    "4244": {
      "op": "JUMPDEST"
    },
    "4245": {
      "op": "PUSH2",
      "value": "0x10A6"
    },
    "4248": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4250": {
      "op": "DUP3"
    },
    "4251": {
      "op": "ADD"
    },
    "4252": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4254": {
      "op": "NOT"
    },
    "4255": {
      "op": "AND"
    },
    "4256": {
      "op": "DUP6"
    },
    "4257": {
      "op": "ADD"
    },
    "4258": {
      "op": "PUSH2",
      "value": "0x13B8"
    },
    "4261": {
      "jump": "i",
      "op": "JUMP"
    },
    "4262": {
      "op": "JUMPDEST"
    },
    "4263": {
      "op": "SWAP2"
    },
    "4264": {
      "op": "POP"
    },
    "4265": {
      "op": "DUP1"
    },
    "4266": {
      "op": "DUP3"
    },
    "4267": {
      "op": "MSTORE"
    },
    "4268": {
      "op": "DUP10"
    },
    "4269": {
      "op": "DUP5"
    },
    "4270": {
      "op": "DUP3"
    },
    "4271": {
      "op": "DUP6"
    },
    "4272": {
      "op": "ADD"
    },
    "4273": {
      "op": "ADD"
    },
    "4274": {
      "op": "GT"
    },
    "4275": {
      "op": "ISZERO"
    },
    "4276": {
      "op": "PUSH2",
      "value": "0x10BC"
    },
    "4279": {
      "op": "JUMPI"
    },
    "4280": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4282": {
      "op": "DUP1"
    },
    "4283": {
      "op": "REVERT"
    },
    "4284": {
      "op": "JUMPDEST"
    },
    "4285": {
      "op": "DUP1"
    },
    "4286": {
      "op": "DUP5"
    },
    "4287": {
      "op": "DUP5"
    },
    "4288": {
      "op": "ADD"
    },
    "4289": {
      "op": "DUP6"
    },
    "4290": {
      "op": "DUP5"
    },
    "4291": {
      "op": "ADD"
    },
    "4292": {
      "op": "CALLDATACOPY"
    },
    "4293": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4295": {
      "op": "DUP5"
    },
    "4296": {
      "op": "DUP3"
    },
    "4297": {
      "op": "DUP5"
    },
    "4298": {
      "op": "ADD"
    },
    "4299": {
      "op": "ADD"
    },
    "4300": {
      "op": "MSTORE"
    },
    "4301": {
      "op": "POP"
    },
    "4302": {
      "op": "DUP1"
    },
    "4303": {
      "op": "SWAP4"
    },
    "4304": {
      "op": "POP"
    },
    "4305": {
      "op": "POP"
    },
    "4306": {
      "op": "POP"
    },
    "4307": {
      "op": "POP"
    },
    "4308": {
      "op": "SWAP3"
    },
    "4309": {
      "op": "SWAP6"
    },
    "4310": {
      "op": "SWAP2"
    },
    "4311": {
      "op": "SWAP5"
    },
    "4312": {
      "op": "POP"
    },
    "4313": {
      "op": "SWAP3"
    },
    "4314": {
      "op": "POP"
    },
    "4315": {
      "jump": "o",
      "op": "JUMP"
    },
    "4316": {
      "op": "JUMPDEST"
    },
    "4317": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4319": {
      "op": "DUP1"
    },
    "4320": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4322": {
      "op": "DUP4"
    },
    "4323": {
      "op": "DUP6"
    },
    "4324": {
      "op": "SUB"
    },
    "4325": {
      "op": "SLT"
    },
    "4326": {
      "op": "ISZERO"
    },
    "4327": {
      "op": "PUSH2",
      "value": "0x10EF"
    },
    "4330": {
      "op": "JUMPI"
    },
    "4331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4333": {
      "op": "DUP1"
    },
    "4334": {
      "op": "REVERT"
    },
    "4335": {
      "op": "JUMPDEST"
    },
    "4336": {
      "op": "DUP3"
    },
    "4337": {
      "op": "CALLDATALOAD"
    },
    "4338": {
      "op": "PUSH2",
      "value": "0x10FA"
    },
    "4341": {
      "op": "DUP2"
    },
    "4342": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4345": {
      "jump": "i",
      "op": "JUMP"
    },
    "4346": {
      "op": "JUMPDEST"
    },
    "4347": {
      "op": "SWAP2"
    },
    "4348": {
      "op": "POP"
    },
    "4349": {
      "op": "PUSH2",
      "value": "0x1108"
    },
    "4352": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4354": {
      "op": "DUP5"
    },
    "4355": {
      "op": "ADD"
    },
    "4356": {
      "op": "PUSH2",
      "value": "0xF4F"
    },
    "4359": {
      "jump": "i",
      "op": "JUMP"
    },
    "4360": {
      "op": "JUMPDEST"
    },
    "4361": {
      "op": "SWAP1"
    },
    "4362": {
      "op": "POP"
    },
    "4363": {
      "op": "SWAP3"
    },
    "4364": {
      "op": "POP"
    },
    "4365": {
      "op": "SWAP3"
    },
    "4366": {
      "op": "SWAP1"
    },
    "4367": {
      "op": "POP"
    },
    "4368": {
      "jump": "o",
      "op": "JUMP"
    },
    "4369": {
      "op": "JUMPDEST"
    },
    "4370": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4372": {
      "op": "DUP1"
    },
    "4373": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4375": {
      "op": "DUP4"
    },
    "4376": {
      "op": "DUP6"
    },
    "4377": {
      "op": "SUB"
    },
    "4378": {
      "op": "SLT"
    },
    "4379": {
      "op": "ISZERO"
    },
    "4380": {
      "op": "PUSH2",
      "value": "0x1124"
    },
    "4383": {
      "op": "JUMPI"
    },
    "4384": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4386": {
      "op": "DUP1"
    },
    "4387": {
      "op": "REVERT"
    },
    "4388": {
      "op": "JUMPDEST"
    },
    "4389": {
      "op": "DUP3"
    },
    "4390": {
      "op": "CALLDATALOAD"
    },
    "4391": {
      "op": "PUSH2",
      "value": "0x112F"
    },
    "4394": {
      "op": "DUP2"
    },
    "4395": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4398": {
      "jump": "i",
      "op": "JUMP"
    },
    "4399": {
      "op": "JUMPDEST"
    },
    "4400": {
      "op": "SWAP5"
    },
    "4401": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4403": {
      "op": "SWAP4"
    },
    "4404": {
      "op": "SWAP1"
    },
    "4405": {
      "op": "SWAP4"
    },
    "4406": {
      "op": "ADD"
    },
    "4407": {
      "op": "CALLDATALOAD"
    },
    "4408": {
      "op": "SWAP4"
    },
    "4409": {
      "op": "POP"
    },
    "4410": {
      "op": "POP"
    },
    "4411": {
      "op": "POP"
    },
    "4412": {
      "jump": "o",
      "op": "JUMP"
    },
    "4413": {
      "op": "JUMPDEST"
    },
    "4414": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4416": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4418": {
      "op": "DUP3"
    },
    "4419": {
      "op": "DUP5"
    },
    "4420": {
      "op": "SUB"
    },
    "4421": {
      "op": "SLT"
    },
    "4422": {
      "op": "ISZERO"
    },
    "4423": {
      "op": "PUSH2",
      "value": "0x114F"
    },
    "4426": {
      "op": "JUMPI"
    },
    "4427": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4429": {
      "op": "DUP1"
    },
    "4430": {
      "op": "REVERT"
    },
    "4431": {
      "op": "JUMPDEST"
    },
    "4432": {
      "op": "DUP2"
    },
    "4433": {
      "op": "CALLDATALOAD"
    },
    "4434": {
      "op": "PUSH2",
      "value": "0xCF6"
    },
    "4437": {
      "op": "DUP2"
    },
    "4438": {
      "op": "PUSH2",
      "value": "0x1532"
    },
    "4441": {
      "jump": "i",
      "op": "JUMP"
    },
    "4442": {
      "op": "JUMPDEST"
    },
    "4443": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4445": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4447": {
      "op": "DUP3"
    },
    "4448": {
      "op": "DUP5"
    },
    "4449": {
      "op": "SUB"
    },
    "4450": {
      "op": "SLT"
    },
    "4451": {
      "op": "ISZERO"
    },
    "4452": {
      "op": "PUSH2",
      "value": "0x116C"
    },
    "4455": {
      "op": "JUMPI"
    },
    "4456": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4458": {
      "op": "DUP1"
    },
    "4459": {
      "op": "REVERT"
    },
    "4460": {
      "op": "JUMPDEST"
    },
    "4461": {
      "op": "DUP2"
    },
    "4462": {
      "op": "MLOAD"
    },
    "4463": {
      "op": "PUSH2",
      "value": "0xCF6"
    },
    "4466": {
      "op": "DUP2"
    },
    "4467": {
      "op": "PUSH2",
      "value": "0x1532"
    },
    "4470": {
      "jump": "i",
      "op": "JUMP"
    },
    "4471": {
      "op": "JUMPDEST"
    },
    "4472": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4474": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4476": {
      "op": "DUP3"
    },
    "4477": {
      "op": "DUP5"
    },
    "4478": {
      "op": "SUB"
    },
    "4479": {
      "op": "SLT"
    },
    "4480": {
      "op": "ISZERO"
    },
    "4481": {
      "op": "PUSH2",
      "value": "0x1189"
    },
    "4484": {
      "op": "JUMPI"
    },
    "4485": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4487": {
      "op": "DUP1"
    },
    "4488": {
      "op": "REVERT"
    },
    "4489": {
      "op": "JUMPDEST"
    },
    "4490": {
      "op": "POP"
    },
    "4491": {
      "op": "CALLDATALOAD"
    },
    "4492": {
      "op": "SWAP2"
    },
    "4493": {
      "op": "SWAP1"
    },
    "4494": {
      "op": "POP"
    },
    "4495": {
      "jump": "o",
      "op": "JUMP"
    },
    "4496": {
      "op": "JUMPDEST"
    },
    "4497": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4499": {
      "op": "DUP1"
    },
    "4500": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4502": {
      "op": "DUP1"
    },
    "4503": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4505": {
      "op": "DUP6"
    },
    "4506": {
      "op": "DUP8"
    },
    "4507": {
      "op": "SUB"
    },
    "4508": {
      "op": "SLT"
    },
    "4509": {
      "op": "ISZERO"
    },
    "4510": {
      "op": "PUSH2",
      "value": "0x11A6"
    },
    "4513": {
      "op": "JUMPI"
    },
    "4514": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4516": {
      "op": "DUP1"
    },
    "4517": {
      "op": "REVERT"
    },
    "4518": {
      "op": "JUMPDEST"
    },
    "4519": {
      "op": "DUP5"
    },
    "4520": {
      "op": "CALLDATALOAD"
    },
    "4521": {
      "op": "SWAP4"
    },
    "4522": {
      "op": "POP"
    },
    "4523": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4525": {
      "op": "DUP1"
    },
    "4526": {
      "op": "DUP7"
    },
    "4527": {
      "op": "ADD"
    },
    "4528": {
      "op": "CALLDATALOAD"
    },
    "4529": {
      "op": "PUSH2",
      "value": "0x11B9"
    },
    "4532": {
      "op": "DUP2"
    },
    "4533": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "4536": {
      "jump": "i",
      "op": "JUMP"
    },
    "4537": {
      "op": "JUMPDEST"
    },
    "4538": {
      "op": "SWAP4"
    },
    "4539": {
      "op": "POP"
    },
    "4540": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4542": {
      "op": "DUP7"
    },
    "4543": {
      "op": "ADD"
    },
    "4544": {
      "op": "CALLDATALOAD"
    },
    "4545": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4554": {
      "op": "DUP1"
    },
    "4555": {
      "op": "DUP3"
    },
    "4556": {
      "op": "GT"
    },
    "4557": {
      "op": "ISZERO"
    },
    "4558": {
      "op": "PUSH2",
      "value": "0x11D6"
    },
    "4561": {
      "op": "JUMPI"
    },
    "4562": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4564": {
      "op": "DUP1"
    },
    "4565": {
      "op": "REVERT"
    },
    "4566": {
      "op": "JUMPDEST"
    },
    "4567": {
      "op": "DUP2"
    },
    "4568": {
      "op": "DUP9"
    },
    "4569": {
      "op": "ADD"
    },
    "4570": {
      "op": "SWAP2"
    },
    "4571": {
      "op": "POP"
    },
    "4572": {
      "op": "DUP9"
    },
    "4573": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4575": {
      "op": "DUP4"
    },
    "4576": {
      "op": "ADD"
    },
    "4577": {
      "op": "SLT"
    },
    "4578": {
      "op": "PUSH2",
      "value": "0x11EA"
    },
    "4581": {
      "op": "JUMPI"
    },
    "4582": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4584": {
      "op": "DUP1"
    },
    "4585": {
      "op": "REVERT"
    },
    "4586": {
      "op": "JUMPDEST"
    },
    "4587": {
      "op": "DUP2"
    },
    "4588": {
      "op": "CALLDATALOAD"
    },
    "4589": {
      "op": "DUP2"
    },
    "4590": {
      "op": "DUP2"
    },
    "4591": {
      "op": "GT"
    },
    "4592": {
      "op": "ISZERO"
    },
    "4593": {
      "op": "PUSH2",
      "value": "0x11FC"
    },
    "4596": {
      "op": "JUMPI"
    },
    "4597": {
      "op": "PUSH2",
      "value": "0x11FC"
    },
    "4600": {
      "op": "PUSH2",
      "value": "0x1504"
    },
    "4603": {
      "jump": "i",
      "op": "JUMP"
    },
    "4604": {
      "op": "JUMPDEST"
    },
    "4605": {
      "op": "DUP1"
    },
    "4606": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "4608": {
      "op": "SHL"
    },
    "4609": {
      "op": "SWAP2"
    },
    "4610": {
      "op": "POP"
    },
    "4611": {
      "op": "PUSH2",
      "value": "0x120D"
    },
    "4614": {
      "op": "DUP5"
    },
    "4615": {
      "op": "DUP4"
    },
    "4616": {
      "op": "ADD"
    },
    "4617": {
      "op": "PUSH2",
      "value": "0x13B8"
    },
    "4620": {
      "jump": "i",
      "op": "JUMP"
    },
    "4621": {
      "op": "JUMPDEST"
    },
    "4622": {
      "op": "DUP2"
    },
    "4623": {
      "op": "DUP2"
    },
    "4624": {
      "op": "MSTORE"
    },
    "4625": {
      "op": "DUP5"
    },
    "4626": {
      "op": "DUP2"
    },
    "4627": {
      "op": "ADD"
    },
    "4628": {
      "op": "SWAP1"
    },
    "4629": {
      "op": "DUP5"
    },
    "4630": {
      "op": "DUP7"
    },
    "4631": {
      "op": "ADD"
    },
    "4632": {
      "op": "DUP5"
    },
    "4633": {
      "op": "DUP7"
    },
    "4634": {
      "op": "ADD"
    },
    "4635": {
      "op": "DUP8"
    },
    "4636": {
      "op": "ADD"
    },
    "4637": {
      "op": "DUP14"
    },
    "4638": {
      "op": "LT"
    },
    "4639": {
      "op": "ISZERO"
    },
    "4640": {
      "op": "PUSH2",
      "value": "0x1228"
    },
    "4643": {
      "op": "JUMPI"
    },
    "4644": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4646": {
      "op": "DUP1"
    },
    "4647": {
      "op": "REVERT"
    },
    "4648": {
      "op": "JUMPDEST"
    },
    "4649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4651": {
      "op": "SWAP6"
    },
    "4652": {
      "op": "POP"
    },
    "4653": {
      "op": "DUP6"
    },
    "4654": {
      "op": "SWAP5"
    },
    "4655": {
      "op": "POP"
    },
    "4656": {
      "op": "JUMPDEST"
    },
    "4657": {
      "op": "DUP4"
    },
    "4658": {
      "op": "DUP6"
    },
    "4659": {
      "op": "LT"
    },
    "4660": {
      "op": "ISZERO"
    },
    "4661": {
      "op": "PUSH2",
      "value": "0x125C"
    },
    "4664": {
      "op": "JUMPI"
    },
    "4665": {
      "op": "DUP1"
    },
    "4666": {
      "op": "CALLDATALOAD"
    },
    "4667": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4669": {
      "op": "DUP2"
    },
    "4670": {
      "op": "AND"
    },
    "4671": {
      "op": "DUP2"
    },
    "4672": {
      "op": "EQ"
    },
    "4673": {
      "op": "PUSH2",
      "value": "0x1248"
    },
    "4676": {
      "op": "JUMPI"
    },
    "4677": {
      "op": "DUP7"
    },
    "4678": {
      "op": "DUP8"
    },
    "4679": {
      "op": "REVERT"
    },
    "4680": {
      "op": "JUMPDEST"
    },
    "4681": {
      "op": "DUP4"
    },
    "4682": {
      "op": "MSTORE"
    },
    "4683": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4685": {
      "op": "SWAP5"
    },
    "4686": {
      "op": "SWAP1"
    },
    "4687": {
      "op": "SWAP5"
    },
    "4688": {
      "op": "ADD"
    },
    "4689": {
      "op": "SWAP4"
    },
    "4690": {
      "op": "SWAP2"
    },
    "4691": {
      "op": "DUP7"
    },
    "4692": {
      "op": "ADD"
    },
    "4693": {
      "op": "SWAP2"
    },
    "4694": {
      "op": "DUP7"
    },
    "4695": {
      "op": "ADD"
    },
    "4696": {
      "op": "PUSH2",
      "value": "0x1230"
    },
    "4699": {
      "op": "JUMP"
    },
    "4700": {
      "op": "JUMPDEST"
    },
    "4701": {
      "op": "POP"
    },
    "4702": {
      "op": "DUP1"
    },
    "4703": {
      "op": "SWAP8"
    },
    "4704": {
      "op": "POP"
    },
    "4705": {
      "op": "POP"
    },
    "4706": {
      "op": "POP"
    },
    "4707": {
      "op": "POP"
    },
    "4708": {
      "op": "POP"
    },
    "4709": {
      "op": "POP"
    },
    "4710": {
      "op": "POP"
    },
    "4711": {
      "op": "PUSH2",
      "value": "0x1272"
    },
    "4714": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4716": {
      "op": "DUP7"
    },
    "4717": {
      "op": "ADD"
    },
    "4718": {
      "op": "PUSH2",
      "value": "0xF4F"
    },
    "4721": {
      "jump": "i",
      "op": "JUMP"
    },
    "4722": {
      "op": "JUMPDEST"
    },
    "4723": {
      "op": "SWAP1"
    },
    "4724": {
      "op": "POP"
    },
    "4725": {
      "op": "SWAP3"
    },
    "4726": {
      "op": "SWAP6"
    },
    "4727": {
      "op": "SWAP2"
    },
    "4728": {
      "op": "SWAP5"
    },
    "4729": {
      "op": "POP"
    },
    "4730": {
      "op": "SWAP3"
    },
    "4731": {
      "op": "POP"
    },
    "4732": {
      "jump": "o",
      "op": "JUMP"
    },
    "4733": {
      "op": "JUMPDEST"
    },
    "4734": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4736": {
      "op": "DUP4"
    },
    "4737": {
      "op": "MLOAD"
    },
    "4738": {
      "op": "PUSH2",
      "value": "0x128F"
    },
    "4741": {
      "op": "DUP2"
    },
    "4742": {
      "op": "DUP5"
    },
    "4743": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4745": {
      "op": "DUP9"
    },
    "4746": {
      "op": "ADD"
    },
    "4747": {
      "op": "PUSH2",
      "value": "0x142C"
    },
    "4750": {
      "jump": "i",
      "op": "JUMP"
    },
    "4751": {
      "op": "JUMPDEST"
    },
    "4752": {
      "op": "DUP4"
    },
    "4753": {
      "op": "MLOAD"
    },
    "4754": {
      "op": "SWAP1"
    },
    "4755": {
      "op": "DUP4"
    },
    "4756": {
      "op": "ADD"
    },
    "4757": {
      "op": "SWAP1"
    },
    "4758": {
      "op": "PUSH2",
      "value": "0x12A3"
    },
    "4761": {
      "op": "DUP2"
    },
    "4762": {
      "op": "DUP4"
    },
    "4763": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4765": {
      "op": "DUP9"
    },
    "4766": {
      "op": "ADD"
    },
    "4767": {
      "op": "PUSH2",
      "value": "0x142C"
    },
    "4770": {
      "jump": "i",
      "op": "JUMP"
    },
    "4771": {
      "op": "JUMPDEST"
    },
    "4772": {
      "op": "ADD"
    },
    "4773": {
      "op": "SWAP5"
    },
    "4774": {
      "op": "SWAP4"
    },
    "4775": {
      "op": "POP"
    },
    "4776": {
      "op": "POP"
    },
    "4777": {
      "op": "POP"
    },
    "4778": {
      "op": "POP"
    },
    "4779": {
      "jump": "o",
      "op": "JUMP"
    },
    "4780": {
      "op": "JUMPDEST"
    },
    "4781": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4783": {
      "op": "DUP2"
    },
    "4784": {
      "op": "MSTORE"
    },
    "4785": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4787": {
      "op": "DUP3"
    },
    "4788": {
      "op": "MLOAD"
    },
    "4789": {
      "op": "DUP1"
    },
    "4790": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4792": {
      "op": "DUP5"
    },
    "4793": {
      "op": "ADD"
    },
    "4794": {
      "op": "MSTORE"
    },
    "4795": {
      "op": "PUSH2",
      "value": "0x12CB"
    },
    "4798": {
      "op": "DUP2"
    },
    "4799": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4801": {
      "op": "DUP6"
    },
    "4802": {
      "op": "ADD"
    },
    "4803": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4805": {
      "op": "DUP8"
    },
    "4806": {
      "op": "ADD"
    },
    "4807": {
      "op": "PUSH2",
      "value": "0x142C"
    },
    "4810": {
      "jump": "i",
      "op": "JUMP"
    },
    "4811": {
      "op": "JUMPDEST"
    },
    "4812": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4814": {
      "op": "ADD"
    },
    "4815": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4817": {
      "op": "NOT"
    },
    "4818": {
      "op": "AND"
    },
    "4819": {
      "op": "SWAP2"
    },
    "4820": {
      "op": "SWAP1"
    },
    "4821": {
      "op": "SWAP2"
    },
    "4822": {
      "op": "ADD"
    },
    "4823": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4825": {
      "op": "ADD"
    },
    "4826": {
      "op": "SWAP3"
    },
    "4827": {
      "op": "SWAP2"
    },
    "4828": {
      "op": "POP"
    },
    "4829": {
      "op": "POP"
    },
    "4830": {
      "jump": "o",
      "op": "JUMP"
    },
    "4831": {
      "op": "JUMPDEST"
    },
    "4832": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4834": {
      "op": "DUP1"
    },
    "4835": {
      "op": "DUP3"
    },
    "4836": {
      "op": "MSTORE"
    },
    "4837": {
      "op": "PUSH1",
      "value": "0x2D"
    },
    "4839": {
      "op": "SWAP1"
    },
    "4840": {
      "op": "DUP3"
    },
    "4841": {
      "op": "ADD"
    },
    "4842": {
      "op": "MSTORE"
    },
    "4843": {
      "op": "PUSH32",
      "value": "0x54686520746F6B656E206D6179206E6F742062652073656E7420746F20746865"
    },
    "4876": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4878": {
      "op": "DUP3"
    },
    "4879": {
      "op": "ADD"
    },
    "4880": {
      "op": "MSTORE"
    },
    "4881": {
      "op": "PUSH13",
      "value": "0x207A65726F2061646472657373"
    },
    "4895": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "4897": {
      "op": "SHL"
    },
    "4898": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4900": {
      "op": "DUP3"
    },
    "4901": {
      "op": "ADD"
    },
    "4902": {
      "op": "MSTORE"
    },
    "4903": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4905": {
      "op": "ADD"
    },
    "4906": {
      "op": "SWAP1"
    },
    "4907": {
      "jump": "o",
      "op": "JUMP"
    },
    "4908": {
      "op": "JUMPDEST"
    },
    "4909": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4911": {
      "op": "DUP1"
    },
    "4912": {
      "op": "DUP3"
    },
    "4913": {
      "op": "MSTORE"
    },
    "4914": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4916": {
      "op": "SWAP1"
    },
    "4917": {
      "op": "DUP3"
    },
    "4918": {
      "op": "ADD"
    },
    "4919": {
      "op": "MSTORE"
    },
    "4920": {
      "op": "PUSH32",
      "value": "0x5468652070726F766964656420746F6B656E20494420646F6573206E6F742065"
    },
    "4953": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4955": {
      "op": "DUP3"
    },
    "4956": {
      "op": "ADD"
    },
    "4957": {
      "op": "MSTORE"
    },
    "4958": {
      "op": "PUSH4",
      "value": "0x1E1A5CDD"
    },
    "4963": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "4965": {
      "op": "SHL"
    },
    "4966": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4968": {
      "op": "DUP3"
    },
    "4969": {
      "op": "ADD"
    },
    "4970": {
      "op": "MSTORE"
    },
    "4971": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4973": {
      "op": "ADD"
    },
    "4974": {
      "op": "SWAP1"
    },
    "4975": {
      "jump": "o",
      "op": "JUMP"
    },
    "4976": {
      "op": "JUMPDEST"
    },
    "4977": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4979": {
      "op": "DUP1"
    },
    "4980": {
      "op": "DUP3"
    },
    "4981": {
      "op": "MSTORE"
    },
    "4982": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "4984": {
      "op": "SWAP1"
    },
    "4985": {
      "op": "DUP3"
    },
    "4986": {
      "op": "ADD"
    },
    "4987": {
      "op": "MSTORE"
    },
    "4988": {
      "op": "PUSH32",
      "value": "0x5468652072656365697665722063616E6E6F7420616363657074204552433732"
    },
    "5021": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5023": {
      "op": "DUP3"
    },
    "5024": {
      "op": "ADD"
    },
    "5025": {
      "op": "MSTORE"
    },
    "5026": {
      "op": "PUSH8",
      "value": "0x3120746F6B656E73"
    },
    "5035": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "5037": {
      "op": "SHL"
    },
    "5038": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5040": {
      "op": "DUP3"
    },
    "5041": {
      "op": "ADD"
    },
    "5042": {
      "op": "MSTORE"
    },
    "5043": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5045": {
      "op": "ADD"
    },
    "5046": {
      "op": "SWAP1"
    },
    "5047": {
      "jump": "o",
      "op": "JUMP"
    },
    "5048": {
      "op": "JUMPDEST"
    },
    "5049": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5051": {
      "op": "MLOAD"
    },
    "5052": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5054": {
      "op": "DUP3"
    },
    "5055": {
      "op": "ADD"
    },
    "5056": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5058": {
      "op": "NOT"
    },
    "5059": {
      "op": "AND"
    },
    "5060": {
      "op": "DUP2"
    },
    "5061": {
      "op": "ADD"
    },
    "5062": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5071": {
      "op": "DUP2"
    },
    "5072": {
      "op": "GT"
    },
    "5073": {
      "op": "DUP3"
    },
    "5074": {
      "op": "DUP3"
    },
    "5075": {
      "op": "LT"
    },
    "5076": {
      "op": "OR"
    },
    "5077": {
      "op": "ISZERO"
    },
    "5078": {
      "op": "PUSH2",
      "value": "0x13E1"
    },
    "5081": {
      "op": "JUMPI"
    },
    "5082": {
      "op": "PUSH2",
      "value": "0x13E1"
    },
    "5085": {
      "op": "PUSH2",
      "value": "0x1504"
    },
    "5088": {
      "jump": "i",
      "op": "JUMP"
    },
    "5089": {
      "op": "JUMPDEST"
    },
    "5090": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5092": {
      "op": "MSTORE"
    },
    "5093": {
      "op": "SWAP2"
    },
    "5094": {
      "op": "SWAP1"
    },
    "5095": {
      "op": "POP"
    },
    "5096": {
      "jump": "o",
      "op": "JUMP"
    },
    "5097": {
      "op": "JUMPDEST"
    },
    "5098": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5100": {
      "op": "DUP3"
    },
    "5101": {
      "op": "NOT"
    },
    "5102": {
      "op": "DUP3"
    },
    "5103": {
      "op": "GT"
    },
    "5104": {
      "op": "ISZERO"
    },
    "5105": {
      "op": "PUSH2",
      "value": "0x13FC"
    },
    "5108": {
      "op": "JUMPI"
    },
    "5109": {
      "op": "PUSH2",
      "value": "0x13FC"
    },
    "5112": {
      "op": "PUSH2",
      "value": "0x14C2"
    },
    "5115": {
      "jump": "i",
      "op": "JUMP"
    },
    "5116": {
      "op": "JUMPDEST"
    },
    "5117": {
      "op": "POP"
    },
    "5118": {
      "op": "ADD"
    },
    "5119": {
      "op": "SWAP1"
    },
    "5120": {
      "jump": "o",
      "op": "JUMP"
    },
    "5121": {
      "op": "JUMPDEST"
    },
    "5122": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5124": {
      "op": "DUP3"
    },
    "5125": {
      "op": "PUSH2",
      "value": "0x1410"
    },
    "5128": {
      "op": "JUMPI"
    },
    "5129": {
      "op": "PUSH2",
      "value": "0x1410"
    },
    "5132": {
      "op": "PUSH2",
      "value": "0x14D8"
    },
    "5135": {
      "jump": "i",
      "op": "JUMP"
    },
    "5136": {
      "op": "JUMPDEST"
    },
    "5137": {
      "op": "POP"
    },
    "5138": {
      "op": "DIV"
    },
    "5139": {
      "op": "SWAP1"
    },
    "5140": {
      "jump": "o",
      "op": "JUMP"
    },
    "5141": {
      "op": "JUMPDEST"
    },
    "5142": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5144": {
      "op": "DUP3"
    },
    "5145": {
      "op": "DUP3"
    },
    "5146": {
      "op": "LT"
    },
    "5147": {
      "op": "ISZERO"
    },
    "5148": {
      "op": "PUSH2",
      "value": "0x1427"
    },
    "5151": {
      "op": "JUMPI"
    },
    "5152": {
      "op": "PUSH2",
      "value": "0x1427"
    },
    "5155": {
      "op": "PUSH2",
      "value": "0x14C2"
    },
    "5158": {
      "jump": "i",
      "op": "JUMP"
    },
    "5159": {
      "op": "JUMPDEST"
    },
    "5160": {
      "op": "POP"
    },
    "5161": {
      "op": "SUB"
    },
    "5162": {
      "op": "SWAP1"
    },
    "5163": {
      "jump": "o",
      "op": "JUMP"
    },
    "5164": {
      "op": "JUMPDEST"
    },
    "5165": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5167": {
      "op": "JUMPDEST"
    },
    "5168": {
      "op": "DUP4"
    },
    "5169": {
      "op": "DUP2"
    },
    "5170": {
      "op": "LT"
    },
    "5171": {
      "op": "ISZERO"
    },
    "5172": {
      "op": "PUSH2",
      "value": "0x1447"
    },
    "5175": {
      "op": "JUMPI"
    },
    "5176": {
      "op": "DUP2"
    },
    "5177": {
      "op": "DUP2"
    },
    "5178": {
      "op": "ADD"
    },
    "5179": {
      "op": "MLOAD"
    },
    "5180": {
      "op": "DUP4"
    },
    "5181": {
      "op": "DUP3"
    },
    "5182": {
      "op": "ADD"
    },
    "5183": {
      "op": "MSTORE"
    },
    "5184": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5186": {
      "op": "ADD"
    },
    "5187": {
      "op": "PUSH2",
      "value": "0x142F"
    },
    "5190": {
      "op": "JUMP"
    },
    "5191": {
      "op": "JUMPDEST"
    },
    "5192": {
      "op": "DUP4"
    },
    "5193": {
      "op": "DUP2"
    },
    "5194": {
      "op": "GT"
    },
    "5195": {
      "op": "ISZERO"
    },
    "5196": {
      "op": "PUSH2",
      "value": "0xBE1"
    },
    "5199": {
      "op": "JUMPI"
    },
    "5200": {
      "op": "POP"
    },
    "5201": {
      "op": "POP"
    },
    "5202": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5204": {
      "op": "SWAP2"
    },
    "5205": {
      "op": "ADD"
    },
    "5206": {
      "op": "MSTORE"
    },
    "5207": {
      "jump": "o",
      "op": "JUMP"
    },
    "5208": {
      "op": "JUMPDEST"
    },
    "5209": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5211": {
      "op": "DUP2"
    },
    "5212": {
      "op": "DUP2"
    },
    "5213": {
      "op": "SHR"
    },
    "5214": {
      "op": "SWAP1"
    },
    "5215": {
      "op": "DUP3"
    },
    "5216": {
      "op": "AND"
    },
    "5217": {
      "op": "DUP1"
    },
    "5218": {
      "op": "PUSH2",
      "value": "0x146C"
    },
    "5221": {
      "op": "JUMPI"
    },
    "5222": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "5224": {
      "op": "DUP3"
    },
    "5225": {
      "op": "AND"
    },
    "5226": {
      "op": "SWAP2"
    },
    "5227": {
      "op": "POP"
    },
    "5228": {
      "op": "JUMPDEST"
    },
    "5229": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5231": {
      "op": "DUP3"
    },
    "5232": {
      "op": "LT"
    },
    "5233": {
      "op": "DUP2"
    },
    "5234": {
      "op": "EQ"
    },
    "5235": {
      "op": "ISZERO"
    },
    "5236": {
      "op": "PUSH2",
      "value": "0x148D"
    },
    "5239": {
      "op": "JUMPI"
    },
    "5240": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5245": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5247": {
      "op": "SHL"
    },
    "5248": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5250": {
      "op": "MSTORE"
    },
    "5251": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "5253": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5255": {
      "op": "MSTORE"
    },
    "5256": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5258": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5260": {
      "op": "REVERT"
    },
    "5261": {
      "op": "JUMPDEST"
    },
    "5262": {
      "op": "POP"
    },
    "5263": {
      "op": "SWAP2"
    },
    "5264": {
      "op": "SWAP1"
    },
    "5265": {
      "op": "POP"
    },
    "5266": {
      "jump": "o",
      "op": "JUMP"
    },
    "5267": {
      "op": "JUMPDEST"
    },
    "5268": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5270": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5272": {
      "op": "NOT"
    },
    "5273": {
      "op": "DUP3"
    },
    "5274": {
      "op": "EQ"
    },
    "5275": {
      "op": "ISZERO"
    },
    "5276": {
      "op": "PUSH2",
      "value": "0x14A7"
    },
    "5279": {
      "op": "JUMPI"
    },
    "5280": {
      "op": "PUSH2",
      "value": "0x14A7"
    },
    "5283": {
      "op": "PUSH2",
      "value": "0x14C2"
    },
    "5286": {
      "jump": "i",
      "op": "JUMP"
    },
    "5287": {
      "op": "JUMPDEST"
    },
    "5288": {
      "op": "POP"
    },
    "5289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5291": {
      "op": "ADD"
    },
    "5292": {
      "op": "SWAP1"
    },
    "5293": {
      "jump": "o",
      "op": "JUMP"
    },
    "5294": {
      "op": "JUMPDEST"
    },
    "5295": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5297": {
      "op": "DUP3"
    },
    "5298": {
      "op": "PUSH2",
      "value": "0x14BD"
    },
    "5301": {
      "op": "JUMPI"
    },
    "5302": {
      "op": "PUSH2",
      "value": "0x14BD"
    },
    "5305": {
      "op": "PUSH2",
      "value": "0x14D8"
    },
    "5308": {
      "jump": "i",
      "op": "JUMP"
    },
    "5309": {
      "op": "JUMPDEST"
    },
    "5310": {
      "op": "POP"
    },
    "5311": {
      "op": "MOD"
    },
    "5312": {
      "op": "SWAP1"
    },
    "5313": {
      "jump": "o",
      "op": "JUMP"
    },
    "5314": {
      "op": "JUMPDEST"
    },
    "5315": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5320": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5322": {
      "op": "SHL"
    },
    "5323": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5325": {
      "op": "MSTORE"
    },
    "5326": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "5328": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5330": {
      "op": "MSTORE"
    },
    "5331": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5333": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5335": {
      "op": "REVERT"
    },
    "5336": {
      "op": "JUMPDEST"
    },
    "5337": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5342": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5344": {
      "op": "SHL"
    },
    "5345": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5347": {
      "op": "MSTORE"
    },
    "5348": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "5350": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5352": {
      "op": "MSTORE"
    },
    "5353": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5355": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5357": {
      "op": "REVERT"
    },
    "5358": {
      "op": "JUMPDEST"
    },
    "5359": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5364": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5366": {
      "op": "SHL"
    },
    "5367": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5369": {
      "op": "MSTORE"
    },
    "5370": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "5372": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5374": {
      "op": "MSTORE"
    },
    "5375": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5377": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5379": {
      "op": "REVERT"
    },
    "5380": {
      "op": "JUMPDEST"
    },
    "5381": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5386": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5388": {
      "op": "SHL"
    },
    "5389": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5391": {
      "op": "MSTORE"
    },
    "5392": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "5394": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5396": {
      "op": "MSTORE"
    },
    "5397": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5399": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5401": {
      "op": "REVERT"
    },
    "5402": {
      "op": "JUMPDEST"
    },
    "5403": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5407": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5409": {
      "op": "SHL"
    },
    "5410": {
      "op": "SUB"
    },
    "5411": {
      "op": "DUP2"
    },
    "5412": {
      "op": "AND"
    },
    "5413": {
      "op": "DUP2"
    },
    "5414": {
      "op": "EQ"
    },
    "5415": {
      "op": "PUSH2",
      "value": "0x152F"
    },
    "5418": {
      "op": "JUMPI"
    },
    "5419": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5421": {
      "op": "DUP1"
    },
    "5422": {
      "op": "REVERT"
    },
    "5423": {
      "op": "JUMPDEST"
    },
    "5424": {
      "op": "POP"
    },
    "5425": {
      "jump": "o",
      "op": "JUMP"
    },
    "5426": {
      "op": "JUMPDEST"
    },
    "5427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5429": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5431": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5433": {
      "op": "SHL"
    },
    "5434": {
      "op": "SUB"
    },
    "5435": {
      "op": "NOT"
    },
    "5436": {
      "op": "DUP2"
    },
    "5437": {
      "op": "AND"
    },
    "5438": {
      "op": "DUP2"
    },
    "5439": {
      "op": "EQ"
    },
    "5440": {
      "op": "PUSH2",
      "value": "0x152F"
    },
    "5443": {
      "op": "JUMPI"
    },
    "5444": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5446": {
      "op": "DUP1"
    },
    "5447": {
      "op": "REVERT"
    }
  },
  "sha1": "2fba3a9e6f1e1a6d8f6c4c8a252578ef7728719d",
  "source": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Oracle.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title Loot NFT\n * @dev This contract is a light implementation of ERC721 to save on gas and bloat\n * @notice Much of this code is taken from the OpenZeppelin ERC721 implementation\n *         https://docs.openzeppelin.com/contracts/4.x/api/token/erc721\n */\ncontract Loot is ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Token base URI\n    string private _baseURI;\n\n    // The oracle\n    Oracle private _oracle;\n\n    // Index of the current token\n    uint256 private _index;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping token ID to shinyness\n    mapping(uint256 => bool) private _shiny;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Mapping that checks if punk has already been looted\n    mapping(uint256 => bool) private _punkMinted;\n\n    // Event called when a punk is consumed\n    event PunkConsumed(uint256 indexed punkId, address indexed to);\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string memory baseURI_,\n        address oracle_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _baseURI = baseURI_;\n        _oracle = Oracle(oracle_);\n    }\n\n    /**\n     * @dev Modifier that only oracle operators may call\n     */\n    modifier onlyOracleOperator() {\n        require(\n            msg.sender == _oracle.operator(),\n            \"Only the oracle operator may perform this action\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Gets the oracle operator address\n     */\n    function getOracle() public view returns (address) {\n        return address(_oracle);\n    }\n\n    /**\n     * @dev Defines the ERC165 interfaces\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Check the balance of the provided address\n     * @notice Does not throw for zero address queries\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Get the owner of a specific token\n     * @notice Does not throw for zero address queries\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        return owner;\n    }\n\n    /**\n     * @dev Transfers a token and checks that the receiver accepts ERC721 tokens\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        address owner = Loot.ownerOf(tokenId);\n        require(_owners[tokenId] != address(0), \"The token does not exist\");\n        require(\n            msg.sender == owner ||\n                getApproved(tokenId) == msg.sender ||\n                isApprovedForAll(owner, msg.sender),\n            \"The operator is not approved to transfer this token\"\n        );\n        require(\n            owner == from,\n            \"The sender does not own the token to be transfered\"\n        );\n        require(\n            to != address(0),\n            \"The token may not be sent to the zero address\"\n        );\n        require(\n            _checkOnERC721Received(from, to, tokenId),\n            \"The receiver cannot accept ERC721 tokens\"\n        );\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Defaults to the safe transfer method and discards data\n     * @notice Required for ERC721 standard\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Defaults to the safe transfer method\n     * @notice Required for ERC721 interface\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Checks if the receiver can handle receiving an ERC721\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    msg.sender,\n                    from,\n                    tokenId,\n                    \"\"\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"The receiver cannot accept ERC721 tokens\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Approves an operator to handle the ERC721\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = Loot.ownerOf(tokenId);\n        require(to != owner, \"The owner does not need to be approved\");\n\n        require(\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"Only owners or operators may call this function\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(Loot.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Checks which address is approved for given token ID\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _owners[tokenId] != address(0),\n            \"The provided token ID does not exist\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Approve or remove operator as an operator for the caller\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        require(operator != msg.sender, \"The sender may not be the operator\");\n\n        _operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /**\n     * @dev Returns if the operator is allowed to manage all of the assets of owner\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns the name of the token\n     * @notice Required for ERC721\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token\n     * @notice Required for ERC721\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the base URI of the token\n     * @notice Required for ERC721\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _owners[tokenId] != address(0),\n            \"The provided token ID does not exist\"\n        );\n\n        string memory baseURI = _baseURI;\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    function mint(\n        uint256 punkId,\n        address to,\n        uint8[] memory ids,\n        bool shiny\n    ) public onlyOracleOperator {\n        require(\n            to != address(0),\n            \"The token may not be sent to the zero address\"\n        );\n        require(!_punkMinted[punkId], \"The CryptoPunk was already minted\");\n\n        uint256 newIndex = _index + ids.length;\n\n        for (_index; _index < newIndex; _index++) {\n            require(\n                _owners[_index] == address(0),\n                \"The provided token ID does not exist\"\n            );\n            require(\n                _checkOnERC721Received(address(0), to, _index),\n                \"The receiver cannot accept ERC721 tokens\"\n            );\n\n            _balances[to] += 1;\n            _owners[_index] = to;\n            _shiny[_index] = shiny;\n\n            emit Transfer(address(0), to, _index);\n        }\n\n        _punkMinted[punkId] = true;\n        emit PunkConsumed(punkId, to);\n    }\n\n    /**\n     * @dev Returns the shinyness of an object\n     */\n    function isShiny(uint256 tokenId) public view returns (bool) {\n        return _shiny[tokenId];\n    }\n}\n",
  "sourceMap": "783:9349:8:-:0;;;2001:256;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2146:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2169:17:8;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2196:19:8;;;;:8;;:19;;;;;:::i;:::-;-1:-1:-1;2225:7:8;:25;;-1:-1:-1;;;;;;2225:25:8;-1:-1:-1;;;;;2225:25:8;;;;;;;;;;-1:-1:-1;783:9349:8;;-1:-1:-1;;783:9349:8;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;783:9349:8;;;-1:-1:-1;783:9349:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:885:10;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;139:1;136;129:12;88:2;162:13;;-1:-1:-1;;;;;224:10:10;;;221:2;;;237:18;;:::i;:::-;312:2;306:9;280:2;366:13;;-1:-1:-1;;362:22:10;;;386:2;358:31;354:40;342:53;;;410:18;;;430:22;;;407:46;404:2;;;456:18;;:::i;:::-;496:10;492:2;485:22;531:2;523:6;516:18;553:4;543:14;;598:3;593:2;588;580:6;576:15;572:24;569:33;566:2;;;615:1;612;605:12;566:2;637:1;628:10;;647:133;661:2;658:1;655:9;647:133;;;749:14;;;745:23;;739:30;718:14;;;714:23;;707:63;672:10;;;;647:133;;;798:2;795:1;792:9;789:2;;;857:1;852:2;847;839:6;835:15;831:24;824:35;789:2;887:6;78:821;-1:-1:-1;;;;;;78:821:10:o;904:934::-;1031:6;1039;1047;1055;1108:3;1096:9;1087:7;1083:23;1079:33;1076:2;;;1125:1;1122;1115:12;1076:2;1152:16;;-1:-1:-1;;;;;1217:14:10;;;1214:2;;;1244:1;1241;1234:12;1214:2;1267:61;1320:7;1311:6;1300:9;1296:22;1267:61;:::i;:::-;1257:71;;1374:2;1363:9;1359:18;1353:25;1337:41;;1403:2;1393:8;1390:16;1387:2;;;1419:1;1416;1409:12;1387:2;1442:63;1497:7;1486:8;1475:9;1471:24;1442:63;:::i;:::-;1432:73;;1551:2;1540:9;1536:18;1530:25;1514:41;;1580:2;1570:8;1567:16;1564:2;;;1596:1;1593;1586:12;1564:2;;1619:63;1674:7;1663:8;1652:9;1648:24;1619:63;:::i;:::-;1725:2;1710:18;;1704:25;1609:73;;-1:-1:-1;1704:25:10;-1:-1:-1;;;;;;1758:31:10;;1748:42;;1738:2;;1804:1;1801;1794:12;1738:2;1066:772;;;;-1:-1:-1;1066:772:10;;-1:-1:-1;;1066:772:10:o;1843:380::-;1922:1;1918:12;;;;1965;;;1986:2;;2040:4;2032:6;2028:17;2018:27;;1986:2;2093;2085:6;2082:14;2062:18;2059:38;2056:2;;;2139:10;2134:3;2130:20;2127:1;2120:31;2174:4;2171:1;2164:15;2202:4;2199:1;2192:15;2056:2;;1898:325;;;:::o;2228:127::-;2289:10;2284:3;2280:20;2277:1;2270:31;2320:4;2317:1;2310:15;2344:4;2341:1;2334:15;2260:95;783:9349:8;;;;;;",
  "sourcePath": "contracts/Loot.sol",
  "type": "contract"
}